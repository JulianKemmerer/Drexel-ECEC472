
            Assura (R) Physical Verification Version av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17
            Release 4.1_USR4_HF6

Copyright (c) Cadence Design Systems. All rights reserved.
@(#)$CDS: assura_64 version av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17 01/29/2014 13:15 (sjfdl030) $
sub-version 4.1_USR4_HF6, integ signature 2014-01-29-1246

run on xunil-01 from /opt/cadence/ASSURA41/tools.lnx86/assura/bin/64bit/assura on Sat Mar 15 12:56:19 2014


Starting /opt/cadence/ASSURA41//tools/assura/bin/aveng /home/DREXEL/jvk27/ECEC472/IBM/SRA_DRC/SRA_DRC.rsf -restart -cdslib /home/DREXEL/jvk27/ECEC472/IBM/cds.lib -libdefs /home/DREXEL/jvk27/ECEC472/IBM/lib.defs
@(#)$CDS: aveng_64 version av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17 01/29/2014 13:16 (sjfdl030) $
sub-version 4.1_USR4_HF6, integ signature 2014-01-29-1246

run on xunil-01 from /opt/cadence/ASSURA41/tools.lnx86/assura/bin/64bit/aveng on Sat Mar 15 12:56:19 2014

 Summary Report: SRA_DRC.sum
 RSF           : /home/DREXEL/jvk27/ECEC472/IBM/SRA_DRC/SRA_DRC.rsf
 Library Name  : Julian_Shifts_And_Mux
 CDSLIB Path   : "/home/DREXEL/jvk27/ECEC472/IBM/cds.lib"
 LIBDEFS Path  : "/home/DREXEL/jvk27/ECEC472/IBM/lib.defs"
 Cell Name     : SRA
 View Name     : layout
 Rules File    : /home/ECEx72/IBM_CMOS7RF/IBM_PDK/cmrf7sf/V2.0.1.0AM/Assura/DRC/drc.rul
 Options       : -restart -cdslib /home/DREXEL/jvk27/ECEC472/IBM/cds.lib -libdefs /home/DREXEL/jvk27/ECEC472/IBM/lib.defs 
 Work Directory: /home/DREXEL/jvk27/ECEC472/IBM/SRA_DRC
 Operating Mode: Legacy Mode is Off

Checking out license for Assura_DRC
Restarting with VDB Build 2 

Building the VDB part 2 in background mode.

Executing: ipci = cellBoundary("*IPCI*" )

Executing: sram_std = cellBoundary("B74HCELL2" "B74RCELL2" "B74TCELL2" "B75HCELL2" "B75RCELL2" "B75TCELL2" )

Executing: dsram = cellBoundary("srm_dense_6t*" "srm_dense_gap*" "srm_twist*" "srm_notwist*" "scel481e" "scel481o" "A7RCELL2_H" "base_pcap" "base_pcap2" "base_pcapo" "BASE_FLMW" "BASE_FLMW_M1" "BASE_FLMW_POS" "BASE_CCMW_A7RCELL2_H" "A7RCELL2_H_MODEL" ...

Executing: sram_hvt = cellBoundary("R7HCELL2" "7RFHCELL1_P_H_ra1_hvt" "7RFHCELL2_H_pc_ra1_hvt" "7RFHCELL2_H_ra1_hvt" "7RFHCELL2_H_rf1_hvt" "7RFH_CELL2_H_M" "7RFH_CELL2_H_ccmw_rf1_hvt" "7RFH_CELL2_H_flmwg_ra1_hvt" "7RFH_CELL2_H_flmwgl_ra1_hvt" ...

Executing: sram_dual = cellBoundary("D75HTRAM8T_10*" "D75HTRAM8T_EDGELR*" "D75HTRAM8T_EDGETB_L*" "D75HTRAM8T_EDGETB_R*" "D75HRAM8T_10*" "D75HRAM8T_EDGELR*" "D75HRAM8T_EDGETB_L*" "D75HRAM8T_EDGETB_R*" "D74HTRAM8T_10*" "D74HTRAM8T_EDGELR*" ...

Building the VDB part 3 in background mode.


Running in restart mode.


Finished building the VDB. VDB build times for main process:
cpu: 0.79  elap: 7  pf: 0  in: 0  out: 186504  virt: 182M  phys: 902M

Running the Task Processor, 1 cells, 20846 steps...

Top Cell is 'SRA layout Julian_Shifts_And_Mux'

Executing: errorLayer(bkgnd "# INFO: I/O PADS = C4(4 on 8) #")

Executing: errorLayer(geomAndNot(ca_net ca) "ERROR: CA(net) not covered by CA(drawing) found!")

Executing: errorLayer(geomAndNot(cab_net cabar) "ERROR: CABAR(net) not covered by CABAR(drawing) found!")

Executing: errorLayer(geomAndNot(e2_net e2) "ERROR: E2(net) not covered by E2(drawing) found!")

Executing: errorLayer(geomAndNot(ft_net ft) "ERROR: FT(net) not covered by FT(drawing) found!")

Executing: errorLayer(geomAndNot(ns_net ns) "ERROR: NS(net) not covered by NS(drawing) found!")

Executing: errorLayer(geomAndNot(nw_net nw) "ERROR: NW(net) not covered by NW(drawing) found!")

Executing: errorLayer(geomAndNot(v1_net v1) "ERROR: V1(net) not covered by V1(drawing) found!")

Executing: errorLayer(geomAndNot(v1b_net v1bar) "ERROR: V1BAR(net) not covered by V1BAR(drawing) found!")

Executing: errorLayer(geomAndNot(v2_net v2) "ERROR: V2(net) not covered by V2(drawing) found!")

Executing: errorLayer(geomAndNot(v2b_net v2bar) "ERROR: V2BAR(net) not covered by V2BAR(drawing) found!")

Executing: errorLayer(geomAndNot(v3_net v3) "ERROR: V3(net) not covered by V3(drawing) found!")

Executing: errorLayer(geomAndNot(v3b_net v3bar) "ERROR: V3BAR(net) not covered by V3BAR(drawing) found!")

Executing: errorLayer(geomAndNot(v4_net v4) "ERROR: V4(net) not covered by V4(drawing) found!")

Executing: errorLayer(geomAndNot(v4b_net v4bar) "ERROR: V4BAR(net) not covered by V4BAR(drawing) found!")

Executing: errorLayer(geomAndNot(v5_net v5) "ERROR: V5(net) not covered by V5(drawing) found!")

Executing: errorLayer(geomAndNot(v5b_net v5bar) "ERROR: V5BAR(net) not covered by V5BAR(drawing) found!")

Executing: errorLayer(geomAndNot(am_ntpn am) "ERROR: AM(net or pin) not covered by AM(drawing) found!")

Executing: errorLayer(geomAndNot(dv_ntpn dv) "ERROR: DV(net or pin) not covered by DV(drawing) found!")

Executing: errorLayer(geomAndNot(e1_ntpn e1) "ERROR: E1(net or pin) not covered by E1(drawing) found!")

Executing: errorLayer(geomAndNot(lv_ntpn lv) "ERROR: LV(net or pin) not covered by LV(drawing) found!")

Executing: errorLayer(geomAndNot(m1_ntpn m1) "ERROR: M1(net or pin) not covered by M1(drawing) found!")

Executing: errorLayer(geomAndNot(m2_ntpn m2) "ERROR: M2(net or pin) not covered by M2(drawing) found!")

Executing: errorLayer(geomAndNot(m3_ntpn m3) "ERROR: M3(net or pin) not covered by M3(drawing) found!")

Executing: errorLayer(geomAndNot(m4_ntpn m4) "ERROR: M4(net or pin) not covered by M4(drawing) found!")

Executing: errorLayer(geomAndNot(m5_ntpn m5) "ERROR: M5(net or pin) not covered by M5(drawing) found!")

Executing: errorLayer(geomAndNot(ma_ntpn ma) "ERROR: MA(net or pin) not covered by MA(drawing) found!")

Executing: errorLayer(geomAndNot(ml_ntpn ml) "ERROR: ML(net or pin) not covered by ML(drawing) found!")

Executing: errorLayer(geomAndNot(mt_ntpn mt) "ERROR: MT(net or pin) not covered by MT(drawing) found!")

Executing: errorLayer(geomAndNot(nw_ntpn nw) "ERROR: NW(net or pin) not covered by NW(drawing) found!")

Executing: errorLayer(geomAndNot(rx_ntpn rx) "ERROR: RX(net or pin) not covered by RX(drawing) found!")

Executing: err_pc_nt = geomAndNot(pc_net pc)
	   errorLayer(err_pc_nt "ERROR: PC(net) not covered by PC(drawing) found!")

Executing: err_pc_pn = geomAndNot(geomAndNot(pc_pin pc) grlogic)
	   errorLayer(err_pc_pn "ERROR: PC(pin) not covered by PC(drawing) found!")

Executing: errpn001_zerovt = geomStraddle(zerovt logobnd)
	   errorLayer(errpn001_zerovt "GRPN001: Shape straddling LOGOBND found! (ZEROVT)")

Executing: errpn001_ft = geomStraddle(ft logobnd)
	   errorLayer(errpn001_ft "GRPN001: Shape straddling LOGOBND found! (FT)")

Executing: errpn001_ftbar = geomStraddle(ftbar logobnd)
	   errorLayer(errpn001_ftbar "GRPN001: Shape straddling LOGOBND found! (FRBAR)")

Executing: errpn001_am = geomStraddle(am logobnd)
	   errorLayer(errpn001_am "GRPN001: Shape straddling LOGOBND found! (AM)")

Executing: errpn001_ma = geomStraddle(ma logobnd)
	   errorLayer(errpn001_ma "GRPN001: Shape straddling LOGOBND found! (MA)")

Executing: errpn001_e1 = geomStraddle(e1 logobnd)
	   errorLayer(errpn001_e1 "GRPN001: Shape straddling LOGOBND found! (E1)")

Executing: errpn001_e2 = geomStraddle(e2 logobnd)
	   errorLayer(errpn001_e2 "GRPN001: Shape straddling LOGOBND found! (E2)")

Executing: errpn001_ml = geomStraddle(ml logobnd)
	   errorLayer(errpn001_ml "GRPN001: Shape straddling LOGOBND found! (ML)")

Executing: errpn001_bb = geomStraddle(bb logobnd)
	   errorLayer(errpn001_bb "GRPN001: Shape straddling LOGOBND found! (BB)")

Executing: errpn001_bf = geomStraddle(bf logobnd)
	   errorLayer(errpn001_bf "GRPN001: Shape straddling LOGOBND found! (BF)")

Executing: errpn001_bfmoat = geomStraddle(bfmoat logobnd)
	   errorLayer(errpn001_bfmoat "GRPN001: Shape straddling LOGOBND found! (BFMOAT)")

Executing: errpn001_bh = geomStraddle(bh logobnd)
	   errorLayer(errpn001_bh "GRPN001: Shape straddling LOGOBND found! (BH)")

Executing: errpn001_bn = geomStraddle(bn logobnd)
	   errorLayer(errpn001_bn "GRPN001: Shape straddling LOGOBND found! (BN)")

Executing: errpn001_bp = geomStraddle(bp logobnd)
	   errorLayer(errpn001_bp "GRPN001: Shape straddling LOGOBND found! (BP)")

Executing: errpn001_bp2nd = geomStraddle(bp2nd logobnd)
	   errorLayer(errpn001_bp2nd "GRPN001: Shape straddling LOGOBND found! (BP2ND)")

Executing: errpn001_ca = geomStraddle(ca logobnd)
	   errorLayer(errpn001_ca "GRPN001: Shape straddling LOGOBND found! (CA)")

Executing: errpn001_cabar = geomStraddle(cabar logobnd)
	   errorLayer(errpn001_cabar "GRPN001: Shape straddling LOGOBND found! (CABAR)")

Executing: errpn001_cap = geomStraddle(cap logobnd)
	   errorLayer(errpn001_cap "GRPN001: Shape straddling LOGOBND found! (CAP)")

Executing: errpn001_de = geomStraddle(de logobnd)
	   errorLayer(errpn001_de "GRPN001: Shape straddling LOGOBND found! (DE)")

Executing: errpn001_df = geomStraddle(df logobnd)
	   errorLayer(errpn001_df "GRPN001: Shape straddling LOGOBND found! (DF)")

Executing: errpn001_tg = geomStraddle(tg logobnd)
	   errorLayer(errpn001_tg "GRPN001: Shape straddling LOGOBND found! (TG)")

Executing: errpn001_dg = geomStraddle(dg logobnd)
	   errorLayer(errpn001_dg "GRPN001: Shape straddling LOGOBND found! (DG)")

Executing: errpn001_di = geomStraddle(di logobnd)
	   errorLayer(errpn001_di "GRPN001: Shape straddling LOGOBND found! (DI)")

Executing: errpn001_ht = geomStraddle(ht logobnd)
	   errorLayer(errpn001_ht "GRPN001: Shape straddling LOGOBND found! (HT)")

Executing: errpn001_k1 = geomStraddle(k1 logobnd)
	   errorLayer(errpn001_k1 "GRPN001: Shape straddling LOGOBND found! (K1)")

Executing: errpn001_m1 = geomStraddle(m1 logobnd)
	   errorLayer(errpn001_m1 "GRPN001: Shape straddling LOGOBND found! (M1)")

Executing: errpn001_m1chexcl = geomStraddle(m1chexcl logobnd)
	   errorLayer(errpn001_m1chexcl "GRPN001: Shape straddling LOGOBND found! (M1CHEXCL)")

Executing: errpn001_m2 = geomStraddle(m2 logobnd)
	   errorLayer(errpn001_m2 "GRPN001: Shape straddling LOGOBND found! (M2)")

Executing: errpn001_m3 = geomStraddle(m3 logobnd)
	   errorLayer(errpn001_m3 "GRPN001: Shape straddling LOGOBND found! (M3)")

Executing: errpn001_m4 = geomStraddle(m4 logobnd)
	   errorLayer(errpn001_m4 "GRPN001: Shape straddling LOGOBND found! (M4)")

Executing: errpn001_m5 = geomStraddle(m5 logobnd)
	   errorLayer(errpn001_m5 "GRPN001: Shape straddling LOGOBND found! (M5)")

Executing: errpn001_mimhk = geomStraddle(mimhk logobnd)
	   errorLayer(errpn001_mimhk "GRPN001: Shape straddling LOGOBND found! (MIM_HK)")

Executing: errpn001_mimhd = geomStraddle(mimhd logobnd)
	   errorLayer(errpn001_mimhd "GRPN001: Shape straddling LOGOBND found! (MIM_HD)")

Executing: errpn001_mosvar = geomStraddle(mosvar logobnd)
	   errorLayer(errpn001_mosvar "GRPN001: Shape straddling LOGOBND found! (MOSVAR)")

Executing: errpn001_mt = geomStraddle(mt logobnd)
	   errorLayer(errpn001_mt "GRPN001: Shape straddling LOGOBND found! (MT)")

Executing: errpn001_ns = geomStraddle(ns logobnd)
	   errorLayer(errpn001_ns "GRPN001: Shape straddling LOGOBND found! (NS)")

Executing: errpn001_nw = geomStraddle(nw logobnd)
	   errorLayer(errpn001_nw "GRPN001: Shape straddling LOGOBND found! (NW)")

Executing: errpn001_nwasp = geomStraddle(nwasp logobnd)
	   errorLayer(errpn001_nwasp "GRPN001: Shape straddling LOGOBND found! (NWASP)")

Executing: errpn001_op = geomStraddle(op logobnd)
	   errorLayer(errpn001_op "GRPN001: Shape straddling LOGOBND found! (OP)")

Executing: errpn001_pc = geomStraddle(pc logobnd)
	   errorLayer(errpn001_pc "GRPN001: Shape straddling LOGOBND found! (PC)")

Executing: errpn001_pcing = geomStraddle(pcing logobnd)
	   errorLayer(errpn001_pcing "GRPN001: Shape straddling LOGOBND found! (PCING)")

Executing: errpn001_pd = geomStraddle(pd logobnd)
	   errorLayer(errpn001_pd "GRPN001: Shape straddling LOGOBND found! (PD)")

Executing: errpn001_pcfuse = geomStraddle(pcfuse logobnd)
	   errorLayer(errpn001_pcfuse "GRPN001: Shape straddling LOGOBND found! (PCFUSE)")

Executing: errpn001_ph = geomStraddle(ph logobnd)
	   errorLayer(errpn001_ph "GRPN001: Shape straddling LOGOBND found! (PH)")

Executing: errpn001_pi = geomStraddle(pi logobnd)
	   errorLayer(errpn001_pi "GRPN001: Shape straddling LOGOBND found! (PI)")

Executing: errpn001_qt = geomStraddle(qt logobnd)
	   errorLayer(errpn001_qt "GRPN001: Shape straddling LOGOBND found! (QT)")

Executing: errpn001_rn = geomStraddle(rn logobnd)
	   errorLayer(errpn001_rn "GRPN001: Shape straddling LOGOBND found! (RN)")

Executing: errpn001_rp = geomStraddle(rp logobnd)
	   errorLayer(errpn001_rp "GRPN001: Shape straddling LOGOBND found! (RP)")

Executing: errpn001_rr = geomStraddle(rr logobnd)
	   errorLayer(errpn001_rr "GRPN001: Shape straddling LOGOBND found! (RR)")

Executing: errpn001_pr = geomStraddle(pr logobnd)
	   errorLayer(errpn001_pr "GRPN001: Shape straddling LOGOBND found! (PR)")

Executing: errpn001_nr = geomStraddle(nr logobnd)
	   errorLayer(errpn001_nr "GRPN001: Shape straddling LOGOBND found! (NR)")

Executing: errpn001_rx = geomStraddle(rx logobnd)
	   errorLayer(errpn001_rx "GRPN001: Shape straddling LOGOBND found! (RX)")

Executing: errpn001_v1 = geomStraddle(v1 logobnd)
	   errorLayer(errpn001_v1 "GRPN001: Shape straddling LOGOBND found! (V1)")

Executing: errpn001_v1bar = geomStraddle(v1bar logobnd)
	   errorLayer(errpn001_v1bar "GRPN001: Shape straddling LOGOBND found! (V1BAR)")

Executing: errpn001_v2 = geomStraddle(v2 logobnd)
	   errorLayer(errpn001_v2 "GRPN001: Shape straddling LOGOBND found! (V2)")

Executing: errpn001_v2bar = geomStraddle(v2bar logobnd)
	   errorLayer(errpn001_v2bar "GRPN001: Shape straddling LOGOBND found! (V2BAR)")

Executing: errpn001_v3 = geomStraddle(v3 logobnd)
	   errorLayer(errpn001_v3 "GRPN001: Shape straddling LOGOBND found! (V3)")

Executing: errpn001_v3bar = geomStraddle(v3bar logobnd)
	   errorLayer(errpn001_v3bar "GRPN001: Shape straddling LOGOBND found! (V3BAR)")

Executing: errpn001_v4 = geomStraddle(v4 logobnd)
	   errorLayer(errpn001_v4 "GRPN001: Shape straddling LOGOBND found! (V4)")

Executing: errpn001_v4bar = geomStraddle(v4bar logobnd)
	   errorLayer(errpn001_v4bar "GRPN001: Shape straddling LOGOBND found! (V4BAR)")

Executing: errpn001_v5 = geomStraddle(v5 logobnd)
	   errorLayer(errpn001_v5 "GRPN001: Shape straddling LOGOBND found! (V5)")

Executing: errpn001_v5bar = geomStraddle(v5bar logobnd)
	   errorLayer(errpn001_v5bar "GRPN001: Shape straddling LOGOBND found! (V5BAR)")

Executing: errpn001_dgv = geomStraddle(dgv logobnd)
	   errorLayer(errpn001_dgv "GRPN001: Shape straddling LOGOBND found! (dgv      )")

Executing: errpn001_lvdummy = geomStraddle(lvdummy logobnd)
	   errorLayer(errpn001_lvdummy "GRPN001: Shape straddling LOGOBND found! (lvdummy  )")

Executing: errpn001_esd_cdm = geomStraddle(esd_cdm logobnd)
	   errorLayer(errpn001_esd_cdm "GRPN001: Shape straddling LOGOBND found! (esd_cdm  )")

Executing: errpn001_c4lv = geomStraddle(c4lv logobnd)
	   errorLayer(errpn001_c4lv "GRPN001: Shape straddling LOGOBND found! (c4lv     )")

Executing: errpn001_dipi = geomStraddle(dipi logobnd)
	   errorLayer(errpn001_dipi "GRPN001: Shape straddling LOGOBND found! (dipi     )")

Executing: errpn001_grlogic = geomStraddle(grlogic logobnd)
	   errorLayer(errpn001_grlogic "GRPN001: Shape straddling LOGOBND found! (grlogic  )")

Executing: errpn001_fltgate = geomStraddle(fltgate logobnd)
	   errorLayer(errpn001_fltgate "GRPN001: Shape straddling LOGOBND found! (fltgate  )")

Executing: errpn001_wvr = geomStraddle(wvr logobnd)
	   errorLayer(errpn001_wvr "GRPN001: Shape straddling LOGOBND found! (wvr      )")

Executing: errpn001_sblk = geomStraddle(sblk logobnd)
	   errorLayer(errpn001_sblk "GRPN001: Shape straddling LOGOBND found! (sblk     )")

Executing: errpn001_jd = geomStraddle(jd logobnd)
	   errorLayer(errpn001_jd "GRPN001: Shape straddling LOGOBND found! (JD)")

Executing: errpn001_ind = geomStraddle(ind_filt logobnd)
	   errorLayer(errpn001_ind "GRPN001: Shape straddling LOGOBND found! (ind_filt )")

Executing: errpn001_bondpad = geomStraddle(bondpad logobnd)
	   errorLayer(errpn001_bondpad "GRPN001: Shape straddling LOGOBND found! (bondpad  )")

Executing: errpn001_tline_am = geomStraddle(tline_am logobnd)
	   errorLayer(errpn001_tline_am "GRPN001: Shape straddling LOGOBND found! (tline_am )")

Executing: errpn001_tline_ma = geomStraddle(tline_ma logobnd)
	   errorLayer(errpn001_tline_ma "GRPN001: Shape straddling LOGOBND found! (tline_ma )")

Executing: errpn001_tline_ml = geomStraddle(tline_ml logobnd)
	   errorLayer(errpn001_tline_ml "GRPN001: Shape straddling LOGOBND found! (tline_ml )")

Executing: errpn001_lowcrnt = geomStraddle(lowcrnt logobnd)
	   errorLayer(errpn001_lowcrnt "GRPN001: Shape straddling LOGOBND found! (lowcrnt  )")

Executing: errpn001_vncapm1 = geomStraddle(vncapm1 logobnd)
	   errorLayer(errpn001_vncapm1 "GRPN001: Shape straddling LOGOBND found! (vncapm1  )")

Executing: errpn001_vncapm2 = geomStraddle(vncapm2 logobnd)
	   errorLayer(errpn001_vncapm2 "GRPN001: Shape straddling LOGOBND found! (vncapm2  )")

Executing: errpn001_vncapm3 = geomStraddle(vncapm3 logobnd)
	   errorLayer(errpn001_vncapm3 "GRPN001: Shape straddling LOGOBND found! (vncapm3  )")

Executing: errpn001_vncapm4 = geomStraddle(vncapm4 logobnd)
	   errorLayer(errpn001_vncapm4 "GRPN001: Shape straddling LOGOBND found! (vncapm4  )")

Executing: errpn001_vncapm5 = geomStraddle(vncapm5 logobnd)
	   errorLayer(errpn001_vncapm5 "GRPN001: Shape straddling LOGOBND found! (vncapm5  )")

Executing: errpn001_vncapmt = geomStraddle(vncapmt logobnd)
	   errorLayer(errpn001_vncapmt "GRPN001: Shape straddling LOGOBND found! (vncapmt  )")

Executing: errpn001_vncapcnt = geomStraddle(vncapcount logobnd)
	   errorLayer(errpn001_vncapcnt "GRPN001: Shape straddling LOGOBND found! (vncapcnt )")

Executing: errpn001_vncapparm = geomStraddle(vncapparm logobnd)
	   errorLayer(errpn001_vncapparm "GRPN001: Shape straddling LOGOBND found! (vncapparm)")

Executing: errpn001_rx5v = geomStraddle(rx5v logobnd)
	   errorLayer(errpn001_rx5v "GRPN001: Shape straddling LOGOBND found! (rx5v     )")

Executing: errpn001_reshv = geomStraddle(reshv logobnd)
	   errorLayer(errpn001_reshv "GRPN001: Shape straddling LOGOBND found! (reshv    )")

Executing: errpn001_5vonly = geomStraddle(fivevonly logobnd)
	   errorLayer(errpn001_5vonly "GRPN001: Shape straddling LOGOBND found! (5vonly   )")

Executing: errpn001_bipolar = geomStraddle(bipolar logobnd)
	   errorLayer(errpn001_bipolar "GRPN001: Shape straddling LOGOBND found! (bipolar  )")

Executing: errpn001_schky = geomStraddle(schky logobnd)
	   errorLayer(errpn001_schky "GRPN001: Shape straddling LOGOBND found! (schky    )")

Executing: errpn001_scgate = geomStraddle(scgate logobnd)
	   errorLayer(errpn001_scgate "GRPN001: Shape straddling LOGOBND found! (scgate   )")

Executing: errpn001_plyoncrk = geomStraddle(plyoncrk logobnd)
	   errorLayer(errpn001_plyoncrk "GRPN001: Shape straddling LOGOBND found! (plyoncrk )")

Executing: ca_all = geomOr(ca cabar)

Executing: ca_logo = geomAnd(ca_all logobnd)

Executing: drc(ca_logo (sepNotch < 0.4) withSingularPoint "GRPN203: CA to CA space (logo...

Executing: m1_logo = geomAnd(m1 logobnd)

Executing: drc(m1_logo (sepNotch < 0.4) withSingularPoint "GRPN502: M1 to M1 space (logo...

Executing: v1_all = geomOr(v1 v1bar)

Executing: v2_all = geomOr(v2 v2bar)

Executing: v3_all = geomOr(v3 v3bar)

Executing: v4_all = geomOr(v4 v4bar)

Executing: v5_all = geomOr(v5 v5bar)

Executing: v1_logo = geomAnd(v1_all logobnd)

Executing: v2_logo = geomAnd(v2_all logobnd)

Executing: v3_logo = geomAnd(v3_all logobnd)

Executing: v4_logo = geomAnd(v4_all logobnd)

Executing: v5_logo = geomAnd(v5_all logobnd)

Executing: drc(v1_logo (sepNotch < 0.4) withSingularPoint "GRPN553: V1 to V1 space (logo...

Executing: drc(v2_logo (sepNotch < 0.4) withSingularPoint "GRPN553: V2 to V2 space (logo...

Executing: drc(v3_logo (sepNotch < 0.4) withSingularPoint "GRPN553: V3 to V3 space (logo...

Executing: drc(v4_logo (sepNotch < 0.4) withSingularPoint "GRPN553: V4 to V4 space (logo...

Executing: drc(v5_logo (sepNotch < 0.4) withSingularPoint "GRPN553: V5 to V5 space (logo...

Executing: m2_logo = geomAnd(m2 logobnd)

Executing: m3_logo = geomAnd(m3 logobnd)

Executing: m4_logo = geomAnd(m4 logobnd)

Executing: m5_logo = geomAnd(m5 logobnd)

Executing: mt_logo = geomAnd(mt logobnd)

Executing: drc(m2_logo (sepNotch < 0.4) withSingularPoint "GRPN602: M2 to M2 space (logo...

Executing: drc(m3_logo (sepNotch < 0.4) withSingularPoint "GRPN602: M3 to M3 space (logo...

Executing: drc(m4_logo (sepNotch < 0.4) withSingularPoint "GRPN602: M4 to M4 space (logo...

Executing: drc(m5_logo (sepNotch < 0.4) withSingularPoint "GRPN602: M5 to M5 space (logo...

Executing: drc(mt_logo (sepNotch < 0.4) withSingularPoint "GRPN602: MT to MT space (logo...

Executing: errorLayer(geomAnd(geomAndNot(dv crackstop) logobnd) "GRPN907: DV over LOGOBND found!")

Executing: errorLayer(geomAnd(geomAndNot(lv crackstop) logobnd) "GRPN907: LV over LOGOBND found!")

Executing: errorLayer(geomAnd(geomAndNot(tv crackstop) logobnd) "GRPN907: TV over LOGOBND found!")

Executing: m1_exists = geomEnclose(bkgnd m1)

Executing: m2_empty = geomOutside(bkgnd m2)

Executing: m2_exists = geomEnclose(bkgnd m2)

Executing: m3_empty = geomOutside(bkgnd m3)

Executing: m3_exists = geomEnclose(bkgnd m3)

Executing: m4_empty = geomOutside(bkgnd m4)

Executing: m4_exists = geomEnclose(bkgnd m4)

Executing: m5_empty = geomOutside(bkgnd m5)

Executing: m5_exists = geomEnclose(bkgnd m5)

Executing: LM1 = geomAnd(geomAnd(geomAnd(geomAnd(m1_exists m2_empty) m3_empty) m4_empty)...

Executing: LM2 = geomAnd(geomAnd(geomAnd(m2_exists m3_empty) m4_empty) m5_empty)

Executing: LM3 = geomAnd(geomAnd(m3_exists m4_empty) m5_empty)

Executing: LM4 = geomAnd(m4_exists m5_empty)

Executing: LM5 = geomOr(m5_exists)

Executing: LM2_5 = geomOr(LM2 LM3 LM4 LM5)

Executing: LM3_5 = geomOr(LM3 LM4 LM5)

Executing: LM4_5 = geomOr(LM4 LM5)

Executing: am_empty = geomOutside(bkgnd am)

Executing: am_exists = geomEnclose(bkgnd am)

Executing: ma_empty = geomOutside(bkgnd ma)

Executing: ma_exists = geomEnclose(bkgnd ma)

Executing: ml_empty = geomOutside(bkgnd ml)

Executing: ml_exists = geomEnclose(bkgnd ml)

Executing: mz_empty = geomOutside(bkgnd mz)

Executing: mz_exists = geomEnclose(bkgnd mz)

Executing: LM0AM = geomAnd(am_exists geomAnd(geomAnd(ma_empty ml_empty) mz_empty))

Executing: LM1AM = geomAnd(am_exists LM1)
	   errorLayer(LM1AM "# INFO: 3 Level Metal (M1+MT+AM) #")

Executing: LM2AM = geomAnd(am_exists LM2)
	   errorLayer(LM2AM "# INFO: 4 Level Metal (M1+M2+MT+AM) #")

Executing: LM3AM = geomAnd(am_exists LM3)
	   errorLayer(LM3AM "# INFO: 5 Level Metal (M1+M2+M3+MT+AM) #")

Executing: LM4AM = geomAnd(am_exists LM4)
	   errorLayer(LM4AM "# INFO: 6 Level Metal (M1+M2+M3+M4+MT+AM) #")

Executing: LM5AM = geomAnd(am_exists LM5)
	   errorLayer(LM5AM "# INFO: 7 Level Metal (M1+M2+M3+M4+M5+MT+AM) #")

Executing: LM0MA = geomAnd(ma_exists geomAnd(geomAnd(am_empty ml_empty) mz_empty))

Executing: LM1MA = geomAnd(ma_exists LM1)
	   errorLayer(LM1MA "# INFO: 4 Level Metal (M1+MT+E1+MA) #")

Executing: LM2MA = geomAnd(ma_exists LM2)
	   errorLayer(LM2MA "# INFO: 5 Level Metal (M1+M2+MT+E1+MA) #")

Executing: LM3MA = geomAnd(ma_exists LM3)
	   errorLayer(LM3MA "# INFO: 6 Level Metal (M1+M2+M3+MT+E1+MA) #")

Executing: LM4MA = geomAnd(ma_exists LM4)
	   errorLayer(LM4MA "# INFO: 7 Level Metal (M1+M2+M3+M4+MT+E1+MA) #")

Executing: LM5MA = geomAnd(ma_exists LM5)
	   errorLayer(LM5MA "# INFO: 8 Level Metal (M1+M2+M3+M4+M5+MT+E1+MA) #")

Executing: LM0ML = geomAnd(ml_exists geomAnd(geomAnd(am_empty ma_empty) mz_empty))

Executing: LM1ML = geomAnd(ml_exists LM1)
	   errorLayer(LM1ML "# INFO: 3 Level Metal (M1+MT+ML) #")

Executing: LM2ML = geomAnd(ml_exists LM2)
	   errorLayer(LM2ML "# INFO: 4 Level Metal (M1+M2+MT+ML) #")

Executing: LM3ML = geomAnd(ml_exists LM3)
	   errorLayer(LM3ML "# INFO: 5 Level Metal (M1+M2+M3+MT+ML) #")

Executing: LM4ML = geomAnd(ml_exists LM4)
	   errorLayer(LM4ML "# INFO: 6 Level Metal (M1+M2+M3+M4+MT+ML) #")

Executing: LM5ML = geomAnd(ml_exists LM5)
	   errorLayer(LM5ML "# INFO: 7 Level Metal (M1+M2+M3+M4+M5+MT+ML) #")

Executing: LM0MZ = geomAnd(mz_exists geomAnd(geomAnd(am_empty ma_empty) ml_empty))

Executing: LM5MZ = geomAnd(mz_exists LM5)
	   errorLayer(LM5MZ "# INFO: 7 Level Metal (M1+M2+M3+M4+M5+MT+MZ) #")

Executing: errmultiLM = geomOr(geomAnd(am_exists ma_exists) geomAnd(am_exists ml_exists)...
	   errorLayer(errmultiLM "WARNING: MULTIPLE LAST METAL LEVELS FOUND! (AM or MA or ML or MZ)")

Executing: lv_exists = geomEnclose(bkgnd lv)

Executing: errbeol1 = geomEnclose(bkgnd dv)
	   errorLayer(errbeol1 "GRBEOL1: DV found in C4 design!")

Executing: info_pass = geomAnd(lv_exists dv_exists)
	   errorLayer(info_pass "# WARNING: LV and DV are present in same Design. It is prohibited!")

Executing: errbp3 = geomButtOrOver(bp bb)
	   errorLayer(errbp3 "GRBP3: BP touching BB found!")

Executing: sxcont = geomAndNot(geomAndNot(geomAnd(rx geomAndNot(bp geomButtOrOver(bp bb)...

Executing: rx_pd = geomAnd(rx pd)

Executing: sxcont_tw = geomAndNot(geomAnd(geomOr(sxcont geomAnd(rx pd)) pi) nw)

Executing: ndiff = geomAndNot(rx bp)

Executing: pdiff = geomAnd(rx bp)

Executing: nwcont = geomOverlap(ndiff nw)

Executing: gate = geomAnd(rx pc)

Executing: diff = geomAndNot(rx gate)

Executing: ca_rx = geomAnd(ca rx)

Executing: pc_wire = geomAndNot(pc rx)

Executing: gate_x002 = geomSize(gate 0.02)

Executing: pc_near_gt = geomAnd(pc_wire gate_x002)

Executing: ngate = geomAnd(ndiff gate)

Executing: pgate = geomAnd(geomAnd(pdiff gate) nw)

Executing: tline = geomAndNot(geomOr(tline_am tline_ma tline_ml) ind_filt)

Executing: pc_res = geomButtOrOver(pc op)

Executing: rx_res = geomButtOrOver(rx op)

Executing: crk_tch_grde = geomButtOrOver(crackstop guardedge)

Executing: bf1 = geomOr(geomSize(geomOutside(geomOutside(nw logobnd) bb) 0.14) geomOutsi...

Executing: bf3 = geomOr(bf1 zerovt bfmoat)

Executing: bf4 = geomSize(geomSize(bf3 0.33) -0.33)

Executing: bfgen = geomSize(geomSize(bf4 -0.14) 0.14)

Executing: bpgen = geomAndNot(geomOr(bp as bp2nd geomAndNot(bb rn)) logobnd)

Executing: bp_pcf = geomButtOrOver(bp pcfuse)

Executing: zvt_x072 = geomSize(geomAndNot(zerovt logobnd) 0.72)

Executing: bh1 = geomAndNot(geomOr(as nw dg bb mosvar tg geomSize(bp_pcf -0.14)) logobnd)

Executing: bh2 = geomOr(bh1 zvt_x072)

Executing: pc_under_op = geomAnd(pc op)

Executing: phhole0 = geomAndNot(geomAndNot(geomAnd(pc op) rx) logobnd)

Executing: phhole1 = geomSize(phhole0 0.16)

Executing: pcr_ext0 = geomGetEdge(phhole0 inside pc)

Executing: pcr_ext = geomSize(geomStretch(pcr_ext0 0.16) 0.58)

Executing: bh3 = geomOr(phhole1 pcr_ext)

Executing: bh3b1_g = geomAnd(bh3 rx)

Executing: bh3_c = geomGetEdge(bh3 coincident bh3b1_g)

Executing: bh3_d = geomSize(bh3_c -0.42)

Executing: bh3_e = geomAndNot(bh3 bh3_d)

Executing: bh4 = geomAndNot(bh3_e rx)

Executing: bh5 = geomOr(bh2 bh4)

Executing: bhgen = geomSize(geomSize(bh5 0.21) -0.21)

Executing: dbn = geomOutside(geomAndNot(bp geomOr(logobnd rr rp)) bb)

Executing: bngen = geomOr(dbn pd)

Executing: zvt_072 = geomSize(zerovt 0.72)

Executing: degen = geomOr(geomSize(zerovt 0.72) geomAndNot(dg nw))

Executing: dfgen = geomAndNot(geomAnd(dg nw) logobnd)

Executing: rn_or_nw = geomOr(rn nw)

Executing: nwgen = geomAndNot(geomOr(nw rn) logobnd)

Executing: ph1 = geomOr(phhole1 dg mosvar tg)

Executing: ph2 = geomAndNot(geomAndNot(nw ph1) logobnd)

Executing: phgen = geomSize(geomSize(ph2 0.215) -0.215)

Executing: offGridWithinCell(allLayers grid pathCenterlines errTextGRS1c (cellName root))

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(am grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: amTxtShp = geomTextShape(amTxt 1.0)
	   errorLayer(amTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(as grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: asTxtShp = geomTextShape(asTxt 1.0)
	   errorLayer(asTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(bb grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: bbTxtShp = geomTextShape(bbTxt 1.0)
	   errorLayer(bbTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(bfmoat grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: bfmoatTxtShp = geomTextShape(bfmoatTxt 1.0)
	   errorLayer(bfmoatTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(bondpad grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: bondpadTxtShp = geomTextShape(bondpadTxt 1.0)
	   errorLayer(bondpadTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(bp grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: bpTxtShp = geomTextShape(bpTxt 1.0)
	   errorLayer(bpTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(bperi grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: bperiTxtShp = geomTextShape(bperiTxt 1.0)
	   errorLayer(bperiTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(bp2nd grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: bp2ndTxtShp = geomTextShape(bp2ndTxt 1.0)
	   errorLayer(bp2ndTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(ca grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: caTxtShp = geomTextShape(caTxt 1.0)
	   errorLayer(caTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(cabar grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: cabarTxtShp = geomTextShape(cabarTxt 1.0)
	   errorLayer(cabarTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(cap grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: capTxtShp = geomTextShape(capTxt 1.0)
	   errorLayer(capTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(chipedge grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: chipedgeTxtShp = geomTextShape(chipedgeTxt 1.0)
	   errorLayer(chipedgeTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(tg grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: tgTxtShp = geomTextShape(tgTxt 1.0)
	   errorLayer(tgTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(dg grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: dgTxtShp = geomTextShape(dgTxt 1.0)
	   errorLayer(dgTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(dv grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: dvTxtShp = geomTextShape(dvTxt 1.0)
	   errorLayer(dvTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(e1 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: e1TxtShp = geomTextShape(e1Txt 1.0)
	   errorLayer(e1TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(e2 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: e2TxtShp = geomTextShape(e2Txt 1.0)
	   errorLayer(e2TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(ft grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: ftTxtShp = geomTextShape(ftTxt 1.0)
	   errorLayer(ftTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(ftbar grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: ftbarTxtShp = geomTextShape(ftbarTxt 1.0)
	   errorLayer(ftbarTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(ht grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: htTxtShp = geomTextShape(htTxt 1.0)
	   errorLayer(htTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(ind_filt grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: ind_filtTxtShp = geomTextShape(ind_filtTxt 1.0)
	   errorLayer(ind_filtTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(k1 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: k1TxtShp = geomTextShape(k1Txt 1.0)
	   errorLayer(k1TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(logobnd grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: logobndTxtShp = geomTextShape(logobndTxt 1.0)
	   errorLayer(logobndTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(lv grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: lvTxtShp = geomTextShape(lvTxt 1.0)
	   errorLayer(lvTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(lvdummy grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: lvdummyTxtShp = geomTextShape(lvdummyTxt 1.0)
	   errorLayer(lvdummyTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(m1 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: m1TxtShp = geomTextShape(m1Txt 1.0)
	   errorLayer(m1TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(m2 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: m2TxtShp = geomTextShape(m2Txt 1.0)
	   errorLayer(m2TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(m3 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: m3TxtShp = geomTextShape(m3Txt 1.0)
	   errorLayer(m3TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(m4 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: m4TxtShp = geomTextShape(m4Txt 1.0)
	   errorLayer(m4TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(m5 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: m5TxtShp = geomTextShape(m5Txt 1.0)
	   errorLayer(m5TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(ma grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: maTxtShp = geomTextShape(maTxt 1.0)
	   errorLayer(maTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(ml grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: mlTxtShp = geomTextShape(mlTxt 1.0)
	   errorLayer(mlTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(mosvar grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: mosvarTxtShp = geomTextShape(mosvarTxt 1.0)
	   errorLayer(mosvarTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(mt grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: mtTxtShp = geomTextShape(mtTxt 1.0)
	   errorLayer(mtTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(ns grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: nsTxtShp = geomTextShape(nsTxt 1.0)
	   errorLayer(nsTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(nw grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: nwTxtShp = geomTextShape(nwTxt 1.0)
	   errorLayer(nwTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(nwasp grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: nwaspTxtShp = geomTextShape(nwaspTxt 1.0)
	   errorLayer(nwaspTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(op grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: opTxtShp = geomTextShape(opTxt 1.0)
	   errorLayer(opTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(pi grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: piTxtShp = geomTextShape(piTxt 1.0)
	   errorLayer(piTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(pc grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: pcTxtShp = geomTextShape(pcTxt 1.0)
	   errorLayer(pcTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(pcfuse grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: pcfuseTxtShp = geomTextShape(pcfuseTxt 1.0)
	   errorLayer(pcfuseTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(pcing grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: pcingTxtShp = geomTextShape(pcingTxt 1.0)
	   errorLayer(pcingTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(pd grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: pdTxtShp = geomTextShape(pdTxt 1.0)
	   errorLayer(pdTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(qt grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: qtTxtShp = geomTextShape(qtTxt 1.0)
	   errorLayer(qtTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(rn grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: rnTxtShp = geomTextShape(rnTxt 1.0)
	   errorLayer(rnTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(rp grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: rpTxtShp = geomTextShape(rpTxt 1.0)
	   errorLayer(rpTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(rr grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: rrTxtShp = geomTextShape(rrTxt 1.0)
	   errorLayer(rrTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(rx grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: rxTxtShp = geomTextShape(rxTxt 1.0)
	   errorLayer(rxTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(rx5v grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: rx5vTxtShp = geomTextShape(rx5vTxt 1.0)
	   errorLayer(rx5vTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(tline_am grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: tline_amTxtShp = geomTextShape(tline_amTxt 1.0)
	   errorLayer(tline_amTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(tline_ma grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: tline_maTxtShp = geomTextShape(tline_maTxt 1.0)
	   errorLayer(tline_maTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(tline_ml grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: tline_mlTxtShp = geomTextShape(tline_mlTxt 1.0)
	   errorLayer(tline_mlTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(v1 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: v1TxtShp = geomTextShape(v1Txt 1.0)
	   errorLayer(v1TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(v1bar grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: v1barTxtShp = geomTextShape(v1barTxt 1.0)
	   errorLayer(v1barTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(v2 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: v2TxtShp = geomTextShape(v2Txt 1.0)
	   errorLayer(v2TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(v2bar grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: v2barTxtShp = geomTextShape(v2barTxt 1.0)
	   errorLayer(v2barTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(v3 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: v3TxtShp = geomTextShape(v3Txt 1.0)
	   errorLayer(v3TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(v3bar grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: v3barTxtShp = geomTextShape(v3barTxt 1.0)
	   errorLayer(v3barTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(v4 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: v4TxtShp = geomTextShape(v4Txt 1.0)
	   errorLayer(v4TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(v4bar grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: v4barTxtShp = geomTextShape(v4barTxt 1.0)
	   errorLayer(v4barTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(v5 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: v5TxtShp = geomTextShape(v5Txt 1.0)
	   errorLayer(v5TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(v5bar grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: v5barTxtShp = geomTextShape(v5barTxt 1.0)
	   errorLayer(v5barTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(zerovt grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: zerovtTxtShp = geomTextShape(zerovtTxt 1.0)
	   errorLayer(zerovtTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(jc grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: jcTxtShp = geomTextShape(jcTxt 1.0)
	   errorLayer(jcTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(jd grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: jdTxtShp = geomTextShape(jdTxt 1.0)
	   errorLayer(jdTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(mz grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: mzTxtShp = geomTextShape(mzTxt 1.0)
	   errorLayer(mzTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(tv grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: tvTxtShp = geomTextShape(tvTxt 1.0)
	   errorLayer(tvTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(di grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: diTxtShp = geomTextShape(diTxt 1.0)
	   errorLayer(diTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(esd_cdm grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: esd_cdmTxtShp = geomTextShape(esd_cdmTxt 1.0)
	   errorLayer(esd_cdmTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(esdummy grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: esdummyTxtShp = geomTextShape(esdummyTxt 1.0)
	   errorLayer(esdummyTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(wvr grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: wvrTxtShp = geomTextShape(wvrTxt 1.0)
	   errorLayer(wvrTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(fivevonly grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: fivevonlyTxtShp = geomTextShape(fivevonlyTxt 1.0)
	   errorLayer(fivevonlyTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(scgate grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: scgateTxtShp = geomTextShape(scgateTxt 1.0)
	   errorLayer(scgateTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(schky grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: schkyTxtShp = geomTextShape(schkyTxt 1.0)
	   errorLayer(schkyTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(bipolar grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: bipolarTxtShp = geomTextShape(bipolarTxt 1.0)
	   errorLayer(bipolarTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(ds_match grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: ds_matchTxtShp = geomTextShape(ds_matchTxt 1.0)
	   errorLayer(ds_matchTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(rf_modfill grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: rf_modfillTxtShp = geomTextShape(rf_modfillTxt 1.0)
	   errorLayer(rf_modfillTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(vtsens grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: vtsensTxtShp = geomTextShape(vtsensTxt 1.0)
	   errorLayer(vtsensTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(wellasp grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: wellaspTxtShp = geomTextShape(wellaspTxt 1.0)
	   errorLayer(wellaspTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(dgv grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: dgvTxtShp = geomTextShape(dgvTxt 1.0)
	   errorLayer(dgvTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(dipi grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: dipiTxtShp = geomTextShape(dipiTxt 1.0)
	   errorLayer(dipiTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(grlogic grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: grlogicTxtShp = geomTextShape(grlogicTxt 1.0)
	   errorLayer(grlogicTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(fltgate grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: fltgateTxtShp = geomTextShape(fltgateTxt 1.0)
	   errorLayer(fltgateTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(sblk grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: sblkTxtShp = geomTextShape(sblkTxt 1.0)
	   errorLayer(sblkTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(vncapm1 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: vncapm1TxtShp = geomTextShape(vncapm1Txt 1.0)
	   errorLayer(vncapm1TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(vncapm2 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: vncapm2TxtShp = geomTextShape(vncapm2Txt 1.0)
	   errorLayer(vncapm2TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(vncapm3 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: vncapm3TxtShp = geomTextShape(vncapm3Txt 1.0)
	   errorLayer(vncapm3TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(vncapm4 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: vncapm4TxtShp = geomTextShape(vncapm4Txt 1.0)
	   errorLayer(vncapm4TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(vncapm5 grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: vncapm5TxtShp = geomTextShape(vncapm5Txt 1.0)
	   errorLayer(vncapm5TxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(vncapmt grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: vncapmtTxtShp = geomTextShape(vncapmtTxt 1.0)
	   errorLayer(vncapmtTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(mimhk grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: mimhkTxtShp = geomTextShape(mimhkTxt 1.0)
	   errorLayer(mimhkTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(mimhd grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: mimhdTxtShp = geomTextShape(mimhdTxt 1.0)
	   errorLayer(mimhdTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(reshv grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: reshvTxtShp = geomTextShape(reshvTxt 1.0)
	   errorLayer(reshvTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(e1_coil grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: e1_coilTxtShp = geomTextShape(e1_coilTxt 1.0)
	   errorLayer(e1_coilTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(mt_coil grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: mt_coilTxtShp = geomTextShape(mt_coilTxt 1.0)
	   errorLayer(mt_coilTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(m5_coil grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: m5_coilTxtShp = geomTextShape(m5_coilTxt 1.0)
	   errorLayer(m5_coilTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(m4_coil grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: m4_coilTxtShp = geomTextShape(m4_coilTxt 1.0)
	   errorLayer(m4_coilTxtShp errTextGRS10)

Executing: self_lvl = geomAnd(eval(level))

Executing: offGrid(m3_coil grid raw errTextGRS1a)

Executing: offGrid(self_lvl grid errTextGRS1b)

Executing: errs2_int = geomGetCorner(eval(level) (keep < 90))
	   errorLayer(errs2_int errTextGRS2a)

Executing: errs2_ext = geomGetCorner(eval(level) (keep > 270))
	   errorLayer(errs2_ext errTextGRS2b)

Executing: errs6a = geomGetAngledEdge(eval(level) ((0 < keep) < 45) mode4)

Executing: errs6b = geomGetAngledEdge(eval(level) ((45 < keep) < 90) mode4)

Executing: errorLayer(geomOr(errs6a errs6b) errTextGRS6)

Executing: m3_coilTxtShp = geomTextShape(m3_coilTxt 1.0)
	   errorLayer(m3_coilTxtShp errTextGRS10)

Executing: bbox_chipedge = geomGetBBox(chipedge)

Executing: offGrid(bbox_chipedge (2 * grid) "GRCE001: CHIPEDGE not on a 0.02 GRID found!")

Executing: chipMpwCrk = geomOr(chipedge mpw_edge crackstop)

Executing: bbox_chip = geomGetBBox(geomOr(chipedge mpw_edge crackstop))

Executing: offGrid(bbox_chip (2 * grid) "GRCE001b: Union(CHIPEDGE,MPW_EDGE,CRACKSTOP) no...

Executing: phhole1_nw = geomAnd(phhole1 nw)

Executing: phhole_encl = geomAndNot(geomHoles(phhole1_nw) phhole1_nw)

Executing: drc(phhole_encl (area < 0.537) "GRPHHOLE7: (PHHOLE1 over NW) enclosed area >=...

Executing: errphhole8 = geomButtOrOver(pgate phhole1)
	   errorLayer(errphhole8 "GRPHHOLE8: ((PC over RX) over NW) touching PHHOLE1 found!")

Executing: drc(pgate phhole1 ((0 < sep) < 0.36) "GRPHHOLE8: ((PC over RX) over NW) to PH...

Executing: err_rl01 = geomButtOrOver(js bkgnd)
	   errorLayer(err_rl01 "GRRL01: (JS touching DATA_EXTENT) not allowed!")

Executing: err_rl03 = geomButtOrOver(m1exclud_rl03 bkgnd)
	   errorLayer(err_rl03 "GRRL03: (M1EXCLUD touching DATA_EXTENT) not allowed!")

Executing: vppcapm1 = geomOr(vncapm1)

Executing: vppcapm2 = geomOr(vncapm2)

Executing: vppcapm3 = geomOr(vncapm3)

Executing: vppcapm4 = geomOr(vncapm4)

Executing: vppcapm5 = geomOr(vncapm5)

Executing: vppcapmt = geomOr(vncapmt)

Executing: m1_over_vppcapm1 = geomAnd(m1 vppcapm1)

Executing: m2_over_vppcapm2 = geomAnd(m2 vppcapm2)

Executing: m3_over_vppcapm3 = geomAnd(m3 vppcapm3)

Executing: m4_over_vppcapm4 = geomAnd(m4 vppcapm4)

Executing: m5_over_vppcapm5 = geomAnd(m5 vppcapm5)

Executing: mt_over_vppcapmt = geomAnd(mt vppcapmt)

Executing: v1_over_vppcapm1 = geomAnd(v1 vppcapm1)

Executing: v2_over_vppcapm2 = geomAnd(v2 vppcapm2)

Executing: v3_over_vppcapm3 = geomAnd(v3 vppcapm3)

Executing: v4_over_vppcapm4 = geomAnd(v4 vppcapm4)

Executing: v5_over_vppcapm5 = geomAnd(v5 vppcapm5)

Executing: ft_over_vppcapmt = geomAnd(ft vppcapmt)

Executing: ca_via = geomAnd(ca_all m1)

Executing: v1_via = geomAnd(v1_all m1)

Executing: ndnw_via = geomAnd(ndiff nw)

Executing: ndbb_via = geomAnd(ndiff bb)

Executing: ndns_via = geomAnd(ndiff ns)

Executing: v1_vncap = geomAnd(v1_over_vppcapm1 m1)

Executing: v2_vncap = geomAnd(v2_over_vppcapm2 m2)

Executing: v3_vncap = geomAnd(v3_over_vppcapm3 m3)

Executing: v4_vncap = geomAnd(v4_over_vppcapm4 m4)

Executing: v5_vncap = geomAnd(v5_over_vppcapm5 m5)

Executing: vt_vncap = geomAnd(ft_over_vppcapmt mt)

Executing: qt_hk = geomButtOrOver(qt geomOr(mimhk mimhd))

Executing: ft_qt_hk = geomAnd(ft qt_hk)

Executing: via_ft_qt_hk = geomAnd(qt_hk ft_qt_hk)

Executing: ht_hd = geomButtOrOver(ht mimhd)

Executing: ft_ht_hd = geomAnd(ft ht_hd)

Executing: via_ft_ht_hd = geomAnd(ht_hd ft_ht_hd)

Executing: bb_not_nw = geomAndNot(bb nw)

Executing: rxnp_junction_cp265b = geomAndNot(geomAndNot(ndiff nw) pd)

Executing: via_pi_and_nw_tw18 = geomAnd(pi nw)

Executing: geomConnect((via ndnw_via ndiff nw) (via ndbb_via ndiff bb) (via ndns_via ndi...

Executing: lastmetal = geomOr(am ma ml mz)

Executing: diceChannel = geomAndNot(mpw_edge chipedge)

Executing: dvpad = geomAndNot(dv geomOr(diceChannel crackstop))

Executing: lvpad = geomAndNot(lv geomOr(diceChannel crackstop))

Executing: tvpad = geomAndNot(tv geomOr(diceChannel crackstop))

Executing: iopad = geomOr(dvpad lvpad tvpad)

Executing: chipring = geomAndNot(chipedge geomSize(chipedge -15.0))

Executing: am_ring = geomOverlap(am chipring)

Executing: bp_ring = geomOverlap(bp chipring)

Executing: cab_ring = geomOverlap(cabar chipring)

Executing: e1_ring = geomOverlap(e1 chipring)

Executing: e2_ring = geomOverlap(e2 chipring)

Executing: ftb_ring = geomOverlap(ftbar chipring)

Executing: ft_ring = geomOverlap(ft chipring)

Executing: m1_ring = geomOverlap(m1 chipring)

Executing: m2_ring = geomOverlap(m2 chipring)

Executing: m3_ring = geomOverlap(m3 chipring)

Executing: m4_ring = geomOverlap(m4 chipring)

Executing: m5_ring = geomOverlap(m5 chipring)

Executing: ma_ring = geomOverlap(ma chipring)

Executing: ml_ring = geomOverlap(ml chipring)

Executing: mt_ring = geomOverlap(mt chipring)

Executing: mz_ring = geomOverlap(mz chipring)

Executing: rx_ring = geomOverlap(rx chipring)

Executing: v1b_ring = geomOverlap(v1bar chipring)

Executing: v2b_ring = geomOverlap(v2bar chipring)

Executing: v3b_ring = geomOverlap(v3bar chipring)

Executing: v4b_ring = geomOverlap(v4bar chipring)

Executing: v5b_ring = geomOverlap(v5bar chipring)

Executing: cab_not_ring = geomAndNot(cabar cab_ring)

Executing: e1_not_ring = geomAndNot(e1 e1_ring)

Executing: e2_not_ring = geomAndNot(e2 e2_ring)

Executing: ftb_not_ring = geomAndNot(ftbar ftb_ring)

Executing: m1_not_ring = geomAndNot(m1 m1_ring)

Executing: mt_not_ring = geomAndNot(mt mt_ring)

Executing: mz_not_ring = geomAndNot(mz mz_ring)

Executing: rx_not_ring = geomAndNot(rx rx_ring)

Executing: v1b_not_ring = geomAndNot(v1bar v1b_ring)

Executing: v2b_not_ring = geomAndNot(v2bar v2b_ring)

Executing: v3b_not_ring = geomAndNot(v3bar v3b_ring)

Executing: v4b_not_ring = geomAndNot(v4bar v4b_ring)

Executing: v5b_not_ring = geomAndNot(v5bar v5b_ring)

Executing: rx_ring_45 = geomGetAngledEdge(rx_ring (keep == 45))

Executing: rx_ring_90 = geomAndNot(rx_ring rx_ring_45)

Executing: bp_ring_45 = geomGetAngledEdge(bp_ring (keep == 45))

Executing: bp_ring_90 = geomAndNot(bp_ring bp_ring_45)

Executing: e1_ring_45 = geomGetAngledEdge(e1_ring (keep == 45))

Executing: e1_ring_90 = geomAndNot(e1_ring e1_ring_45)

Executing: m1_ring_45 = geomGetAngledEdge(m1_ring (keep == 45))

Executing: m1_ring_90 = geomAndNot(m1_ring m1_ring_45)

Executing: m2_ring_45 = geomGetAngledEdge(m2_ring (keep == 45))

Executing: m2_ring_90 = geomAndNot(m2_ring m2_ring_45)

Executing: m3_ring_45 = geomGetAngledEdge(m3_ring (keep == 45))

Executing: m3_ring_90 = geomAndNot(m3_ring m3_ring_45)

Executing: m4_ring_45 = geomGetAngledEdge(m4_ring (keep == 45))

Executing: m4_ring_90 = geomAndNot(m4_ring m4_ring_45)

Executing: m5_ring_45 = geomGetAngledEdge(m5_ring (keep == 45))

Executing: m5_ring_90 = geomAndNot(m5_ring m5_ring_45)

Executing: mt_ring_45 = geomGetAngledEdge(mt_ring (keep == 45))

Executing: mt_ring_90 = geomAndNot(mt_ring mt_ring_45)

Executing: am_ring_45 = geomGetAngledEdge(am_ring (keep == 45))

Executing: am_ring_90 = geomAndNot(am_ring am_ring_45)

Executing: ml_ring_45 = geomGetAngledEdge(ml_ring (keep == 45))

Executing: ml_ring_90 = geomAndNot(ml_ring ml_ring_45)

Executing: mz_ring_45 = geomGetAngledEdge(mz_ring (keep == 45))

Executing: mz_ring_90 = geomAndNot(mz_ring mz_ring_45)

Executing: ma_ring_45 = geomGetAngledEdge(ma_ring (keep == 45))

Executing: ma_ring_90 = geomAndNot(ma_ring ma_ring_45)

Executing: cab_ring_45 = geomAnd(geomSize(geomGetNon90(cab_ring) -4) cab_ring)

Executing: cab_ring_90 = geomAndNot(cab_ring cab_ring_45)

Executing: v1b_ring_45 = geomAnd(geomSize(geomGetNon90(v1b_ring) -4) v1b_ring)

Executing: v1b_ring_90 = geomAndNot(v1b_ring v1b_ring_45)

Executing: v2b_ring_45 = geomAnd(geomSize(geomGetNon90(v2b_ring) -4) v2b_ring)

Executing: v2b_ring_90 = geomAndNot(v2b_ring v2b_ring_45)

Executing: v3b_ring_45 = geomAnd(geomSize(geomGetNon90(v3b_ring) -4) v3b_ring)

Executing: v3b_ring_90 = geomAndNot(v3b_ring v3b_ring_45)

Executing: v4b_ring_45 = geomAnd(geomSize(geomGetNon90(v4b_ring) -4) v4b_ring)

Executing: v4b_ring_90 = geomAndNot(v4b_ring v4b_ring_45)

Executing: v5b_ring_45 = geomAnd(geomSize(geomGetNon90(v5b_ring) -4) v5b_ring)

Executing: v5b_ring_90 = geomAndNot(v5b_ring v5b_ring_45)

Executing: e2_ring_45 = geomGetAngledEdge(e2_ring (keep == 45))

Executing: e2_ring_90 = geomAndNot(e2_ring e2_ring_45)

Executing: chipedge_45 = geomGetAngledEdge(chipedge (keep == 45))

Executing: chipedge_90 = geomAndNot(chipedge chipedge_45)

Executing: drc(rx_ring_45 (width < (1.08 - tolLeg)) withCornerTouch "GRLEG_990a: RX(chip...

Executing: drc(rx_ring_90 (width < 1.08) withCornerTouch "GRLEG_990a: RX(chipring) width...

Executing: drc(bp_ring_45 (width < (1.52 - tolLeg)) withCornerTouch "GRLEG_990b: BP(chip...

Executing: drc(bp_ring_90 (width < 1.52) withCornerTouch "GRLEG_990b: BP(chipring) width...

Executing: errorLayer(geomButtOrOver(bp_ring bb) "GRLEG_990c: BP(chipring) touching BB found!")

Executing: drc(m1_ring_45 (width < (1.08 - tolLeg)) withCornerTouch "GRLEG_990f: M1(chip...

Executing: drc(m1_ring_90 (width < 1.08) withCornerTouch "GRLEG_990f: M1(chipring) width...

Executing: drc(m2_ring_45 (width < (1.08 - tolLeg)) withCornerTouch "GRLEG_990f: M2(chip...

Executing: drc(m2_ring_90 (width < 1.08) withCornerTouch "GRLEG_990f: M2(chipring) width...

Executing: drc(m3_ring_45 (width < (1.08 - tolLeg)) withCornerTouch "GRLEG_990f: M3(chip...

Executing: drc(m3_ring_90 (width < 1.08) withCornerTouch "GRLEG_990f: M3(chipring) width...

Executing: drc(m4_ring_45 (width < (1.08 - tolLeg)) withCornerTouch "GRLEG_990f: M4(chip...

Executing: drc(m4_ring_90 (width < 1.08) withCornerTouch "GRLEG_990f: M4(chipring) width...

Executing: drc(m5_ring_45 (width < (1.08 - tolLeg)) withCornerTouch "GRLEG_990f: M5(chip...

Executing: drc(m5_ring_90 (width < 1.08) withCornerTouch "GRLEG_990f: M5(chipring) width...

Executing: drc(mt_ring_45 (width < (3.24 - tolLeg)) withCornerTouch "GRLEG_990g: MT(chip...

Executing: drc(mt_ring_90 (width < 3.24) withCornerTouch "GRLEG_990g: MT(chipring) width...

Executing: drc(e2_ring_45 (width < (2.0 - tolLeg)) withCornerTouch "GRLEG_990h: E2(chipr...

Executing: drc(e2_ring_90 (width < 2.0) withCornerTouch "GRLEG_990h: E2(chipring) width ...

Executing: drc(e1_ring_45 (width < (3.24 - tolLeg)) withCornerTouch "GRLEG_990i: E1(chip...

Executing: drc(e1_ring_90 (width < 3.24) withCornerTouch "GRLEG_990i: E1(chipring) width...

Executing: drc(am_ring_45 (width < (1.96 - tolLeg)) withCornerTouch "GRLEG_990k: AM(chip...

Executing: drc(am_ring_90 (width < 2.0) withCornerTouch "GRLEG_990k: AM(chipring) width ...

Executing: drc(ma_ring_45 (width < (1.96 - tolLeg)) withCornerTouch "GRLEG_990k: MA(chip...

Executing: drc(ma_ring_90 (width < 2.0) withCornerTouch "GRLEG_990k: MA(chipring) width ...

Executing: drc(ml_ring_45 (width < (2.36 - tolLeg)) withCornerTouch "GRLEG_990k: ML(chip...

Executing: drc(ml_ring_90 (width < 2.4) withCornerTouch "GRLEG_990k: ML(chipring) width ...

Executing: drc(mz_ring_45 (width < (1.96 - tolLeg)) withCornerTouch "GRLEG_990k: MZ(chip...

Executing: drc(mz_ring_90 (width < 2.0) withCornerTouch "GRLEG_990k: MZ(chipring) width ...

Executing: err990d_45_gt = geomWidth(cab_ring_45 (keep > 0.24))
	   errorLayer(err990d_45_gt "GRLEG_990d: CABAR(chipring) width == 0.20 um.(45 edge,error >)")

Executing: err990d_90_gt = geomWidth(cab_ring_90 (keep > 0.2))
	   errorLayer(err990d_90_gt "GRLEG_990d: CABAR(chipring) width == 0.20 um.(90 edge,error >)")

Executing: drc(cab_ring_45 (width < (0.2 - tolLeg)) parallel "GRLEG_990d: CABAR(chipring...

Executing: drc(cab_ring_90 (width < 0.2) parallel "GRLEG_990d: CABAR(chipring) width == ...

Executing: err990e_45_gt = geomWidth(layer_45 (keep > (0.28 + value_tol)))
	   errorLayer(err990e_45_gt errTxtGR990e_45_gt)

Executing: err990e_90_gt = geomWidth(layer_90 (keep > 0.28))
	   errorLayer(err990e_90_gt errTxtGR990e_90_gt)

Executing: drc(layer_45 (width < (0.28 - value_tol)) opposite parallel errTxtGR990e_45_lt)

Executing: drc(layer_90 (width < (0.28 - value_tol)) opposite parallel errTxtGR990e_90_lt)

Executing: err990e_45_gt = geomWidth(layer_45 (keep > (0.28 + value_tol)))
	   errorLayer(err990e_45_gt errTxtGR990e_45_gt)

Executing: err990e_90_gt = geomWidth(layer_90 (keep > 0.28))
	   errorLayer(err990e_90_gt errTxtGR990e_90_gt)

Executing: drc(layer_45 (width < (0.28 - value_tol)) opposite parallel errTxtGR990e_45_lt)

Executing: drc(layer_90 (width < (0.28 - value_tol)) opposite parallel errTxtGR990e_90_lt)

Executing: err990e_45_gt = geomWidth(layer_45 (keep > (0.28 + value_tol)))
	   errorLayer(err990e_45_gt errTxtGR990e_45_gt)

Executing: err990e_90_gt = geomWidth(layer_90 (keep > 0.28))
	   errorLayer(err990e_90_gt errTxtGR990e_90_gt)

Executing: drc(layer_45 (width < (0.28 - value_tol)) opposite parallel errTxtGR990e_45_lt)

Executing: drc(layer_90 (width < (0.28 - value_tol)) opposite parallel errTxtGR990e_90_lt)

Executing: err990e_45_gt = geomWidth(layer_45 (keep > (0.28 + value_tol)))
	   errorLayer(err990e_45_gt errTxtGR990e_45_gt)

Executing: err990e_90_gt = geomWidth(layer_90 (keep > 0.28))
	   errorLayer(err990e_90_gt errTxtGR990e_90_gt)

Executing: drc(layer_45 (width < (0.28 - value_tol)) opposite parallel errTxtGR990e_45_lt)

Executing: drc(layer_90 (width < (0.28 - value_tol)) opposite parallel errTxtGR990e_90_lt)

Executing: err990e_45_gt = geomWidth(layer_45 (keep > (0.28 + value_tol)))
	   errorLayer(err990e_45_gt errTxtGR990e_45_gt)

Executing: err990e_90_gt = geomWidth(layer_90 (keep > 0.28))
	   errorLayer(err990e_90_gt errTxtGR990e_90_gt)

Executing: drc(layer_45 (width < (0.28 - value_tol)) opposite parallel errTxtGR990e_45_lt)

Executing: drc(layer_90 (width < (0.28 - value_tol)) opposite parallel errTxtGR990e_90_lt)

Executing: ftb_ring_45 = geomAnd(geomSize(geomGetNon90(ftb_ring) -4) ftb_ring)

Executing: ftb_ring_90 = geomAndNot(ftb_ring ftb_ring_45)

Executing: err990j_45_gt = geomWidth(ftb_ring_45 (keep > 1.28))
	   errorLayer(err990j_45_gt "GRLEG_990j: FTBAR(chipring) width == 1.24 um.(45 edge,error >)")

Executing: err990j_90_gt = geomWidth(ftb_ring_90 (keep > 1.24))
	   errorLayer(err990j_90_gt "GRLEG_990j: FTBAR(chipring) width == 1.24 um.(90 edge,error >)")

Executing: drc(ftb_ring_45 (width < (1.24 - tolLeg)) parallel "GRLEG_990j: FTBAR(chiprin...

Executing: drc(ftb_ring_90 (width < 1.24) parallel "GRLEG_990j: FTBAR(chipring) width ==...

Executing: err991 = geomAndNot(rx_ring bp_ring)
	   errorLayer(err991 "GRLEG_991: RX not within BP(chipring) found!")

Executing: drc(bp_ring_90 rx_ring_90 (enc < 0.22) "GRLEG_991: RX must be within BP(chipr...

Executing: drc(bp_ring_45 rx_ring_45 (enc < 0.18) "GRLEG_991: RX must be within BP(chipr...

Executing: err992 = geomAndNot(cab_ring rx_ring)
	   errorLayer(err992 "GRLEG_992: CABAR not within RX(chipring) found!")

Executing: drc(rx_ring_90 cab_ring_90 (enc < 0.44) "GRLEG_992: CABAR must be within RX(c...

Executing: drc(rx_ring_45 cab_ring_45 (enc < 0.4) "GRLEG_992: CABAR must be within RX(ch...

Executing: err993 = geomAndNot(cab_ring m1_ring)
	   errorLayer(err993 "GRLEG_993: CABAR not within M1(chipring) found!")

Executing: drc(m1_ring_90 cab_ring_90 (enc < 0.44) "GRLEG_993: CABAR must be within M1(c...

Executing: drc(m1_ring_45 cab_ring_45 (enc < 0.4) "GRLEG_993: CABAR must be within M1(ch...

Executing: err994a = geomAndNot(v1b_ring m1_ring)
	   errorLayer(err994a "GRLEG_994a: V1BAR not within M1(chipring) found!")

Executing: drc(m1_ring_90 v1b_ring_90 (enc < 0.4) "GRLEG_994a: V1BAR must be within M1(c...

Executing: drc(m1_ring_45 v1b_ring_45 (enc < 0.36) "GRLEG_994a: V1BAR must be within M1(...

Executing: err994b = geomAndNot(v2b_ring m2_ring)
	   errorLayer(err994b "GRLEG_994b: V2BAR not within M2(chipring) found!")

Executing: drc(m2_ring_90 v2b_ring_90 (enc < 0.4) "GRLEG_994b: V2BAR must be within M2(c...

Executing: drc(m2_ring_45 v2b_ring_45 (enc < 0.36) "GRLEG_994b: V2BAR must be within M2(...

Executing: err994c = geomAndNot(v3b_ring m3_ring)
	   errorLayer(err994c "GRLEG_994c: V3BAR not within M3(chipring) found!")

Executing: drc(m3_ring_90 v3b_ring_90 (enc < 0.4) "GRLEG_994c: V3BAR must be within M3(c...

Executing: drc(m3_ring_45 v3b_ring_45 (enc < 0.36) "GRLEG_994c: V3BAR must be within M3(...

Executing: err994d = geomAndNot(v4b_ring m4_ring)
	   errorLayer(err994d "GRLEG_994d: V4BAR not within M4(chipring) found!")

Executing: drc(m4_ring_90 v4b_ring_90 (enc < 0.4) "GRLEG_994d: V4BAR must be within M4(c...

Executing: drc(m4_ring_45 v4b_ring_45 (enc < 0.36) "GRLEG_994d: V4BAR must be within M4(...

Executing: err994d1 = geomAndNot(v5b_ring m5_ring)
	   errorLayer(err994d1 "GRLEG_994d1: V5BAR not within M5(chipring) found!")

Executing: drc(m5_ring_90 v5b_ring_90 (enc < 0.4) "GRLEG_994d1: V5BAR must be within M5(...

Executing: drc(m5_ring_45 v5b_ring_45 (enc < 0.36) "GRLEG_994d1: V5BAR must be within M5...

Executing: err994e = geomAndNot(ftb_ring mt_ring)
	   errorLayer(err994e "GRLEG_994e: FTBAR not within MT(chipring) found!")

Executing: drc(mt_ring_90 ftb_ring_90 (enc < 1.0) "GRLEG_994e: FTBAR must be within MT(c...

Executing: drc(mt_ring_45 ftb_ring_45 (enc < 0.96) "GRLEG_994e: FTBAR must be within MT(...

Executing: err994f_am = geomAnd(geomAndNot(ftb_ring am_ring) LM0AM)
	   errorLayer(err994f_am "GRLEG_994f: FTBAR not within AM(chipring) found!")

Executing: drc(am_ring_90 ftb_ring_90 (enc < 1.0) "GRLEG_994f: FTBAR must be within AM(c...

Executing: drc(am_ring_45 ftb_ring_45 (enc < 0.96) "GRLEG_994f: FTBAR must be within AM(...

Executing: err994f_e1 = geomAnd(geomAndNot(ftb_ring e1_ring) LM0MA)
	   errorLayer(err994f_e1 "GRLEG_994f: FTBAR not within E1(chipring) found!")

Executing: drc(e1_ring_90 ftb_ring_90 (enc < 1.0) "GRLEG_994f: FTBAR must be within E1(c...

Executing: drc(e1_ring_45 ftb_ring_45 (enc < 0.96) "GRLEG_994f: FTBAR must be within E1(...

Executing: err994f_ml = geomAnd(geomAndNot(ftb_ring ml_ring) LM0ML)
	   errorLayer(err994f_ml "GRLEG_994f: FTBAR not within ML(chipring) found!")

Executing: drc(ml_ring_90 ftb_ring_90 (enc < 0.6) "GRLEG_994f: FTBAR must be within ML(c...

Executing: drc(ml_ring_45 ftb_ring_45 (enc < 0.56) "GRLEG_994f: FTBAR must be within ML(...

Executing: err994f_mz = geomAnd(geomAndNot(ftb_ring mz_ring) LM0MZ)
	   errorLayer(err994f_mz "GRLEG_994f: FTBAR not within MZ(chipring) found!")

Executing: drc(mz_ring_90 ftb_ring_90 (enc < 1.0) "GRLEG_994f: FTBAR must be within MZ(c...

Executing: drc(mz_ring_45 ftb_ring_45 (enc < 0.96) "GRLEG_994f: FTBAR must be within MZ(...

Executing: m2lm2_5 = geomAnd(m2_ring LM2_5)

Executing: m2lm2m5_45 = geomGetAngledEdge(m2lm2_5 (keep == 45))

Executing: m2lm2m5_90 = geomAndNot(m2lm2_5 m2lm2m5_45)

Executing: err995a = geomAnd(geomAndNot(v1b_ring m2_ring) LM2_5)
	   errorLayer(err995a "GRLEG_995a: V1BAR not within M2(chipring) found!")

Executing: drc(m2lm2m5_90 v1b_ring_90 (enc < 0.4) "GRLEG_995a: V1BAR must be within M2(c...

Executing: drc(m2lm2m5_45 v1b_ring_45 (enc < 0.36) "GRLEG_995a: V1BAR must be within M2(...

Executing: mtring_4lm = geomAnd(mt_ring LM1)

Executing: mtlm4_45 = geomGetAngledEdge(mtring_4lm (keep == 45))

Executing: mtlm4_90 = geomAndNot(mtring_4lm mtlm4_45)

Executing: err996b = geomAnd(geomAndNot(v1b_ring mt_ring) LM1)
	   errorLayer(err996b "GRLEG_995b: V1BAR not within MT(chipring) found!")

Executing: drc(mtlm4_90 v1b_ring_90 (enc < 0.4) "GRLEG_995b: V1BAR must be within MT(chi...

Executing: drc(mtlm4_45 v1b_ring_45 (enc < 0.36) "GRLEG_995b: V1BAR must be within MT(ch...

Executing: m3lm3 = geomAnd(m3_ring LM3_5)

Executing: m3lm3_45 = geomGetAngledEdge(m3lm3 (keep == 45))

Executing: m3lm3_90 = geomAndNot(m3lm3 m3lm3_45)

Executing: err996a = geomAnd(geomAndNot(v2b_ring m3_ring) LM3_5)
	   errorLayer(err996a "GRLEG_996a: V2BAR not within M3(chipring) found!")

Executing: drc(m3lm3_90 v2b_ring_90 (enc < 0.4) "GRLEG_996a: V2BAR must be within M3(chi...

Executing: drc(m3lm3_45 v2b_ring_45 (enc < 0.36) "GRLEG_996a: V2BAR must be within M3(ch...

Executing: mtring_2lm = geomAnd(mt_ring LM2)

Executing: mtlm2_45 = geomGetAngledEdge(mtring_2lm (keep == 45))

Executing: mtlm2_90 = geomAndNot(mtring_2lm mtlm2_45)

Executing: err996b = geomAnd(geomAndNot(v2b_ring mt_ring) LM2)
	   errorLayer(err996b "GRLEG_996b: V2BAR not within MT(chipring) found!")

Executing: drc(mtlm2_45 v2b_ring_45 (enc < 0.36) "GRLEG_996b: V2BAR must be within M3(ch...

Executing: drc(mtlm2_90 v2b_ring_90 (enc < 0.4) "GRLEG_996b: V2BAR must be within M3(chi...

Executing: m4lm4 = geomAnd(m4_ring LM4_5)

Executing: m4lm4_45 = geomGetAngledEdge(m4lm4 (keep == 45))

Executing: m4lm4_90 = geomAndNot(m4lm4 m4lm4_45)

Executing: err996c = geomAnd(geomAndNot(v3b_ring m4_ring) LM4_5)
	   errorLayer(err996c "GRLEG_996c: V3BAR not within M4(chipring) found!")

Executing: drc(m4lm4_90 v3b_ring_90 (enc < 0.4) "GRLEG_996c: V3BAR must be within M4(chi...

Executing: drc(m4lm4_45 v3b_ring_45 (enc < 0.36) "GRLEG_996c: V3BAR must be within M4(ch...

Executing: mtring_6lm = geomAnd(mt_ring LM3)

Executing: mtlm6_45 = geomGetAngledEdge(mtring_6lm (keep == 45))

Executing: mtlm6_90 = geomAndNot(mtring_6lm mtlm6_45)

Executing: err996d = geomAnd(geomAndNot(v3b_ring mt_ring) LM3)
	   errorLayer(err996d "GRLEG_996d: V3BAR not within MT(chipring) found!")

Executing: drc(mtlm6_90 v3b_ring_90 (enc < 0.4) "GRLEG_996d: V4BAR must be within MT(chi...

Executing: drc(mtlm6_45 v3b_ring_45 (enc < 0.36) "GRLEG_996d: V4BAR must be within MT(ch...

Executing: mtring_7lm = geomAnd(mt_ring LM4)

Executing: mtlm7_45 = geomGetAngledEdge(mtring_7lm (keep == 45))

Executing: mtlm7_90 = geomAndNot(mtring_7lm mtlm7_45)

Executing: err996e = geomAnd(geomAndNot(v4b_ring mt_ring) LM4)
	   errorLayer(err996e "GRLEG_996e: V4BAR not within MT(chipring) found!")

Executing: drc(mtlm7_90 v4b_ring_90 (enc < 0.4) "GRLEG_996e: V4BAR must be within MT(chi...

Executing: drc(mtlm7_45 v4b_ring_45 (enc < 0.36) "GRLEG_996e: V4BAR must be within MT(ch...

Executing: m5lm5 = geomAnd(m5_ring LM5)

Executing: m5lm5_45 = geomGetAngledEdge(m5lm5 (keep == 45))

Executing: m5lm5_90 = geomAndNot(m5lm5 m5lm5_45)

Executing: err996f = geomAnd(geomAndNot(v4b_ring m5_ring) LM5)
	   errorLayer(err996f "GRLEG_996f: V4BAR not within M5(chipring) found!")

Executing: drc(m5lm5_45 v4b_ring_45 (enc < 0.36) "GRLEG_996f: V5BAR must be within M5(ch...

Executing: drc(m5lm5_90 v4b_ring_90 (enc < 0.4) "GRLEG_996f: V5BAR must be within M5(chi...

Executing: mtlm5 = geomAnd(mt_ring LM5)

Executing: mtlm5_45 = geomGetAngledEdge(mtlm5 (keep == 45))

Executing: mtlm5_90 = geomAndNot(mtlm5 mtlm5_45)

Executing: err996g = geomAnd(geomAndNot(v5b_ring mt_ring) LM5)
	   errorLayer(err996g "GRLEG_996g: V5BAR not within MT(chipring) found!")

Executing: drc(mtlm5_90 v5b_ring_90 (enc < 0.4) "GRLEG_996g: V5BAR must be within MT(chi...

Executing: drc(mtlm5_45 v5b_ring_45 (enc < 0.36) "GRLEG_996g: V5BAR must be within MT(ch...

Executing: err996h = geomAndNot(e2_ring e1_ring)
	   errorLayer(err996h "GRLEG_996h: E2 not within E1(chipring) found!")

Executing: drc(e1_ring_90 e2_ring_90 (enc < 0.6) "GRLEG_996h: E2 must be within E1(chipr...

Executing: drc(e1_ring_45 e2_ring_45 (enc < 0.56) "GRLEG_996h: E2 must be within E1(chip...

Executing: err996j = geomAndNot(e2_ring ma_ring)
	   errorLayer(err996j "GRLEG_996j: E2 not within MA(chipring) found!")

Executing: drc(ma_ring_90 e2_ring_90 (enc < 1.76) "GRLEG_996j: E2 must be within MA(chip...

Executing: drc(ma_ring_45 e2_ring_45 (enc < 1.72) "GRLEG_996j: E2 must be within MA(chip...

Executing: chipedge_90_size = geomSize(chipedge_90 -11.06)

Executing: err999rx_90 = geomAvoiding(geomAndNot(geomSize(rx_ring_90 0.01) geomSize(chip...
	   errorLayer(err999rx_90 "GRLEG_999: RX(chipring) must be within CHIPEDGE == 11.06 um. (error >)")

Executing: err999rx_45 = geomAvoiding(geomAndNot(geomSize(rx_ring_45 0.01) geomSize(chip...
	   errorLayer(err999rx_45 "GRLEG_999: RX(chipring) must be within CHIPEDGE == 11.06 um. (error >)")

Executing: err999m1_90 = geomAvoiding(geomAndNot(geomSize(m1_ring_90 0.01) geomSize(chip...
	   errorLayer(err999m1_90 "GRLEG_999: M1(chipring) must be within CHIPEDGE == 11.06 um. (error >)")

Executing: err999m1_45 = geomAvoiding(geomAndNot(geomSize(m1_ring_45 0.01) geomSize(chip...
	   errorLayer(err999m1_45 "GRLEG_999: M1(chipring) must be within CHIPEDGE == 11.06 um. (error >)")

Executing: err999m2_90 = geomAnd(geomAvoiding(geomAndNot(geomSize(m2_ring_90 0.01) geomS...
	   errorLayer(err999m2_90 "GRLEG_999: M2(chipring) must be within CHIPEDGE == 11.06 um. (error >)")

Executing: err999m2_45 = geomAnd(geomAvoiding(geomAndNot(geomSize(m2_ring_45 0.01) geomS...
	   errorLayer(err999m2_45 "GRLEG_999: M2(chipring) must be within CHIPEDGE == 11.06 um. (error >)")

Executing: err999m3_90 = geomAnd(geomAvoiding(geomAndNot(geomSize(m3_ring_90 0.01) geomS...
	   errorLayer(err999m3_90 "GRLEG_999: M3(chipring) must be within CHIPEDGE == 11.06 um. (error >)")

Executing: err999m3_45 = geomAnd(geomAvoiding(geomAndNot(geomSize(m3_ring_45 0.01) geomS...
	   errorLayer(err999m3_45 "GRLEG_999: M3(chipring) must be within CHIPEDGE == 11.06 um. (error >)")

Executing: err999m4_90 = geomAnd(geomAvoiding(geomAndNot(geomSize(m4_ring_90 0.01) geomS...
	   errorLayer(err999m4_90 "GRLEG_999: M4(chipring) must be within CHIPEDGE == 11.06 um. (error >)")

Executing: err999m4_45 = geomAnd(geomAvoiding(geomAndNot(geomSize(m4_ring_45 0.01) geomS...
	   errorLayer(err999m4_45 "GRLEG_999: M4(chipring) must be within CHIPEDGE == 11.06 um. (error >)")

Executing: err999m5_90 = geomAnd(geomAvoiding(geomAndNot(geomSize(m5_ring_90 0.01) geomS...
	   errorLayer(err999m5_90 "GRLEG_999: M5(chipring) must be within CHIPEDGE == 11.06 um. (error >)")

Executing: err999m5_45 = geomAnd(geomAvoiding(geomAndNot(geomSize(m5_ring_45 0.01) geomS...
	   errorLayer(err999m5_45 "GRLEG_999: M5(chipring) must be within CHIPEDGE == 11.06 um. (error >)")

Executing: drc(chipedge_45 rx (enc < (11.06 - tolLeg)) "GRLEG_999: RX(chipring) must be ...

Executing: drc(chipedge_90 rx (enc < 11.06) "GRLEG_999: RX(chipring) must be within CHIP...

Executing: drc(chipedge_45 m1 (enc < (11.06 - tolLeg)) "GRLEG_999: M1(chipring) must be ...

Executing: drc(chipedge_90 m1 (enc < 11.06) "GRLEG_999: M1(chipring) must be within CHIP...

Executing: drc(chipedge_45 m2 (enc < (11.06 - tolLeg)) "GRLEG_999: M2(chipring) must be ...

Executing: drc(chipedge_90 m2 (enc < 11.06) "GRLEG_999: M2(chipring) must be within CHIP...

Executing: drc(chipedge_45 m3 (enc < (11.06 - tolLeg)) "GRLEG_999: M3(chipring) must be ...

Executing: drc(chipedge_90 m3 (enc < 11.06) "GRLEG_999: M3(chipring) must be within CHIP...

Executing: drc(chipedge_45 m4 (enc < (11.06 - tolLeg)) "GRLEG_999: M4(chipring) must be ...

Executing: drc(chipedge_90 m4 (enc < 11.06) "GRLEG_999: M4(chipring) must be within CHIP...

Executing: drc(chipedge_45 m5 (enc < (11.06 - tolLeg)) "GRLEG_999: M5(chipring) must be ...

Executing: drc(chipedge_90 m5 (enc < 11.06) "GRLEG_999: M5(chipring) must be within CHIP...

Executing: chipedge_bdy = geomGetBBox(chipedge (0 < length) (0 < width))

Executing: chipedge_but = geomCoincident(chipedge_ref chipedge_bdy)

Executing: chipedge_not = geomAndNot(chipedge_rby chipedge_but)

Executing: err999ay = drc(chipedge_not (0.0084 < area))

Executing: err999ay_bis = geomButtOrOver(chipedge geomGrow(geomAnd(geomGrow(chipedge_bdy...
	   errorLayer(err999ay_bis "GRLEG_999a: CHIPEDGE is not bounded at X=0 on the left or not bounded at Y=0 on the bottom")

Executing: chipedge_erx = geomGrow(chipedge_bdy -9380 0)
	   errorLayer(chipedge_erx "ERROR: CHIPEDGE maximum x dimension (mm) = 18.76 mm ")

Executing: chipedge_ery = geomGrow(geomGrow(chipedge_bdy 0 -10000) 0 -380)
	   errorLayer(chipedge_ery "ERROR: CHIPEDGE maximum y dimension (mm) = 20.76 mm ")

Executing: chipedge_45_size = geomSize(chipedge_45 -11.02)

Executing: chipedge_45_size_x928 = geomSize(chipedge_45 -9.24)

Executing: chipedge_90_size_x928 = geomSize(chipedge_90 -9.28)

Executing: chipedge_exists = geomEnclose(bkgnd chipedge)

Executing: err999a_op_90 = geomAnd(geomOr(geomOutside(op chipedge) geomAnd(op chipedge_9...

Executing: err999a_op_45 = geomAnd(geomOr(geomOutside(op chipedge) geomAnd(op chipedge_4...

Executing: errorLayer(geomOr(err999a_op_90 err999a_op_45) "GRLEG_999a: OP must be within CHIPEDGE >= 11.06 um")

Executing: err999a_pi_90 = geomAnd(geomOr(geomOutside(pi chipedge) geomAnd(pi chipedge_9...

Executing: err999a_pi_45 = geomAnd(geomOr(geomOutside(pi chipedge) geomAnd(pi chipedge_4...

Executing: errorLayer(geomOr(err999a_pi_90 err999a_pi_45) "GRLEG_999a: PI must be within CHIPEDGE >= 11.06 um")

Executing: err999a_nw_90 = geomAnd(geomOr(geomOutside(nw chipedge) geomAnd(nw chipedge_9...

Executing: err999a_nw_45 = geomAnd(geomOr(geomOutside(nw chipedge) geomAnd(nw chipedge_4...

Executing: errorLayer(geomOr(err999a_nw_90 err999a_nw_45) "GRLEG_999a: NW must be within CHIPEDGE >= 11.06 um")

Executing: err999a_ns_90 = geomAnd(geomOr(geomOutside(ns chipedge) geomAnd(ns chipedge_9...

Executing: err999a_ns_45 = geomAnd(geomOr(geomOutside(ns chipedge) geomAnd(ns chipedge_4...

Executing: errorLayer(geomOr(err999a_ns_90 err999a_ns_45) "GRLEG_999a: NS must be within CHIPEDGE >= 11.06 um")

Executing: err999a_pc_90 = geomAnd(geomOr(geomOutside(pc chipedge) geomAnd(pc chipedge_9...

Executing: err999a_pc_45 = geomAnd(geomOr(geomOutside(pc chipedge) geomAnd(pc chipedge_4...

Executing: errorLayer(geomOr(err999a_pc_90 err999a_pc_45) "GRLEG_999a: PC must be within CHIPEDGE >= 11.06 um")

Executing: err999a_rx_90 = geomAnd(geomOr(geomOutside(rx chipedge) geomAnd(rx chipedge_9...

Executing: err999a_rx_45 = geomAnd(geomOr(geomOutside(rx chipedge) geomAnd(rx chipedge_4...

Executing: errorLayer(geomOr(err999a_rx_90 err999a_rx_45) "GRLEG_999a: RX must be within CHIPEDGE >= 11.06 um")

Executing: err999a_ca_90 = geomAnd(geomOr(geomOutside(ca chipedge) geomAnd(ca chipedge_9...

Executing: err999a_ca_45 = geomAnd(geomOr(geomOutside(ca chipedge) geomAnd(ca chipedge_4...

Executing: errorLayer(geomOr(err999a_ca_90 err999a_ca_45) "GRLEG_999a: CA must be within CHIPEDGE >= 11.06 um")

Executing: err999a_cabar_90 = geomAnd(geomOr(geomOutside(cabar chipedge) geomAnd(cabar c...

Executing: err999a_cabar_45 = geomAnd(geomOr(geomOutside(cabar chipedge) geomAnd(cabar c...

Executing: errorLayer(geomOr(err999a_cabar_90 err999a_cabar_45) "GRLEG_999a: CABAR must be within CHIPEDGE >= 11.06 um")

Executing: err999a_rn_90 = geomAnd(geomOr(geomOutside(rn chipedge) geomAnd(rn chipedge_9...

Executing: err999a_rn_45 = geomAnd(geomOr(geomOutside(rn chipedge) geomAnd(rn chipedge_4...

Executing: errorLayer(geomOr(err999a_rn_90 err999a_rn_45) "GRLEG_999a: RN must be within CHIPEDGE >= 11.06 um")

Executing: err999a_pr_90 = geomAnd(geomOr(geomOutside(pr chipedge) geomAnd(pr chipedge_9...

Executing: err999a_pr_45 = geomAnd(geomOr(geomOutside(pr chipedge) geomAnd(pr chipedge_4...

Executing: errorLayer(geomOr(err999a_pr_90 err999a_pr_45) "GRLEG_999a: PR must be within CHIPEDGE >= 11.06 um")

Executing: err999a_nr_90 = geomAnd(geomOr(geomOutside(nr chipedge) geomAnd(nr chipedge_9...

Executing: err999a_nr_45 = geomAnd(geomOr(geomOutside(nr chipedge) geomAnd(nr chipedge_4...

Executing: errorLayer(geomOr(err999a_nr_90 err999a_nr_45) "GRLEG_999a: NR must be within CHIPEDGE >= 11.06 um")

Executing: err999a_bb_90 = geomAnd(geomOr(geomOutside(bb chipedge) geomAnd(bb chipedge_9...

Executing: err999a_bb_45 = geomAnd(geomOr(geomOutside(bb chipedge) geomAnd(bb chipedge_4...

Executing: errorLayer(geomOr(err999a_bb_90 err999a_bb_45) "GRLEG_999a: BB must be within CHIPEDGE >= 11.06 um")

Executing: err999a_jd_90 = geomAnd(geomOr(geomOutside(jd chipedge) geomAnd(jd chipedge_9...

Executing: err999a_jd_45 = geomAnd(geomOr(geomOutside(jd chipedge) geomAnd(jd chipedge_4...

Executing: errorLayer(geomOr(err999a_jd_90 err999a_jd_45) "GRLEG_999a: JD must be within CHIPEDGE >= 11.06 um")

Executing: err999a_rr_90 = geomAnd(geomOr(geomOutside(rr chipedge) geomAnd(rr chipedge_9...

Executing: err999a_rr_45 = geomAnd(geomOr(geomOutside(rr chipedge) geomAnd(rr chipedge_4...

Executing: errorLayer(geomOr(err999a_rr_90 err999a_rr_45) "GRLEG_999a: RR must be within CHIPEDGE >= 11.06 um")

Executing: err999a_rp_90 = geomAnd(geomOr(geomOutside(rp chipedge) geomAnd(rp chipedge_9...

Executing: err999a_rp_45 = geomAnd(geomOr(geomOutside(rp chipedge) geomAnd(rp chipedge_4...

Executing: errorLayer(geomOr(err999a_rp_90 err999a_rp_45) "GRLEG_999a: RP must be within CHIPEDGE >= 11.06 um")

Executing: err999a_dg_90 = geomAnd(geomOr(geomOutside(dg chipedge) geomAnd(dg chipedge_9...

Executing: err999a_dg_45 = geomAnd(geomOr(geomOutside(dg chipedge) geomAnd(dg chipedge_4...

Executing: errorLayer(geomOr(err999a_dg_90 err999a_dg_45) "GRLEG_999a: DG must be within CHIPEDGE >= 11.06 um")

Executing: err999a_tg_90 = geomAnd(geomOr(geomOutside(tg chipedge) geomAnd(tg chipedge_9...

Executing: err999a_tg_45 = geomAnd(geomOr(geomOutside(tg chipedge) geomAnd(tg chipedge_4...

Executing: errorLayer(geomOr(err999a_tg_90 err999a_tg_45) "GRLEG_999a: TG must be within CHIPEDGE >= 11.06 um")

Executing: err999a_m1_90 = geomAnd(geomOr(geomOutside(m1 chipedge) geomAnd(m1 chipedge_9...

Executing: err999a_m1_45 = geomAnd(geomOr(geomOutside(m1 chipedge) geomAnd(m1 chipedge_4...

Executing: errorLayer(geomOr(err999a_m1_90 err999a_m1_45) "GRLEG_999a: M1 must be within CHIPEDGE >= 11.06 um")

Executing: err999a_k1_90 = geomAnd(geomOr(geomOutside(k1 chipedge) geomAnd(k1 chipedge_9...

Executing: err999a_k1_45 = geomAnd(geomOr(geomOutside(k1 chipedge) geomAnd(k1 chipedge_4...

Executing: errorLayer(geomOr(err999a_k1_90 err999a_k1_45) "GRLEG_999a: K1 must be within CHIPEDGE >= 11.06 um")

Executing: err999a_v1_90 = geomAnd(geomOr(geomOutside(v1 chipedge) geomAnd(v1 chipedge_9...

Executing: err999a_v1_45 = geomAnd(geomOr(geomOutside(v1 chipedge) geomAnd(v1 chipedge_4...

Executing: errorLayer(geomOr(err999a_v1_90 err999a_v1_45) "GRLEG_999a: V1 must be within CHIPEDGE >= 11.06 um")

Executing: err999a_v1bar_90 = geomAnd(geomOr(geomOutside(v1bar chipedge) geomAnd(v1bar c...

Executing: err999a_v1bar_45 = geomAnd(geomOr(geomOutside(v1bar chipedge) geomAnd(v1bar c...

Executing: errorLayer(geomOr(err999a_v1bar_90 err999a_v1bar_45) "GRLEG_999a: V1BAR must be within CHIPEDGE >= 11.06 um")

Executing: err999a_m2_90 = geomAnd(geomOr(geomOutside(m2 chipedge) geomAnd(m2 chipedge_9...

Executing: err999a_m2_45 = geomAnd(geomOr(geomOutside(m2 chipedge) geomAnd(m2 chipedge_4...

Executing: errorLayer(geomOr(err999a_m2_90 err999a_m2_45) "GRLEG_999a: M2 must be within CHIPEDGE >= 11.06 um")

Executing: err999a_v2_90 = geomAnd(geomOr(geomOutside(v2 chipedge) geomAnd(v2 chipedge_9...

Executing: err999a_v2_45 = geomAnd(geomOr(geomOutside(v2 chipedge) geomAnd(v2 chipedge_4...

Executing: errorLayer(geomOr(err999a_v2_90 err999a_v2_45) "GRLEG_999a: V2 must be within CHIPEDGE >= 11.06 um")

Executing: err999a_v2bar_90 = geomAnd(geomOr(geomOutside(v2bar chipedge) geomAnd(v2bar c...

Executing: err999a_v2bar_45 = geomAnd(geomOr(geomOutside(v2bar chipedge) geomAnd(v2bar c...

Executing: errorLayer(geomOr(err999a_v2bar_90 err999a_v2bar_45) "GRLEG_999a: V2BAR must be within CHIPEDGE >= 11.06 um")

Executing: err999a_m3_90 = geomAnd(geomOr(geomOutside(m3 chipedge) geomAnd(m3 chipedge_9...

Executing: err999a_m3_45 = geomAnd(geomOr(geomOutside(m3 chipedge) geomAnd(m3 chipedge_4...

Executing: errorLayer(geomOr(err999a_m3_90 err999a_m3_45) "GRLEG_999a: M3 must be within CHIPEDGE >= 11.06 um")

Executing: err999a_v3_90 = geomAnd(geomOr(geomOutside(v3 chipedge) geomAnd(v3 chipedge_9...

Executing: err999a_v3_45 = geomAnd(geomOr(geomOutside(v3 chipedge) geomAnd(v3 chipedge_4...

Executing: errorLayer(geomOr(err999a_v3_90 err999a_v3_45) "GRLEG_999a: V3 must be within CHIPEDGE >= 11.06 um")

Executing: err999a_v3bar_90 = geomAnd(geomOr(geomOutside(v3bar chipedge) geomAnd(v3bar c...

Executing: err999a_v3bar_45 = geomAnd(geomOr(geomOutside(v3bar chipedge) geomAnd(v3bar c...

Executing: errorLayer(geomOr(err999a_v3bar_90 err999a_v3bar_45) "GRLEG_999a: V3BAR must be within CHIPEDGE >= 11.06 um")

Executing: err999a_m4_90 = geomAnd(geomOr(geomOutside(m4 chipedge) geomAnd(m4 chipedge_9...

Executing: err999a_m4_45 = geomAnd(geomOr(geomOutside(m4 chipedge) geomAnd(m4 chipedge_4...

Executing: errorLayer(geomOr(err999a_m4_90 err999a_m4_45) "GRLEG_999a: M4 must be within CHIPEDGE >= 11.06 um")

Executing: err999a_v4_90 = geomAnd(geomOr(geomOutside(v4 chipedge) geomAnd(v4 chipedge_9...

Executing: err999a_v4_45 = geomAnd(geomOr(geomOutside(v4 chipedge) geomAnd(v4 chipedge_4...

Executing: errorLayer(geomOr(err999a_v4_90 err999a_v4_45) "GRLEG_999a: V4 must be within CHIPEDGE >= 11.06 um")

Executing: err999a_v4bar_90 = geomAnd(geomOr(geomOutside(v4bar chipedge) geomAnd(v4bar c...

Executing: err999a_v4bar_45 = geomAnd(geomOr(geomOutside(v4bar chipedge) geomAnd(v4bar c...

Executing: errorLayer(geomOr(err999a_v4bar_90 err999a_v4bar_45) "GRLEG_999a: V4BAR must be within CHIPEDGE >= 11.06 um")

Executing: err999a_m5_90 = geomAnd(geomOr(geomOutside(m5 chipedge) geomAnd(m5 chipedge_9...

Executing: err999a_m5_45 = geomAnd(geomOr(geomOutside(m5 chipedge) geomAnd(m5 chipedge_4...

Executing: errorLayer(geomOr(err999a_m5_90 err999a_m5_45) "GRLEG_999a: M5 must be within CHIPEDGE >= 11.06 um")

Executing: err999a_v5_90 = geomAnd(geomOr(geomOutside(v5 chipedge) geomAnd(v5 chipedge_9...

Executing: err999a_v5_45 = geomAnd(geomOr(geomOutside(v5 chipedge) geomAnd(v5 chipedge_4...

Executing: errorLayer(geomOr(err999a_v5_90 err999a_v5_45) "GRLEG_999a: V5 must be within CHIPEDGE >= 11.06 um")

Executing: err999a_v5bar_90 = geomAnd(geomOr(geomOutside(v5bar chipedge) geomAnd(v5bar c...

Executing: err999a_v5bar_45 = geomAnd(geomOr(geomOutside(v5bar chipedge) geomAnd(v5bar c...

Executing: errorLayer(geomOr(err999a_v5bar_90 err999a_v5bar_45) "GRLEG_999a: V5BAR must be within CHIPEDGE >= 11.06 um")

Executing: err999a_qt_90 = geomAnd(geomOr(geomOutside(qt chipedge) geomAnd(qt chipedge_9...

Executing: err999a_qt_45 = geomAnd(geomOr(geomOutside(qt chipedge) geomAnd(qt chipedge_4...

Executing: errorLayer(geomOr(err999a_qt_90 err999a_qt_45) "GRLEG_999a: QT must be within CHIPEDGE >= 11.06 um")

Executing: err999a_ht_90 = geomAnd(geomOr(geomOutside(ht chipedge) geomAnd(ht chipedge_9...

Executing: err999a_ht_45 = geomAnd(geomOr(geomOutside(ht chipedge) geomAnd(ht chipedge_4...

Executing: errorLayer(geomOr(err999a_ht_90 err999a_ht_45) "GRLEG_999a: HT must be within CHIPEDGE >= 11.06 um")

Executing: err999a_ft_90 = geomAnd(geomOr(geomOutside(ft chipedge) geomAnd(ft chipedge_9...

Executing: err999a_ft_45 = geomAnd(geomOr(geomOutside(ft chipedge) geomAnd(ft chipedge_4...

Executing: errorLayer(geomOr(err999a_ft_90 err999a_ft_45) "GRLEG_999a: FT must be within CHIPEDGE >= 11.06 um")

Executing: err999a_ftbar_90 = geomAnd(geomOr(geomOutside(ftbar chipedge) geomAnd(ftbar c...

Executing: err999a_ftbar_45 = geomAnd(geomOr(geomOutside(ftbar chipedge) geomAnd(ftbar c...

Executing: errorLayer(geomOr(err999a_ftbar_90 err999a_ftbar_45) "GRLEG_999a: FTBAR must be within CHIPEDGE >= 11.06 um")

Executing: err999a_e2_90 = geomAnd(geomOr(geomOutside(e2 chipedge) geomAnd(e2 chipedge_9...

Executing: err999a_e2_45 = geomAnd(geomOr(geomOutside(e2 chipedge) geomAnd(e2 chipedge_4...

Executing: errorLayer(geomOr(err999a_e2_90 err999a_e2_45) "GRLEG_999a: E2 must be within CHIPEDGE >= 11.06 um")

Executing: err999a_dv_90 = geomAnd(geomOr(geomOutside(dv chipedge) geomAnd(dv chipedge_9...

Executing: err999a_dv_45 = geomAnd(geomOr(geomOutside(dv chipedge) geomAnd(dv chipedge_4...

Executing: errorLayer(geomOr(err999a_dv_90 err999a_dv_45) "GRLEG_999a: DV must be within CHIPEDGE >= 11.06 um")

Executing: err999a_lv_90 = geomAnd(geomOr(geomOutside(lv chipedge) geomAnd(lv chipedge_9...

Executing: err999a_lv_45 = geomAnd(geomOr(geomOutside(lv chipedge) geomAnd(lv chipedge_4...

Executing: errorLayer(geomOr(err999a_lv_90 err999a_lv_45) "GRLEG_999a: LV must be within CHIPEDGE >= 11.06 um")

Executing: err999a_tv_90 = geomAnd(geomOr(geomOutside(tv chipedge) geomAnd(tv chipedge_9...

Executing: err999a_tv_45 = geomAnd(geomOr(geomOutside(tv chipedge) geomAnd(tv chipedge_4...

Executing: errorLayer(geomOr(err999a_tv_90 err999a_tv_45) "GRLEG_999a: TV must be within CHIPEDGE >= 11.06 um")

Executing: err999a_js_90 = geomAnd(geomOr(geomOutside(js chipedge) geomAnd(js chipedge_9...

Executing: err999a_js_45 = geomAnd(geomOr(geomOutside(js chipedge) geomAnd(js chipedge_4...

Executing: errorLayer(geomOr(err999a_js_90 err999a_js_45) "GRLEG_999a: JS must be within CHIPEDGE >= 11.06 um")

Executing: err999a_degen_90 = geomAnd(geomOr(geomOutside(degen chipedge) geomAnd(degen c...

Executing: err999a_degen_45 = geomAnd(geomOr(geomOutside(degen chipedge) geomAnd(degen c...

Executing: errorLayer(geomOr(err999a_degen_90 err999a_degen_45) "GRLEG_999a: DEGEN must be within CHIPEDGE >= 11.06 um")

Executing: err999a_phgen_90 = geomAnd(geomOr(geomOutside(phgen chipedge) geomAnd(phgen c...

Executing: err999a_phgen_45 = geomAnd(geomOr(geomOutside(phgen chipedge) geomAnd(phgen c...

Executing: errorLayer(geomOr(err999a_phgen_90 err999a_phgen_45) "GRLEG_999a: PHGEN must be within CHIPEDGE >= 11.06 um")

Executing: err999a_dfgen_90 = geomAnd(geomOr(geomOutside(dfgen chipedge) geomAnd(dfgen c...

Executing: err999a_dfgen_45 = geomAnd(geomOr(geomOutside(dfgen chipedge) geomAnd(dfgen c...

Executing: errorLayer(geomOr(err999a_dfgen_90 err999a_dfgen_45) "GRLEG_999a: DFGEN must be within CHIPEDGE >= 11.06 um")

Executing: err999a = geomAnd(geomOutside(geomOr(geomOverlap(bkgnd dv) geomOverlap(bkgnd ...
	   errorLayer(err999a "GRLEG_999a: Background enclosing a pad must contain CHIPEDGE!")

Executing: err999a_bp_90 = geomAnd(geomOr(geomOutside(bp chipedge) geomAnd(bp chipedge_9...

Executing: err999a_bp_45 = geomAnd(geomOr(geomOutside(bp chipedge) geomAnd(bp chipedge_4...

Executing: errorLayer(geomOr(err999a_bp_90 err999a_bp_45) "GRLEG_999b: BP must be within CHIPEDGE >= 9.28 um")

Executing: err999cam_90 = geomAnd(geomAvoiding(geomAndNot(geomSize(am_ring_90 0.01) geom...

Executing: err999cam_45 = geomAnd(geomAvoiding(geomAndNot(geomSize(am_ring_45 0.01) geom...

Executing: err999ce1_90 = geomAnd(geomAvoiding(geomAndNot(geomSize(e1_ring_90 0.01) geom...

Executing: err999ce1_45 = geomAnd(geomAvoiding(geomAndNot(geomSize(e1_ring_45 0.01) geom...

Executing: err999cma_90 = geomAnd(geomAvoiding(geomAndNot(geomSize(ma_ring_90 0.01) geom...

Executing: err999cma_45 = geomAnd(geomAvoiding(geomAndNot(geomSize(ma_ring_45 0.01) geom...

Executing: err999cml_90 = geomAnd(geomAvoiding(geomAndNot(geomSize(ml_ring_90 0.01) geom...

Executing: err999cml_45 = geomAnd(geomAvoiding(geomAndNot(geomSize(ml_ring_45 0.01) geom...

Executing: err999cmz_90 = geomAnd(geomAvoiding(geomAndNot(geomSize(mz_ring_90 0.01) geom...

Executing: err999cmz_45 = geomAnd(geomAvoiding(geomAndNot(geomSize(mz_ring_45 0.01) geom...

Executing: err999cmt_90 = geomAvoiding(geomAndNot(geomSize(mt_ring_90 0.01) geomSize(chi...

Executing: err999cmt_45 = geomAvoiding(geomAndNot(geomSize(mt_ring_45 0.01) geomSize(chi...

Executing: drc(chipedge_45 am (enc < (11.06 - tolLeg)) "GRLEG_999c: AM(ring) must be wit...

Executing: drc(chipedge_90 am (enc < 11.06) "GRLEG_999c: AM(ring) must be within CHIPEDG...

Executing: drc(chipedge_45 e1 (enc < (11.06 - tolLeg)) "GRLEG_999c: E1(ring) must be wit...

Executing: drc(chipedge_90 e1 (enc < 11.06) "GRLEG_999c: E1(ring) must be within CHIPEDG...

Executing: drc(chipedge_45 ma (enc < (11.06 - tolLeg)) "GRLEG_999c: MA(ring) must be wit...

Executing: drc(chipedge_90 ma (enc < 11.06) "GRLEG_999c: MA(ring) must be within CHIPEDG...

Executing: drc(chipedge_45 ml (enc < (11.06 - tolLeg)) "GRLEG_999c: ML(ring) must be wit...

Executing: drc(chipedge_90 ml (enc < 11.06) "GRLEG_999c: ML(ring) must be within CHIPEDG...

Executing: drc(chipedge_45 mt (enc < (11.06 - tolLeg)) "GRLEG_999c: MT(ring) must be wit...

Executing: drc(chipedge_90 mt (enc < 11.06) "GRLEG_999c: MT(ring) must be within CHIPEDG...

Executing: drc(chipedge_45 mz (enc < (11.06 - tolLeg)) "GRLEG_999c: MZ(ring) must be wit...

Executing: drc(chipedge_90 mz (enc < 11.06) "GRLEG_999c: MZ(ring) must be within CHIPEDG...

Executing: errorLayer(geomOr(err999cam_90 err999cam_45) "GRLEG_999c: AM(ring) must be within CHIPEDGE == 11.06 um.(error >)")

Executing: errorLayer(geomOr(err999ce1_90 err999ce1_45) "GRLEG_999c: E1(ring) must be within CHIPEDGE == 11.06 um.(error >)")

Executing: errorLayer(geomOr(err999cma_90 err999cma_45) "GRLEG_999c: MA(ring) must be within CHIPEDGE == 11.06 um.(error >)")

Executing: errorLayer(geomOr(err999cml_90 err999cml_45) "GRLEG_999c: ML(ring) must be within CHIPEDGE == 11.06 um.(error >)")

Executing: errorLayer(geomOr(err999cmt_90 err999cmt_45) "GRLEG_999c: MT(ring) must be within CHIPEDGE == 11.06 um.(error >)")

Executing: errorLayer(geomOr(err999cmz_90 err999cmz_45) "GRLEG_999c: MZ(ring) must be within CHIPEDGE == 11.06 um.(error >)")

Executing: errorLayer(geomAnd(nw chipring) "GRLEG_999e: NW not allowed in chip Chip guardring area!")

Executing: errorLayer(geomAnd(op chipring) "GRLEG_999e: OP not allowed in chip Chip guardring area!")

Executing: errorLayer(geomAnd(pc chipring) "GRLEG_999e: PC not allowed in chip Chip guardring area!")

Executing: errorLayer(geomAnd(di chipring) "GRLEG_999e: DI not allowed in chip Chip guardring area!")

Executing: errorLayer(geomAnd(ns chipring) "GRLEG_999e: NS not allowed in chip Chip guardring area!")

Executing: errorLayer(geomAnd(pi chipring) "GRLEG_999e: PI not allowed in chip Chip guardring area!")

Executing: err999e_bp = geomAndNot(chipring geomOverlap(chipring bp_ring))
	   errorLayer(err999e_bp "GRLEG_999e: BP must be within chipring")

Executing: err999e_cab = geomAndNot(chipring geomOverlap(chipring cab_ring))
	   errorLayer(err999e_cab "GRLEG_999e: CABAR must be within chipring")

Executing: err999e_m1 = geomAndNot(chipring geomOverlap(chipring m1_ring))
	   errorLayer(err999e_m1 "GRLEG_999e: M1 must be within chipring")

Executing: err999e_v1 = geomAndNot(chipring geomOverlap(chipring v1b_ring))
	   errorLayer(err999e_v1 "GRLEG_999e: V1BAR must be within chipring")

Executing: err999e_rx = geomAndNot(chipring geomOverlap(chipring rx_ring))
	   errorLayer(err999e_rx "GRLEG_999e: RX must be within chipring")

Executing: err999e_m2 = geomAnd(geomAndNot(chipring geomOverlap(chipring m2_ring)) m2_ex...
	   errorLayer(err999e_m2 "GRLEG_999e: M2 must be within chipring")

Executing: v2b_exists = geomEnclose(bkgnd v2bar)

Executing: err999e_v2 = geomAnd(geomAndNot(chipring geomOverlap(chipring v2b_ring)) v2b_...
	   errorLayer(err999e_v2 "GRLEG_999e: V2BAR must be within chipring")

Executing: err999e_m3 = geomAnd(geomAndNot(chipring geomOverlap(chipring m3_ring)) m3_ex...
	   errorLayer(err999e_m3 "GRLEG_999e: M3 must be within chipring")

Executing: v3b_exists = geomEnclose(bkgnd v3bar)

Executing: err999e_v3 = geomAnd(geomAndNot(chipring geomOverlap(chipring v3b_ring)) v3b_...
	   errorLayer(err999e_v3 "GRLEG_999e: V3BAR must be within chipring")

Executing: err999e_m4 = geomAnd(geomAndNot(chipring geomOverlap(chipring m4_ring)) m4_ex...
	   errorLayer(err999e_m4 "GRLEG_999e: M4 must be within chipring")

Executing: v4_exists = geomEnclose(bkgnd v4bar)

Executing: err999e_v4 = geomAnd(geomAndNot(chipring geomOverlap(chipring v4b_ring)) v4_e...
	   errorLayer(err999e_v4 "GRLEG_999e: V4BAR must be within chipring")

Executing: err999e_m5 = geomAnd(geomAndNot(chipring geomOverlap(chipring m5_ring)) m5_ex...
	   errorLayer(err999e_m5 "GRLEG_999e: M5 must be within chipring")

Executing: v5b_exists = geomEnclose(bkgnd v5bar)

Executing: err999e_v5 = geomAnd(geomAndNot(chipring geomOverlap(chipring v5b_ring)) v5b_...
	   errorLayer(err999e_v5 "GRLEG_999e: V5BAR must be within chipring")

Executing: mt_exists = geomEnclose(bkgnd mt)

Executing: err999e_mt = geomAnd(geomAndNot(chipring geomOverlap(chipring mt_ring)) mt_ex...
	   errorLayer(err999e_mt "GRLEG_999e: MT must be within chipring")

Executing: ft_exists = geomEnclose(bkgnd ft)

Executing: ftb_exists = geomEnclose(bkgnd ftbar)

Executing: ft_all_exists = geomOr(ft_exists ftb_exists)

Executing: ft_all_ring = geomOr(ft_ring ftb_ring)

Executing: err999e_ft_ftb = geomAnd(geomAndNot(chipring geomOverlap(chipring ft_all_ring...
	   errorLayer(err999e_ft_ftb "GRLEG_999e: FT/FTBAR must be within chipring")

Executing: e1_exists = geomEnclose(bkgnd e1)

Executing: err999e_e1 = geomAnd(geomAndNot(chipring geomOverlap(chipring e1_ring)) e1_ex...
	   errorLayer(err999e_e1 "GRLEG_999e: E1 must be within chipring")

Executing: e2_exists = geomEnclose(bkgnd e2)

Executing: err999e_e2 = geomAnd(geomAndNot(chipring geomOverlap(chipring e2_ring)) e2_ex...
	   errorLayer(err999e_e2 "GRLEG_999e: E2 must be within chipring")

Executing: err999e_ma = geomAnd(geomAndNot(chipring geomOverlap(chipring ma_ring)) ma_ex...
	   errorLayer(err999e_ma "GRLEG_999e: MA must be within chipring")

Executing: err999e_ml = geomAnd(geomAndNot(chipring geomOverlap(chipring ml_ring)) ml_ex...
	   errorLayer(err999e_ml "GRLEG_999e: ML must be within chipring")

Executing: err999e_am = geomAnd(geomAndNot(chipring geomOverlap(chipring am_ring)) am_ex...
	   errorLayer(err999e_am "GRLEG_999e: AM must be within chipring")

Executing: err999e_mz = geomAnd(geomAndNot(chipring geomOverlap(chipring mz_ring)) mz_ex...
	   errorLayer(err999e_mz "GRLEG_999e: MZ must be within chipring")

Executing: err1000_am = geomAnd(geomAndNot(geomOutside(am_ring iopad) geomOr(geomOr(ma_r...
	   errorLayer(err1000_am "GRLEG_1000: GUARDRING IS NOT CONNECTED TO A PAD! (AM)")

Executing: err1000_ma = geomAnd(geomAndNot(geomOutside(ma_ring iopad) geomOr(geomOr(am_r...
	   errorLayer(err1000_ma "GRLEG_1000: GUARDRING IS NOT CONNECTED TO A PAD! (MA)")

Executing: err1000_ml = geomAnd(geomAndNot(geomOutside(ml_ring iopad) geomOr(geomOr(am_r...
	   errorLayer(err1000_ml "GRLEG_1000: GUARDRING IS NOT CONNECTED TO A PAD! (ML)")

Executing: err1000_mz = geomAnd(geomAndNot(geomOutside(mz_ring iopad) geomOr(geomOr(am_r...
	   errorLayer(err1000_mz "GRLEG_1000: GUARDRING IS NOT CONNECTED TO A PAD! (MZ)")

Executing: errleg1001 = geomButtOrOver(bkgnd geomOr(mpw_edge guardedge guardrng))
	   errorLayer(errleg1001 "GRLEG_1001: DATA_EXTENT touching (MPW_EDGE,GUARDEDGE,GUARDRNG) is prohibited")

Executing: drc(ngate (width < 0.18) "GR1: (PC over RX)(NFET) width >= 0.180 um.")

Executing: drc(pgate (width < 0.18) "GR2: (PC over RX)(PFET) width >= 0.180 um.")

Executing: ngate45 = geomGetAngledEdge(ngate (keep == 45))

Executing: drc(ngate45 (width < 0.196) "GR3: (PC over RX)(NFET) width for 45 deg >= 0.19...

Executing: pgate45 = geomGetAngledEdge(pgate (keep == 45))

Executing: drc(pgate45 (width < 0.196) "GR4: (PC over RX)(PFET) width for 45 deg >= 0.19...

Executing: gt_width_fail = drc(pc_near_gt (sep < 0.22))

Executing: err10 = geomAnd(ngate gt_width_fail)
	   errorLayer(err10 "GR10: RX width under PC for NFET device >= 0.220 um.")

Executing: rx_more_50 = geomSize(geomSize(rx -25.0) 25.0)

Executing: drc(rx_more_50 (sep < 2.0) "GR40b: RX space if both RX shapes are wider than ...

Executing: drc(rx_more_50 (notch < 2.0) "GR40b: RX space if both RX shapes are wider tha...

Executing: err11 = geomAnd(pgate gt_width_fail)
	   errorLayer(err11 "GR11: RX width under PC for PFET device >= 0.220 um.")

Executing: err50b = geomWidth(rx (keep > 200))
	   errorLayer(err50b "GR50b: RX width (max) <= 200.000 um.")

Executing: drc(rx (width < 0.22) "GR50: RX width (min) >= 0.220 um.")

Executing: drc(rx (area < 0.16) "GR51: RX area >= 0.160 sq.um.")

Executing: drc(rx (sep < 0.26) "GR52: RX space >= 0.260 um.")

Executing: drc(rx (notch < 0.26) "GR52: RX notch >= 0.260 um.")

Executing: rx_strad_ns = geomStraddle(rx ns)
	   errorLayer(rx_strad_ns "GRCPRX4: RX straddling NS found!")

Executing: drc(ns rx (enc < 0.5) "GRCPRX4: RX within NS >= 0.500 um.")

Executing: nw_asp = geomAnd(nwgen nwasp)

Executing: nw_adp = geomAndNot(nwgen nwasp)

Executing: bf_nw_asp = geomButtOrOver(geomOr(bf bfgen) nw_asp)

Executing: bf_out_nw = geomOutside(geomOr(bf bfgen) nw)

Executing: drc(bf_out_nw nw (sep < 1.14) "GRRX8b: (BF not touching NW) to adjacent NW >=...

Executing: drc(bf_nw_asp nw_asp (sep < 0.7) "GRRX8d: ((BF touch NW) touch NWASP) to adj ...

Executing: pd_enclosure = geomAndNot(geomHoles(pd) pd)

Executing: sbd = geomButtOrOver(ns pd_enclosure)

Executing: errrx23 = geomAndNot(geomAndNot(geomAnd(diff bb) ind_filt) geomOr(pd rn jd sb...
	   errorLayer(errrx23 "GRRX23: (RX(over BB), not over IND_FILT,not over PC) must be covered by {PD,SBD,RN,JD, SCHKY}")

Executing: rx_fet = geomOverlap(rx gate)

Executing: rxfet_edge_in = geomSize(geomGetEdge(rx_fet over bkgnd) -0.02)

Executing: rxfet_halo_in = geomAndNot(rx_fet geomSize(rx_fet -0.02))

Executing: rxfet_corner_in = geomAndNot(rxfet_halo_in rxfet_edge_in)

Executing: drc(pc_not_rx (width < 0.18) "GR100: PC width >= 0.180 um.")

Executing: pc_enclosure = geomAndNot(geomHoles(pc) pc)

Executing: drc(pc (area < 0.203) "GR101a: PC area >= 0.203 sq. um.")

Executing: drc(pc_enclosure (area < 0.291) "GR101b: PC enclosed area >= 0.291 sq. um.")

Executing: pc_end_006 = geomSize(geomLineEnd(pc 0.18 (legs 0.18)) -0.06)

Executing: pc_not_end = geomAndNot(pc pc_end_006)

Executing: pc_notend_notend = geomAndNot(geomAndNot(drc(pc_not_end (sep < 0.24) withSing...
	   errorLayer(pc_notend_notend "GR102a: (PC(NOT END) to PC(NOT END) space) (not over RX) >= 0.240 um.")

Executing: pc_notend_notch = geomAndNot(drc(pc_not_end (notch < 0.24)) pc)
	   errorLayer(pc_notend_notch "GR102a: (PC(NOT END) to PC(NOT END) notch) (not over RX) >= 0.240 um.")

Executing: pc_end_notend = geomAndNot(geomAndNot(drc(pc_end_006 pc_not_end (sep < 0.18) ...

Executing: err_102b_1 = geomButtOrOver(pc_end_notend pc (keep >= 2))
	   errorLayer(err_102b_1 "GR102b: (PCEND to PC space) (not over RX)>= 0.180 um.")

Executing: pc_end_end = geomAndNot(geomAndNot(drc(pc_end_006 (sep < 0.18) withSingularPo...

Executing: err_102b_2 = geomButtOrOver(pc_end_end pc (keep >= 2))
	   errorLayer(err_102b_2 "GR102b: (PCEND to PCEND space) (not over RX) >= 0.180 um.")

Executing: err104a = geomInside(drc(ngate (sep < 0.24)) rx)
	   errorLayer(err104a "GR104a: PC(over RX) space >= 0.240 um.")

Executing: err104b = geomInside(drc(pgate (sep < 0.24)) rx)
	   errorLayer(err104b "GR104b: PC(over RX) space >= 0.240 um.")

Executing: gate_45 = geomGetAngledEdge(gate (keep == 45))

Executing: gate45_edge = geomSize(geomGetEdge(gate_45 over bkgnd) 0.28)

Executing: err110_past = drc(rx pc ((0 < enc) < 0.28) opposite parallel)
	   errorLayer(err110_past "GR110: RX overlap past PC >= 0.280 um.")

Executing: err110_coin = geomGetEdge(rx coincident pc)
	   errorLayer(err110_coin "GR110: RX overlap past PC >= 0.280 um.(coincident)")

Executing: err110_45 = geomAvoiding(geomAndNot(gate45_edge rx) pc_not_rx)
	   errorLayer(err110_45 "GR110: RX overlap past PC >= 0.280 um.(45 deg. gate)")

Executing: err111_past = drc(pc gate ((0 < enc) < 0.24))
	   errorLayer(err111_past "GR111: PC overlap past RX >= 0.240 um.")

Executing: err111_coin = geomGetEdge(pc coincident rx)
	   errorLayer(err111_coin "GR111: PC overlap past RX >= 0.240 um.(coincident)")

Executing: rxfet_crnr_x008 = geomSize(rxfet_corner_in 0.08)

Executing: gt_near_rxcornr = drc(gate rxfet_corner_in (sep < 0.08) figa)

Executing: gtnrxc_edge_x03 = geomSize(geomGetEdge(gt_near_rxcornr coincident rx) 0.3)

Executing: err112 = geomOverlap(geomEnclose(gtnrxc_edge_x03 geomAndNot(gtnrxc_edge_x03 p...
	   errorLayer(err112 "GR112: PC overlap past RX (within 0.08 of RX corner) >= 0.300 um.")

Executing: rxfet_corner_in_114 = geomGrowCorner(geomGetCorner(rx_fet (keep == 270) conca...

Executing: err114 = drc(pc rxfet_corner_in_114 ((0 < sep) < 0.06) opposite)
	   errorLayer(err114 "GR114: PC to RX corner >= 0.060 um.")

Executing: err114_butt = geomButting(pc rxfet_corner_in_114)
	   errorLayer(err114_butt "GR114: PC abutting RX corner found!")

Executing: pc_fet = geomOverlap(pc gate)

Executing: pcfet_corner_in_115 = geomGrowCorner(geomGetCorner(pc_fet (keep == 270) conca...

Executing: err115 = drc(rx pcfet_corner_in_115 ((0 < sep) < 0.08) opposite)
	   errorLayer(err115 "GR115: PC corner to RX >= 0.080 um.")

Executing: err115_butt = geomButting(rx pcfet_corner_in_115)
	   errorLayer(err115_butt "GR115: RX abutting PC corner found!")

Executing: gate_end_in = geomSize(geomGetEdge(gate coincident rx) -0.04)

Executing: gate_edge_in = geomSize(geomGetEdge(pc over rx) -0.005)

Executing: gate_halo_in = geomAndNot(gate geomSize(gate -0.005))

Executing: gate_corner_in = geomOutside(geomAndNot(gate_halo_in gate_edge_in) gate_end_in)

Executing: gate_end_out = geomSize(geomGetEdge(gate coincident rx) 0.04)

Executing: pc_corner_all = geomGetCorner(pc angleAll)

Executing: gate_corner_all = geomButtOrOver(pc_corner_all gate)

Executing: gate_corner_bbox = geomGetBBox(gate_corner_all)

Executing: err119_0 = geomButtOrOver(gate_corner_bbox drc(rx gate_corner_bbox (enc < 0.2...

Executing: err119_1 = geomStraddle(gate_corner_bbox rx)

Executing: err119 = geomButtOrOver(gate_corner_all geomOr(err119_0 err119_1))
	   errorLayer(err119 "GR119: PC Vertex within RX >= 0.280 um.")

Executing: gate_90_all = geomGetCorner(gate angleMulti90)

Executing: gate_over = geomSize(geomGetEdge(rx inside pc) 0.1 edges)

Executing: gate_90_res = geomAvoiding(gate_90_all gate_over)

Executing: err120a_90 = geomOutside(geomButtOrOver(gate gate_90_res) geomOr(dsram sram_h...
	   errorLayer(err120a_90 "GR120a: Non 45 degree PC vertices over RX found!(90 degree)")

Executing: err120a_45 = geomOutside(geomEnclose(gate geomSize(geomGetNon45(gate) -0.02))...
	   errorLayer(err120a_45 "GR120a: Non 45 degree PC vertices over RX found!(non 45)")

Executing: drc(gate_corner_in ((0 < sep) < 0.08) opposite "GR120b: Dist between inside c...

Executing: drc(gate ((0 < notch) < 0.46) parallel "GR120c: (PC over RX) notch >= 0.460 u...

Executing: gate_end = geomOr(gate_end_in gate_end_out)

Executing: err121 = geomButtOrOver(gate_end geomAndNot(gate_end pc))
	   errorLayer(err121 "GR121: PC intersecting RX at other than 90 degrees found!")

Executing: rx_fet_123a = geomOverlap(geomAndNot(rx geomAvoiding(pc ca)) gate)

Executing: rxfet_edge_in_123a = geomSize(geomGetEdge(rx_fet_123a over bkgnd) -0.03)

Executing: rxfet_halo_in_123a = geomAndNot(rx_fet_123a geomSize(rx_fet_123a -0.02))

Executing: rxfet_corner_in_123a = geomAndNot(rxfet_halo_in_123a rxfet_edge_in_123a)

Executing: rxfet_edge_out_123a = geomSize(geomGetEdge(rx_fet_123a over bkgnd) 0.03)

Executing: rxfet_halo_out_123a = geomAndNot(geomSize(rx_fet_123a 0.02) rx_fet_123a)

Executing: rxfet_corner_out_123a = geomAndNot(rxfet_halo_out_123a rxfet_edge_out_123a)

Executing: rxfet_90c_in_123a = geomGetRectangle(geomAnd(rxfet_corner_in_123a pc))

Executing: rxfet_90c_out_123a = geomGetRectangle(geomAnd(rxfet_corner_out_123a pc))

Executing: rxfet_45c_out_123a = geomAndNot(geomAnd(rxfet_corner_out_123a pc) rxfet_90c_o...

Executing: rxfet_edge_in_123b = geomSize(geomGetEdge(rx_fet over bkgnd) -0.03)

Executing: rxfet_corner_in_123b = geomAndNot(rxfet_halo_in_123b rxfet_edge_in_123b)

Executing: err123a_45out = geomButtOrOver(geomAndNot(gate grlogic) geomSize(rxfet_45c_ou...
	   errorLayer(err123a_45out "GR123a: 45 degree outside (RX not covered by (PC not touching CA)) vertice under (PC not under GRLOGIC) found!")

Executing: err123a_90in = geomButtOrOver(geomAndNot(gate grlogic) rxfet_90c_in_123a)
	   errorLayer(err123a_90in "GR123a: 90 degree inside (RX not covered by (PC not touching CA)) vertice under (PC not under GRLOGIC) found!")

Executing: err123a_90out = geomButtOrOver(geomAndNot(gate grlogic) geomSize(rxfet_90c_ou...
	   errorLayer(err123a_90out "GR123a: 90 degree outside (RX not covered by (PC not touching CA)) vertice under (PC not under GRLOGIC) found!")

Executing: err123b = drc(geomAndNot(rxfet_corner_in_123b grlogic) ((0 < sep) < 0.08) opp...
	   errorLayer(err123b "GR123b: Dist between inside corners of (RX under PC) >= 0.080 um.")

Executing: err125 = geomOverlap(pc geomOverlap(geomSize(geomGetEdge(gate) 0.01) pc) (kee...
	   errorLayer(err125 "GR125: (PC over RX) dividing RX into less than 2 diffusions found!")

Executing: pc_outside_rx = geomOutside(pc rx)

Executing: drc(pc_outside_rx rx (sep < 0.08) "GR130b: (PC not intersecting RX) to RX >= ...

Executing: nw_not_mosvar_grlogic = geomButtOrOver(geomAndNot(nw mosvar) grlogic)

Executing: errbb131 = geomButtOrOver(nw_not_mosvar_grlogic bb)
	   errorLayer(errbb131 "GRBB131: ((NW not over MOSVAR ) touching GRLOGIC) cannot touch a BB hole.")

Executing: pc_overlap_rx = geomOverlap(pc rx)

Executing: drc(pc_overlap_rx (area > 320.0) "GR132: (PC that intersects RX) area <= 320....

Executing: drc(ca (width < 0.2) "GR200: CA width and length == 0.200 um.(error <)")

Executing: drc(ca (area > 0.04) "GR200: CA width and length == 0.200 um.(error >)")

Executing: ca_all = geomAndNot(geomOr(ca cabar) cab_ring)

Executing: ca_polygon = geomGetPolygon(ca)
	   errorLayer(ca_polygon "GR201: Non-rectangular CA found!")

Executing: ca_45 = geomGetAngledEdge(ca_all ((0 < keep) < 90) fig)
	   errorLayer(ca_45 "GR201: 45 degree CA or CABAR found")

Executing: drc(ca (sep < 0.24) "GR203a: CA space >= 0.240 um.")

Executing: drc(rx ca (enc < 0.1) "GR204: CA within RX >= 0.100 um.")

Executing: drc(rx cabar (enc < 0.2) "GR204a: CABAR within RX >= 0.200 um.")

Executing: drc(ca_rx pc (sep < 0.16) "GR207: CA(over RX) to adjacent PC >= 0.160 um.")

Executing: ca_pc = geomAnd(ca pc)

Executing: cab_pc = geomAnd(cabar pc)

Executing: drc(ca_pc rx (sep < 0.16) "GR208: CA(over PC) to adjacent RX >= 0.160 um.")

Executing: drc(cab_pc rx (sep < 0.2) "GR208a: CABAR(over PC) to adjacent RX >= 0.200 um.")

Executing: drc(pc ca (enc < 0.06) "GR209: CA within PC >= 0.060 um.")

Executing: drc(pc cabar (enc < 0.16) "GR209a: CABAR within PC >= 0.160 um.")

Executing: err211pc = geomAnd(ca_all gate)
	   errorLayer(err211pc "GR211: {CA,CABAR} over (PC over RX) found!")

Executing: err212 = geomAndNot(ca_all geomOr(rx pc))
	   errorLayer(err212 "GR212: {CA,CABAR} not over {RX or PC} found!")

Executing: err220 = geomWidth(cab_not_ring (keep > 0.2))
	   errorLayer(err220 "GR220: CABAR width == 0.200 um.(error >)")

Executing: drc(cab_not_ring (width < 0.2) "GR220: CABAR width == 0.200 um.(error <)")

Executing: cabar_polygon = geomGetPolygon(cab_not_ring)
	   errorLayer(cabar_polygon "GRLEG_221: Non-rectangular CABAR found!")

Executing: drc(cabar (area < 0.12) "GRLEG_221: CABAR length (min) >= 0.600 um.")

Executing: drc(cab_not_ring (area > 1.0) "GRLEG_222: CABAR length (max) <= 5.000 um.")

Executing: err223c = geomButtOrOver(ca cabar)
	   errorLayer(err223c "GR223c: CA touching CABAR found!")

Executing: drc(cabar (sep < 0.36) "GR223a: CABAR space >= 0.360 um.")

Executing: drc(cabar (sep < 0.52) (2.5 < app) "GR223b: CABAR space (run > 2.5) >= 0.520 ...

Executing: drc(cabar ca ((0 < sep) < 0.28) "GR223c: CABAR to adjacent CA >= 0.280 um.")

Executing: cab_rx = geomAnd(cabar rx)

Executing: drc(cab_rx pc (sep < 0.24) "GR225: CABAR(over RX) to adjacent PC >= 0.240 um.")

Executing: err228 = geomOutside(cabar geomOr(chipring pc_res rx_res))
	   errorLayer(err228 "GRLEG_228: CABAR outside of (Resistors or Chip Guardring) found!")

Executing: nw_not_ortho = geomGetAngledEdge(nwgen ((0 < keep) < 90) fig)
	   errorLayer(nw_not_ortho "GR250a: Non-orthagonal NW shapes found!")

Executing: drc(nwgen (width < 0.7) "GR250: NW(drawn or generated) width >= 0.700 um.")

Executing: err252c = geomAnd(rx drc(nw (sep < 1.28)))
	   errorLayer(err252c "GR252c: RX shape between (NW shapes < 1.28 um. apart) found!")

Executing: errnwasp1 = geomStraddle(nw nwasp)
	   errorLayer(errnwasp1 "GRNWASP1: NW straddling NWASP found!")

Executing: drc(nw_adp (sep < 1.28) "GR252a: NW(not over NWASP) space >= 1.280 um.")

Executing: drc(nw_adp nw_asp (sep < 1.28) "GR252a: NW(not over NWASP) to NW(over NWASP) ...

Executing: drc(nw_asp (sep < 1.28) (app < 0.7) "GR252b: NW(over NWASP) space (run  < 0.7...

Executing: drc(nw_asp (sep < 0.84) (app >= 0.7) "GR252b: NW(over NWASP) space (run >= 0....

Executing: drc(nwgen (notch < 1.28) (app < 0.7) "GR252b: NW notch (run  < 0.70) >= 1.280...

Executing: drc(nwgen (notch < 0.84) (app >= 0.7) "GR252b: NW notch (run >= 0.70) >= 0.84...

Executing: pdiff_in_nw = geomOverlap(pdiff nw)

Executing: nwfat_4000 = geomAnd(geomWidth(nw (keep > 39.98)) nw)

Executing: nwfat_40u = geomAnd(geomWidth(nw (keep > 40.0)) nw)

Executing: err260 = geomStraddle(pdiff_in_nw nw)
	   errorLayer(err260 "GR260: (RX within BP) straddling NW found!")

Executing: drc(nw pdiff_in_nw (enc < 0.42) "GR260: (RX within BP) within NW >= 0.420 um.")

Executing: nw_tch_nwfat = geomButtOrOver(nw nwfat_40u)

Executing: err260a = geomAnd(drc(nw_tch_nwfat pdiff_in_nw (enc < 0.52) withSingularPoint...
	   errorLayer(err260a "GR260a: (RX within BP) within NW(>=40.0) >= 0.520 um.")

Executing: ndiff_schky = geomAnd(ndiff schky)

Executing: ndiff_cp260c = geomAndNot(ndiff geomOr(bp geomAnd(schky nw)))

Executing: pdiff_sige = geomOutside(geomOr(geomAnd(rx pd) pdiff) nw)

Executing: drc(bb pdiff_sige (enc < 1.28) "GRCP260: (RX(P+) not touching NW) must be wit...

Executing: drc(bb ndiff_cp260c (enc < 1.28) "GRCP260c: RX N contact (RX not over (BP or ...

Executing: lay_cp260d = geomAndNot(ndiff_schky bp)

Executing: drc(bb lay_cp260d (enc < 0.14) "GRCP260d: RX N contact ((RX over SCHKY) not o...

Executing: pot261 = geomAnd(drc(nwcont nw (ovlp < 0.46) figa) nw)

Executing: drc(nwcont nw (ovlp < 0.28) "GR261f: RX(NWcont) overlap of NW >= 0.280 um.")

Executing: rx_over_rn = geomAnd(rx rn)

Executing: nwc_strad_nw = geomStraddle(nwcont nw)

Executing: nwc_in_nw = geomAndNot(nwcont nwc_strad_nw)

Executing: nwc_butted = geomButting(nwc_in_nw pdiff)

Executing: nwc_in_nobut = geomAndNot(nwc_in_nw nwc_butted)

Executing: nwc_262 = geomOr(geomAnd(nwc_strad_nw nw) geomAnd(nwc_in_nobut nw))

Executing: rxrn_bb = geomAnd(rx_over_rn bb)

Executing: drc(nwc_262 (area < 0.15) "GR262: RX(NWcont) overlap area with NW >= 0.150 sq...

Executing: drc(rxrn_bb (area < 0.15) "GR262b: (RX within RN) intersect area with BB >= 0...

Executing: err262f = drc(pot261 (area < 0.24))
	   errorLayer(err262f "GR262f: RX(NWcont) overlap area with NW >= 0.240 sq.um.")

Executing: err261 = geomAnd(pot261 err262f)
	   errorLayer(err261 "GR261: RX(NWcont) overlap of NW >= 0.460 um.")

Executing: ndiff_265a = geomOutside(ndiff nwfat_4000)

Executing: drc(ndiff nw (sep < 0.42) diffNet "GR265: RX(outside BP) to adjacent NW (diff...

Executing: drc(ndiff_265a nwfat_4000 (sep < 0.52) "GR265a: RX(outside BP) to adjacent NW...

Executing: drc(ndiff ns (sep < 2.32) diffNet "GR265b: RX(outside BP) to adjacent NS (dif...

Executing: drc(rxnp_junction_cp265b bb (sep < 0.42) diffNet "GRCP265b: ((RX outside BP) ...

Executing: drc(sxcont nw (sep < 0.08) "GR266: (RX(in BP) outside NW) to adjacent NW >= 0...

Executing: drc(sxcont bb (sep < 0.4) "GRCP266c: (RX(in BP) no NW) to BB space >= 0.400 u...

Executing: pdiff_in_nw_268 = geomInside(pdiff nw)

Executing: nwc_over_nw = geomAnd(nwcont nw)

Executing: sx_block = geomOr(geomSize(geomSize(nw 0.62) -0.62) bb bfmoat)

Executing: nwc_fet = geomAndNot(geomButtOrOver(geomStraddle(ndiff nw) pc) nw)

Executing: njct = geomOr(geomOutside(geomButtOrOver(ndiff ca_all) geomOr(nw bb bfmoat)) ...

Executing: njct_no_dg = geomAndNot(njct dg)

Executing: bbcont = geomAndNot(geomAnd(rx geomAnd(rn bb)) nw)

Executing: pdiff_in_bb = geomAnd(geomAnd(rx pd) bb_not_nw)

Executing: pdiff_bb268 = geomOutside(pdiff_in_bb ind_filt)

Executing: picont_268b = geomAnd(sxpicont_268b pi)

Executing: sxcont_268b = geomAndNot(sxpicont_268b pi)

Executing: njct_no_dg_in_pi = geomAnd(njct_no_dg pi)

Executing: njct_no_dg_in_sx = geomAndNot(njct_no_dg pi)

Executing: err268 = geomSepInside(pdiff_in_nw_268 53.0 nwc_over_nw nw)
	   errorLayer(err268 "GR268: RX(in BP) to RX(not BP) (in same NW) space <= 53.000 um.")

Executing: sxc_corners = geomGetCorner(sxcont angleAll)

Executing: sxc_corners2 = geomGetCorner(sxcont_tw angleAll)

Executing: sxc_crnr_sx = geomAndNot(geomAndNot(sxcont sxc_corners) pi)

Executing: sxc_crnr_pi = geomAnd(geomAndNot(sxcont_tw sxc_corners2) pi)

Executing: sxc_x5300 = geomSizeAndNot(sxc_crnr_sx sx_block 0.1 53.0)

Executing: pic_x5300 = geomSizeAndNot(sxc_crnr_pi sx_block 0.1 53.0)

Executing: err268b_sx = geomAndNot(geomAvoiding(njct_no_dg_in_sx crackstop) sxc_x5300)

Executing: err268b_pi = geomAndNot(njct_no_dg_in_pi pic_x5300)

Executing: err268b = geomOr(err268b_sx err268b_pi)
	   errorLayer(err268b "GR268b: RX(N+ Jct) to Substrate Contact space <= 53.000 um.")

Executing: errbb268 = geomSepInside(pdiff_bb268 53.0 bbcont bb_not_nw)
	   errorLayer(errbb268 "GRBB268: (RX over PD) to RX(not PD) (same BB) space <= 53.000 um.")

Executing: err268g1 = geomOutside(geomAndNot(geomHoles(nw) nw) geomOr(sxcont sxcont_tw))
	   errorLayer(err268g1 "GR268g: NW(hole) without a substrate contact found!")

Executing: err268g2 = geomOutside(geomAndNot(geomAndNot(geomHoles(bb) bb) nw) geomOr(sxc...
	   errorLayer(err268g2 "GR268g: BB(hole) without a substrate contact found!")

Executing: err268g3 = geomOutside(geomAndNot(geomHoles(bfgen) bfgen) geomOr(sxcont sxcon...
	   errorLayer(err268g3 "GR268g: BF(hole) without a substrate contact found!(generated BF)")

Executing: err268g4 = geomOutside(geomAndNot(geomHoles(bfmoat) bfmoat) geomOr(sxcont sxc...
	   errorLayer(err268g4 "GR268g: BFMOAT(hole) without a substrate contact found!")

Executing: gate269 = geomAnd(pc nwcont)

Executing: err269 = geomStraddle(gate269 nw)
	   errorLayer(err269 "GR269: (PC over RX (where RX Straddles NW)) straddling NW found!")

Executing: nw_269a = geomAndNot(nw grlogic)

Executing: drc(gate269 nw (sep < 0.7) "GR269: (PC over RX (where RX Straddles NW)) to NW...

Executing: drc(nwcont nw_269a ((0 < enc) < 0.7) "GR269a: RX(NWcont) overlap past (NW not...

Executing: nw_not_schky = geomAndNot(nw schky)

Executing: errnw4 = geomAnd(nw_not_schky bb)
	   errorLayer(errnw4 "GRNW4: (NW not over SCHKY) overlapping BB found!")

Executing: drc(nw bb ((0 < sep) < 1.76) "GRNW4: NW to adjacent BB >= 1.760 um.")

Executing: errvts00 = geomStraddle(gate vtsens)
	   errorLayer(errvts00 "GRVTSENS00: (PC over RX) straddling VTSENS found!")

Executing: ngate_vts = geomAnd(ngate vtsens)

Executing: drc(ngate_vts bb (sep < 3.0) withSingularPoint "GRVTSENS01: ((PC over RX) ove...

Executing: drc(ngate_vts bfmoat (sep < 3.0) withSingularPoint "GRVTSENS01: ((PC over RX)...

Executing: drc(ngate_vts mosvar (sep < 3.0) withSingularPoint "GRVTSENS01: ((PC over RX)...

Executing: drc(ngate_vts nw (sep < 3.0) withSingularPoint "GRVTSENS01: ((PC over RX) ove...

Executing: drc(ngate_vts zerovt (sep < 3.0) withSingularPoint "GRVTSENS01: ((PC over RX)...

Executing: pgate_vts = geomAnd(pgate vtsens)

Executing: pgvts_strad_pi = geomStraddle(pgate_vts pi)
	   errorLayer(pgvts_strad_pi "GRVTSENS02: (((PC over RX) over BP) over VTSENS) straddling PI found!")

Executing: drc(nw pgate_vts (enc < 2.3) "GRVTSENS02: (((PC over RX) over BP) over VTSENS...

Executing: drc(pi pgate_vts (enc < 2.3) "GRVTSENS02: (((PC over RX) over BP) over VTSENS...

Executing: drc(nr (width < 0.64) "GR290: NR width >= 0.640 um.")

Executing: err291 = geomGetAngledEdge(nr ((0 < keep) < 90) fig)
	   errorLayer(err291 "GR291: Non-orthogonal NR shape found!")

Executing: drc(nr (sep < 0.54) "GR292: NR to NR  space >= 0.540 um.")

Executing: drc(nr (notch < 0.54) "GR292: NR to NR  notch >= 0.540 um.")

Executing: pcInterRxNotWithinNw = geomAndNot(pcInterRx nw)

Executing: drc(pcInterRxNotWithinNw nr (sep < 0.26) "GR294a: [(PC intersect RX) not with...

Executing: pcInterRxNotWithinNw_strad_nr = geomStraddle(pcInterRxNotWithinNw nr)
	   errorLayer(pcInterRxNotWithinNw_strad_nr "GR294b: [(PC intersect RX) not within NW] straddling NR found!")

Executing: drc(nr pcInterRxNotWithinNw (enc < 0.26) "GR294b: [(PC intersect RX) not with...

Executing: drc(nr nw (enc < 1.4) "GR299b: NR overlap past NW >= 1.400 um.")

Executing: errnr10 = geomButtOrOver(nr geomOr(bb mosvar pd di))
	   errorLayer(errnr10 "GRNR10: NR touching (BB, MOSVAR, PD, DI) found!")

Executing: drc(nr zerovt ((0 < sep) < 1.4) "GRNR11 : NR to ZEROVT >= 1.400 um.")

Executing: errnr11touch = geomButtOrOver(nr zerovt)
	   errorLayer(errnr11touch "GRNR11: NR touching ZEROVT found!")

Executing: drc(nr pcfuse ((0 < sep) < 1.4) "GRNR12 : NR to PCFUSE >= 1.400 um.")

Executing: errnr12touch = geomButtOrOver(nr pcfuse)
	   errorLayer(errnr12touch "GRNR12: NR touching PCFUSE found!")

Executing: errnr13 = geomAvoiding(nr pc_over_rx_nr13)
	   errorLayer(errnr13 "GRNR13: NR not touching (PC over RX) found!")

Executing: drc(pr (width < 0.64) "GRLW00: PR width >= 0.640 um.")

Executing: errlw01 = geomGetAngledEdge(pr ((0 < keep) < 90) fig)
	   errorLayer(errlw01 "GRLW01: Non-orthogonal PR shape found!")

Executing: drc(pr (sepNotch < 0.54) "GRLW02: PR to PR  space >= 0.540 um.")

Executing: pcInterRxWithinNw = geomAnd(pcInterRx nw)

Executing: drc(pcInterRxWithinNw pr (sep < 0.26) "GRLW04a: [(PC intersect RX) within NW]...

Executing: pcInterRxWithinNw_strad_pr = geomStraddle(pcInterRxWithinNw pr)
	   errorLayer(pcInterRxWithinNw_strad_pr "GRLW04b: [(PC intersect RX) within NW] straddling PR found!")

Executing: drc(pr pcInterRxWithinNw (enc < 0.26) "GRLW04b: [(PC intersect RX) within NW]...

Executing: drc(nw pr (ovlp < 0.86) "GRLW09: PR overlap past NW >= 0.860 um.")

Executing: errlw10 = geomButtOrOver(pr geomOr(bb mosvar pd di))
	   errorLayer(errlw10 "GRLW10: PR touching (BB, MOSVAR, PD, DI) found!")

Executing: drc(pr zerovt ((0 < sep) < 1.4) "GRLW11 : PR to ZEROVT >= 1.400 um.")

Executing: errlw11touch = geomButtOrOver(pr zerovt)
	   errorLayer(errlw11touch "GRLW11: PR touching ZEROVT found!")

Executing: drc(pr pcfuse ((0 < sep) < 1.4) "GRLW12 : PR to PCFUSE >= 1.400 um.")

Executing: errlw12touch = geomButtOrOver(pr pcfuse)
	   errorLayer(errlw12touch "GRLW12: PR touching PCFUSE found!")

Executing: errlw13 = geomAvoiding(pr pc_over_rx_lw13)
	   errorLayer(errlw13 "GRLW13: PR not touching (PC over RX) found!")

Executing: nd_butt = geomButting(geomAndNot(ndiff pc) pdiff)

Executing: pd_butt = geomButting(geomAndNot(pdiff pc) ndiff)

Executing: drc(geomOr(bpgen bp) (width < 0.34) withCornerTouch "GR350: BP width >= 0.340...

Executing: bp_not_ring = geomAndNot(geomOr(bpgen bp) bp_ring)

Executing: bp_enclosure = geomAndNot(geomHoles(bp_not_ring) bp_not_ring)

Executing: drc(geomOr(bp bpgen) (area < 0.387) "GR351a: BP area >= 0.387 sq.um.")

Executing: drc(bp_enclosure (area < 0.387) "GR351b: BP enclosed area >= 0.387 sq.um.")

Executing: drc(geomOr(bpgen bp) (sepNotch < 0.34) withSingularPoint "GR352: BP space >= ...

Executing: rx_bp = geomButtOrOver(rx bp)

Executing: rx_bp_nw = geomOverlap(rx_bp nw)

Executing: rx_jct_side = geomStraddle(geomAndNot(geomStraddle(rx bp) pc) bp)

Executing: err353_enc = geomAndNot(drc(bp rx_bp_nw ((0 < enc) < 0.14)) rx_jct_side)
	   errorLayer(err353_enc "GR353: ((RX over BP) over NW) within BP >= 0.140 um.")

Executing: err353_coin = geomSize(geomGetEdge(rx_bp_nw coincident bp) 0.01)
	   errorLayer(err353_coin "GR353: ((RX over BP) over NW) within BP (coincident) >= 0.140 um.")

Executing: nw_x042 = geomSize(nw 0.42)

Executing: sxc_354b = geomAnd(geomAndNot(sxcont pd_butt) nw_x042)

Executing: err354a = geomAndNot(geomStraddle(geomOutside(geomAndNot(geomOverlap(rx bp) n...
	   errorLayer(err354a "GR354a: ((RX(sub cont) not GRLOGIC) not (NW +0.42)) within BP >= 0.000 um.")

Executing: drc(bp sxc_354b (enc < 0.14) "GR354b: (RX(sub cont) over (NW +0.42)) within B...

Executing: rx_nd_side = geomAndNot(geomAndNot(geomAndNot(ndiff nw) pc) rx_jct_side)

Executing: err355_0 = geomButtOrOver(rx_nd_side geomSize(bp 0.001))

Executing: err355_1 = geomAndNot(drc(rx_nd_side bp (sep < 0.14)) dsram)

Executing: errorLayer(geomOr(err355_0 err355_1) "GR355: (RX(not over BP)not over NW) to BP space >= 0.140 um.")

Executing: nw_e042 = geomSize(nw -0.42)

Executing: nwc_not_nwe042 = geomAndNot(geomAndNot(nwcont nd_butt) nw_e042)

Executing: drc(nwc_not_nwe042 bp (sep < 0.14) "GR356b: (RX(nw cont) not over (NW -0.42))...

Executing: drc(geomOr(bhgen bh) nw (sep < 0.44) shielded "GR357: Layout will cause: BH t...

Executing: drc(geomOr(bhgen bh) bb (sep < 0.44) withSingularPoint "GR357: Layout will ca...

Executing: drc(geomOr(bhgen bh) mosvar (sep < 0.44) withSingularPoint "GR357: Layout wil...

Executing: drc(geomOr(bhgen bh) (width < 0.44) withCornerTouch "GR357a: Layout will caus...

Executing: drc(geomOr(bhgen bh) (sepNotch < 0.44) withSingularPoint "GR357b: Layout will...

Executing: bp_out_bb = geomOutside(bp bb)

Executing: drc(bp_out_bb pd (sep < 0.34) shielded withSingularPoint "GR358b: BP to PD sp...

Executing: drc(geomOr(bngen bn) pd (sep < 0.34) shielded withSingularPoint "GR358c: Layo...

Executing: drc(geomOr(phgen ph) (width < 0.44) withCornerTouch "GR358d: Layout will caus...

Executing: drc(geomOr(bngen bn) (width < 0.34) withCornerTouch "GR358e: Layout will caus...

Executing: drc(geomOr(bngen bn) (sepNotch < 0.34) withSingularPoint "GR358f: Layout will...

Executing: excl_358h = geomOr(nw nwasp grlogic)

Executing: err358h_bf = drc(bf (sepNotch < 1.0) withSingularPoint)

Executing: err358h_bfgen = drc(bfgen (sepNotch < 1.0) withSingularPoint)

Executing: drc(bf (width < 0.98) withCornerTouch "GR358g: Layout will cause: BF width >=...

Executing: drc(bfgen (width < 0.98) withCornerTouch "GR358g: Layout will cause: BF width...

Executing: errorLayer(geomAndNot(err358h_bf excl_358h) "GR358h: Layout will cause: BF space (not over (GRLOGIC or NW or NWASP)) >= 1.000 um.")

Executing: errorLayer(geomAndNot(err358h_bfgen excl_358h) "GR358h: Layout will cause: BF space (not over (GRLOGIC or NW or NWASP)) >= 1.000 um.")

Executing: drc(geomOr(phgen ph) (sepNotch < 0.44) withSingularPoint "GR358i: Layout will...

Executing: drc(geomOr(degen de) (width < 0.44) withCornerTouch "GR358j: Layout will caus...

Executing: drc(geomOr(degen de) (sepNotch < 0.44) withSingularPoint "GR358k: Layout will...

Executing: drc(geomOr(dfgen df) (width < 0.44) withCornerTouch "GR358m: Layout will caus...

Executing: drc(geomOr(dfgen df) (sepNotch < 0.44) withSingularPoint "GR358n: Layout will...

Executing: ngate_mosvar = geomAnd(ngate mosvar)

Executing: err370 = geomOutside(drc(ngate bp ((0 < sep) < 0.36)) rx_jct_side)

Executing: err370end = geomOverlap(geomSize(geomGetEdge(geomAndNot(ndiff nw) over pc) 0....

Executing: err370_1 = geomButtOrOver(bp ngate_mosvar)

Executing: err370_2 = geomAndNot(err370 err370_1)
	   errorLayer(err370_2 "GR370: (PC over RX) to BP space >= 0.360 um.")

Executing: err370end_2 = geomAndNot(err370end err370_1)
	   errorLayer(err370end_2 "GR370: (PC over RX) to BP space (gate end)>= 0.360 um.")

Executing: err370b = geomButtOrOver(gate pd)
	   errorLayer(err370b "GR370b: (PC over RX) touching PD found!")

Executing: drc(gate bb (sep < 0.5) "GR370a: (PC over RX) to BB space >= 0.500 um.")

Executing: drc(gate pd ((0 < sep) < 0.5) "GR370b: (PC over RX) to PD >= 0.500 um.")

Executing: err371 = geomStraddle(gate bp)
	   errorLayer(err371 "GR371: (PC over RX) straddling BP found!")

Executing: drc(bp gate (enc < 0.36) "GR371: (PC over RX) within BP >= 0.360 um.")

Executing: rx_butted = geomButtOrOver(rx geomOr(nd_butt pd_butt))

Executing: rx_btd_sx = geomAndNot(rx_butted nw)

Executing: drc(bp rx_btd_sx ((0 < ovlp) < 0.22) "GR372: (BP overlap of RX) not over NW >...

Executing: drc(sxcont (area < 0.147) "GR372a: Substrate contact area >= 0.147 sq.um.")

Executing: rx_btd_nw = geomAnd(rx_butted nw)

Executing: drc(rx_btd_nw bp (enc < 0.22) "GR373: (RX overlap past BP) over NW  >= 0.220 ...

Executing: drc(nwc_butted (area < 0.147) "GR373a: Well contact area >= 0.147 sq.um.")

Executing: err374 = geomStraddle(nd_butt nw)
	   errorLayer(err374 "GR374: RX straddling NW (butted n-well cont) found!")

Executing: drc(nw nd_butt (enc < 0.12) "GR374: RX within NW (butted n-well cont) >= 0.12...

Executing: ngate_btd = geomAnd(ngate geomButting(ndiff pdiff))

Executing: drc(pdiff ngate_btd (sep < 0.28) "GR378: (BP inter RX) to adj ((PC intersect ...

Executing: pgate_btd = geomAnd(pgate geomButting(pdiff ndiff))

Executing: drc(ndiff pgate_btd (sep < 0.28) "GR379: (BP inter RX) overlap past ((PC inte...

Executing: bp_di = geomButtOrOver(bp di)

Executing: nw_di = geomButtOrOver(nw di)

Executing: err380 = geomAndNot(geomSize(bp_di -0.04) di)
	   errorLayer(err380 "GR380: DI must be within BP == 0.040 um. (error >)")

Executing: err380_1 = geomAndNot(di bp)
	   errorLayer(err380_1 "GR380: DI outside of BP found.")

Executing: err380a = geomButtOrOver(nw_di jd)
	   errorLayer(err380a "GR380a: NW(touching DI) touching JD found!")

Executing: err380c_bb = geomButtOrOver(nw_di bb)
	   errorLayer(err380c_bb "GR380c: NW(touching DI) touching BB found!")

Executing: err380c_pi = geomButtOrOver(nw_di pi)
	   errorLayer(err380c_pi "GR380c: NW(touching DI) touching PI found!")

Executing: err380d_rp = geomButtOrOver(nw_di rp)
	   errorLayer(err380d_rp "GR380d: NW(touching DI) touching RP found!")

Executing: err380d_rr = geomButtOrOver(nw_di rr)
	   errorLayer(err380d_rr "GR380d: NW(touching DI) touching RR found!")

Executing: err380e_dg = geomButtOrOver(nw_di dg)
	   errorLayer(err380e_dg "GR380e: NW(touching DI) touching DG found!")

Executing: err380e_op = geomButtOrOver(nw_di op)
	   errorLayer(err380e_op "GR380e: NW(touching DI) touching OP found!")

Executing: err380e_pc = geomButtOrOver(nw_di pc)
	   errorLayer(err380e_pc "GR380e: NW(touching DI) touching PC found!")

Executing: err380g = geomButtOrOver(geomButtOrOver(bp di) pd)
	   errorLayer(err380g "GR380g: BP(touching DI) touching PD found!")

Executing: drc(bp di (enc < 0.04) "GR380: DI must be within BP == 0.040 um. (error <)")

Executing: drc(nw_di jd ((0 < sep) < 5.0) "GR380a: NW(touching DI) to JD space >= 5.000 ...

Executing: drc(nw_di rp ((0 < sep) < 2.5) "GR380d: NW(touching DI) to RP space >= 2.500 ...

Executing: drc(nw_di rr ((0 < sep) < 2.5) "GR380d: NW(touching DI) to RR space >= 2.500 ...

Executing: rx_di = geomButtOrOver(rx di)

Executing: rx_strad_di = geomStraddle(rx di)
	   errorLayer(rx_strad_di "GR381: RX straddling DI found!")

Executing: err381b = geomAndNot(geomSize(di -0.34) rx_di)
	   errorLayer(err381b "GR381b: RX within DI <= 0.340 um.")

Executing: drc(di rx (enc < 0.1) "GR381: RX within DI >= 0.100 um.")

Executing: nwc_encl = geomAndNot(geomHoles(nwcont) nwcont)

Executing: die_x055 = geomSize(geomGetEdge(di over bkgnd) 0.55)

Executing: err382 = geomOutside(die_x055 nwcont)
	   errorLayer(err382 "GR382b: RX(NWcont) to DI space <= 0.540 um.")

Executing: err382rng = geomAndNot(di nwc_encl)
	   errorLayer(err382rng "GR382b: DI not within an RX(NWcont) hole found!")

Executing: err383 = geomAndNot(di geomEnclose(di rx))
	   errorLayer(err383 "GR383: DI not enclosing an RX shape found!")

Executing: rxdi_not_grl = geomAndNot(rx_di grlogic)

Executing: err385a = geomWidth(rxdi_not_grl (keep > 2.0))
	   errorLayer(err385a "GR385a: RX(not GRLOGIC) width (max) (when RX touches DI) <= 2.000 um.")

Executing: drc(rx_di (width < 1.0) "GR385: RX width (min) (when RX touches DI) >= 1.000 ...

Executing: err387 = geomAndNot(rx_di nw)
	   errorLayer(err387 "GR387: RX(touching DI) not within NW found!")

Executing: nw_387b = geomSize(geomGetEdge(geomSize(geomButtOrOver(nw di) 0.36)) -0.01)

Executing: rx_387b = geomAndNot(geomAnd(geomAvoiding(geomButtOrOver(rx ca) pc) bp) geomO...

Executing: err387b = geomAndNot(nw_387b rx_387b)
	   errorLayer(err387b "GR387b: ((NW(touching DI) expanded by 0.36um) edges) must be covered by ((((RX touching CA) not touching PC) over BP) not over (NW or BB))!")

Executing: nwc_di = geomAnd(nwcont nw_di)

Executing: drc(nwc_di bp (sep < 0.14) "GR388: (RX(NWcont) over NW(touching DI)) to BP sp...

Executing: nwdi_x100 = geomSize(nw_di 1.0)

Executing: sxc_over_nwdix = geomAnd(sxcont nwdi_x100)

Executing: drc(bp sxc_over_nwdix (enc < 0.14) "GR389: (RX(sxcont) over (NW(touch DI) +1....

Executing: dipi_sized = geomSize(dipi 0.04)

Executing: okdipi00 = geomButtOnly(dipi_sized bp)

Executing: errdipi00_0 = geomSize(geomAndNot(dipi_sized okdipi00) 0.04)

Executing: errdipi00_1 = geomButtOrOver(dipi bp)

Executing: errorLayer(geomOr(errdipi00_0 errdipi00_1) "GRDIPI00: DIPI must be exact space to BP, with touching prohibited == 0.04 um.")

Executing: pi_touch_dipi = geomButtOrOver(pi geomSize(dipi 0.001))

Executing: errdipi00a_0 = drc(pi_touch_dipi jd (sep < 1.0))

Executing: errdipi00a_1 = geomButtOrOver(pi_touch_dipi geomSize(jd 0.001))

Executing: errorLayer(geomOr(errdipi00a_0 errdipi00a_1) "GRDIPI00a: (PI touching DIPI) to JD (((PI touching DIPI) touching JD) prohibited) >= 1.00 um.")

Executing: errdipi00c = geomAndNot(dipi pi)
	   errorLayer(errdipi00c "GRDIPI00c: DIPI must be covered by PI")

Executing: rr_rp = geomOr(rr rp)

Executing: errdipi00d_0 = drc(pi_touch_dipi rr_rp (sep < 2.5))

Executing: errdipi00d_1 = geomButtOrOver(pi_touch_dipi geomSize(rr_rp 0.001))

Executing: errorLayer(geomOr(errdipi00d_0 errdipi00d_1) "GRDIPI00d: (PI touching DIPI) minimum space to (RR or RP). (PI touching DIPI) touching (RR or RP) is prohibited.>= 2.50 um.")

Executing: errdipi00e = geomButtOrOver(dipi geomSize(geomOr(nw bp pc op bb pd mosvar nr ...
	   errorLayer(errdipi00e "GRDIPI00e: DIPI touching {NW, BP,PC, OP, BB, PD, MOSVAR, NR, PR, DG, TG, ZEROVT} is prohibited")

Executing: errdipi00f = geomButtOrOver(pi_touch_dipi geomSize(gate 0.001))
	   errorLayer(errdipi00f "GRDIPI00f: (PI touching DIPI) touching (PC over RX) is prohibited.")

Executing: bp_touch_pi_touch_dipi = geomButtOrOver(bp geomSize(pi_touch_dipi 0.001))

Executing: errdipi00g = geomButtOrOver(bp_touch_pi_touch_dipi geomSize(pd 0.001))
	   errorLayer(errdipi00g "GRDIPI00g: (BP touching (PI touching DIPI)) touching PD is prohibited.")

Executing: drc(dipi rx (enc < 0.1) "GRDIPI01: RX minimum within DIPI >= 0.10 um.")

Executing: dipi_on_rx = geomStraddle(dipi rx)

Executing: dipi_shrunk = geomSize(dipi_on_rx -0.34)

Executing: errdipi01b = geomAndNot(dipi_shrunk rx)
	   errorLayer(errdipi01b "GRDIPI01b: RX maximum within DIPI <= 0.34 um.")

Executing: pi_not_nw = geomAndNot(pi nw)

Executing: lay_dipi02b = geomAnd(geomAnd(rx bp) geomAndNot(pi nw))

Executing: dipi_sized = geomSize(dipi 0.54)

Executing: ok_dipi02b = geomButtOrOver(dipi_sized lay_dipi02b)

Executing: errdipi02b_0 = geomAndNot(dipi ok_dipi02b)

Executing: errdipi02b_1 = drc(dipi lay_dipi02b ((0.54 < sep) < 3))

Executing: errorLayer(geomOr(errdipi02b_0 errdipi02b_1) "GRDIPI02b: RX isolated p-well contact maximum space to DIPI <= 0.54 um.")

Executing: rx_nw_cont_over_pi = geomAnd(geomAnd(rx nw) pi)

Executing: lay_dipi02c = geomButtOrOver(lay_dipi02b dipi_sized)

Executing: lay_dipi02c_sized = geomSize(lay_dipi02c 1.0)

Executing: okdipi02c = geomButtOrOver(lay_dipi02c_sized rx_nw_cont_over_pi)

Executing: errdipi02c_0 = geomAndNot(lay_dipi02c okdipi02c)

Executing: errdipi02c_1 = drc(lay_dipi02c rx_nw_cont_over_pi ((1.0 < sep) < 3))

Executing: errorLayer(geomOr(errdipi02c_0 errdipi02c_1) "GRDIPI02c: RX isolated p-well contact touching (DIPI sized by +0.54 um) maximum space to (RX n-well contact over PI) <= 1.00 um.")

Executing: okdipi03 = geomEnclose(dipi rx)

Executing: errdipi03 = geomAndNot(dipi okdipi03)
	   errorLayer(errdipi03 "GRDIPI03: DIPI must enclose RX.")

Executing: rx_in_dipi = geomAnd(rx dipi)

Executing: drc(rx_in_dipi (width < 1.0) "GRDIPI05: RX minimum width (when RX is within D...

Executing: lay_dipi5a = geomAndNot(rx_in_dipi grlogic)

Executing: errdipi5a = geomButtOrOver(lay_dipi5a geomSize(lay_dipi5a -1.0 downUp))
	   errorLayer(errdipi5a "GRDIPI5a: (RX not over GRLOGIC) maximum width - (when RX is within DIPI) <= 2.00 um.")

Executing: pi_not_nw_not_bp = geomAndNot(geomAndNot(pi nw) bp)

Executing: errdipi07 = geomAndNot(rx_in_dipi pi_not_nw_not_bp)
	   errorLayer(errdipi07 "GRDIPI07: (RX within DIPI) must be within ((PI not over NW) not over BP)")

Executing: lay_dipi07b = geomButtOrOver(geomAndNot(nw pi) geomSize(pi_touch_dipi 0.001))

Executing: lay_dipi07b_sized = geomSize(lay_dipi07b 1.0)

Executing: rx_not_pi = geomAndNot(rx pi)

Executing: okdipi07b = geomButtOrOver(lay_dipi07b_sized rx_not_pi)

Executing: errdipi07b = geomSize(geomAndNot(lay_dipi07b_sized okdipi07b) -1.0)
	   errorLayer(errdipi07b "GRDIPI07b: [(NW not over PI) touching (PI touching DIPI)] maximum space to (RX substrate contact not over PI) <= 1.00 um.")

Executing: lay_dipi08 = geomButtOrOver(lay_dipi02b pi_touch_dipi)

Executing: drc(bp lay_dipi08 (enc < 0.14) "GRDIPI08: [RX p-well contact over (PI touchin...

Executing: lay_dipi09 = geomAnd(rx geomSize(geomButtOrOver(geomAndNot(nw pi) pi_touch_di...

Executing: drc(bp lay_dipi09 (enc < 0.14) "GRDIPI09: {RX substrate contact over [((NW no...

Executing: rx_under_op = geomAnd(rx op)

Executing: rx_res_ends = geomAndNot(rx_res rx_under_op)

Executing: pc_res_ends = geomAndNot(pc_res pc_under_op)

Executing: err710 = geomAnd(drc(rx_res_ends (sep < 0.48) opposite) rx_res)
	   errorLayer(err710 "GR710: (OP intersect RX) length >= 0.480 um.")

Executing: drc(rx_under_op (width < 0.28) "GR711: (OP intersect RX) width >= 0.280 um.")

Executing: err712 = geomAnd(drc(pc_res_ends (sep < 1.06) opposite) pc_under_op)
	   errorLayer(err712 "GR712: (OP intersect PC) length >= 1.060 um.")

Executing: pc_under_op_non_rec = geomGetNonRectangle(pc_under_op)

Executing: rr_under_pc_op_norec = geomAnd(rr geomGetNonRectangle(pc_under_op))

Executing: pc_under_op_not_rr = geomAndNot(pc_under_op rr_under_pc_op_norec)

Executing: op_len = geomSize(geomGetEdge(pc_under_op_not_rr coincident pc) 0.01)

Executing: err713 = drc(op_len (sep < 0.28) opposite)

Executing: err713_fil = geomAnd(err713 pc_under_op_not_rr)

Executing: rr_serp_strip1 = geomAnd(geomAnd(pc_under_op rr) reshv)

Executing: rect_713a = geomGetRectangle(rr_serp_strip1)

Executing: good_713a = drc(rect_713a ((0.18 <= width) <= 0.32) opposite)

Executing: errorLayer(geomAndNot(err713_fil good_713a) "GR713a: (OP intersect PC) not over (RR intersect (non rectangular (PC under OP))) width >= 0.280 um.")

Executing: pc_under_op_rr = geomAnd(pc_under_op rr_under_pc_op_norec)

Executing: op_len_713b = geomSize(geomGetEdge(pc_under_op_rr coincident pc) 0.01)

Executing: err713b = drc(op_len_713b (sep < 0.18) opposite)

Executing: err713b_fil = geomAnd(err713b pc_under_op_rr)
	   errorLayer(err713b_fil "GR713b: (OP intersect PC) over (RR intersect (non rectangular (PC under OP))) width >= 0.180 um.")

Executing: err713c_fil = geomAnd(geomSize(pc_under_op_rr -0.16) pc_under_op_rr)
	   errorLayer(err713c_fil "GR713c: (OP intersect PC) over (RR intersect (non rectangular (PC under OP))) width <= 0.320 um.")

Executing: ndiff_res = geomAndNot(rx_res bp)

Executing: pdiff_res = geomAnd(rx_res bp)

Executing: err715a = geomAnd(ndiff_res nw)
	   errorLayer(err715a "GR715a: ((RX touching OP) outside BP) touching NW found!")

Executing: err715b = geomAndNot(pdiff_res nw)
	   errorLayer(err715b "GR715b: ((RX touching OP) inside BP) not within NW found!")

Executing: err715f = geomButtOrOver(rx_res bb)
	   errorLayer(err715f "GR715f: RX(over OP) touching BB found!")

Executing: drc(ndiff_res nw (sep < 0.42) "GR715a: ((RX touching OP) outside BP) to NW sp...

Executing: drc(nw pdiff_res (enc < 0.42) "GR715b: ((RX touching OP) inside BP) within NW...

Executing: err716anw = geomStraddle(rx_res nw)
	   errorLayer(err716anw "GR716a: (RX touching OP) straddling NW found!")

Executing: err716abb = geomStraddle(rx_res bb)
	   errorLayer(err716abb "GR716a: (RX touching OP) straddling BB found!")

Executing: err716b = geomOutside(geomButtOrOver(rx_under_op nw) bp)
	   errorLayer(err716b "GR716b: ((OP intersect RX) touching NW ) not touching BP found!")

Executing: err716c = geomButtOrOver(geomOutside(rx_under_op nw) bp)
	   errorLayer(err716c "GR716c: ((OP intersect RX) not touching NW ) touching BP found!")

Executing: err717b = geomStraddle(pc_under_op nw)
	   errorLayer(err717b "GR717b: (PC intersect OP) straddling NW found!")

Executing: drc(pc_under_op nw (sep < 0.6) "GR717a: (PC intersect OP) to NW space >= 0.60...

Executing: drc(nw pc_under_op (enc < 0.86) "GR717b: (PC intersect OP) within NW >= 0.860...

Executing: drc(op (width < 0.48) "GR725: OP width >= 0.480 um.")

Executing: drc(op (sep < 0.48) "GR726: OP space >= 0.480 um.")

Executing: drc(op (notch < 0.48) "GR726: OP notch >= 0.480 um.")

Executing: op_enclosure = geomAndNot(geomHoles(op) op)

Executing: drc(op (area < 0.72) "GR729a: OP area >= 0.720 sq.um.")

Executing: drc(op_enclosure (area < 0.72) "GR729b: OP enclosed area >= 0.720 sq.um.")

Executing: drc(op rx_res (enc < 0.18) "GR727: OP overlap past RX >= 0.180 um.")

Executing: drc(op rx (sep < 0.16) "GR728: OP to RX space >= 0.160 um.")

Executing: drc(op pc_res (enc < 0.2) "GR730: OP overlap past PC >= 0.200 um.")

Executing: drc(op pc (sep < 0.26) "GR731: OP to PC space>= 0.260 um.")

Executing: op_rp_pd = geomAnd(geomAnd(op rp) pd)

Executing: op_rr_pd = geomAnd(geomAnd(op rr) pd)

Executing: errop9a_rp = geomWidth(op_rp_pd (keep > 0.38))
	   errorLayer(errop9a_rp "GROP9a: (OP over RP) overlap of PD == 0.380 um.(error >)")

Executing: errop9a_rr = geomWidth(op_rr_pd (keep > 0.38))
	   errorLayer(errop9a_rr "GROP9a: (OP over RR) overlap of PD == 0.380 um.(error >)")

Executing: drc(op pd (sep < 0.44) "GROP9: OP to adjacent PD >= 0.440 um.")

Executing: drc(op_rp_pd (width < 0.38) opposite parallel "GROP9a: (OP over RP) overlap o...

Executing: drc(op_rr_pd (width < 0.38) opposite parallel "GROP9a: (OP over RR) overlap o...

Executing: err732 = geomAnd(ca_all op)
	   errorLayer(err732 "GR732: CA/CABAR over OP found!")

Executing: drc(ca op (sep < 0.18) "GR733: CA to OP space >= 0.180 um.")

Executing: drc(cabar op (sep < 0.36) "GR733a: CABAR to OP space >= 0.360 um.")

Executing: esdStruct = geomOr(esdummy esd_cdm)

Executing: err734a = geomAndNot(geomStraddle(rx_res bp) esdStruct)
	   errorLayer(err734a "GR734a: (RX touching OP) straddling BP found!!")

Executing: err734a_enc = geomAndNot(drc(bp rx_res (enc < 0.22) withSingularPoint) esdStr...
	   errorLayer(err734a_enc "GR734a: (RX touching OP) within BP >= 0.220um")

Executing: err734b = geomAndNot(drc(rx_res bp (sep < 0.22) withSingularPoint) esdStruct)
	   errorLayer(err734b "GR734b: (RX touching OP) to BP space >= 0.220 um.")

Executing: bb_or_bp = geomOr(bb bp)

Executing: err735a2_1 = geomAndNot(geomAndNot(pc_res geomOr(bb bp)) esdStruct)
	   errorLayer(err735a2_1 "GR735a2: (PC touching OP) not within {BP or BB} found!")

Executing: err735a2_2 = geomAndNot(drc(bp pc_res (enc < 0.3) withSingularPoint) esdStruct)
	   errorLayer(err735a2_2 "GR735a2: (PC touching OP) within BP >= 0.300 um.")

Executing: err735a2_3 = geomAndNot(drc(bb pc_res (enc < 0.3) withSingularPoint) esdStruct)
	   errorLayer(err735a2_3 "GR735a2: (PC touching OP) within BB >= 0.300 um.")

Executing: err735b = geomAndNot(drc(pc_res bp (sep < 0.3) withSingularPoint) esdStruct)
	   errorLayer(err735b "GR735b: (PC touching OP) to BP space >= 0.300 um.")

Executing: sblk_ovr_op = geomAnd(sblk op)

Executing: err736 = geomAnd(geomAndNot(op esdStruct) gate)
	   errorLayer(err736 "GR736: (OP not over (ESDUMMy , ESD_CDM)) over (PC intersect RX) found!")

Executing: err736a = geomOverlap(geomAvoiding(rx_res sblk_ovr_op) geomSize(pc 0.01))
	   errorLayer(err736a "GR736a: RX(touching OP) touching PC found!")

Executing: err736a1 = geomOverlap(geomAvoiding(rx_res pc) geomSize(sblk 0.01))
	   errorLayer(err736a1 "GR736a1: (RX(touching OP) not touching PC) touching SBLK found!")

Executing: err736a2 = geomOverlap(geomAndNot(pc_res esdStruct) geomSize(sblk_ovr_op 0.01))
	   errorLayer(err736a2 "GR736a2: PC(touching OP) touching SBLK found!")

Executing: sblk_good = geomOverlap(sblk geomAnd(geomSize(op 0.01) sblk))

Executing: err736a3 = geomAndNot(sblk sblk_good)
	   errorLayer(err736a3 "GR736a3: SBLK must touch OP")

Executing: dg_737 = geomAndNot(dg geomOr(esdummy esd_cdm))

Executing: err737 = geomOverlap(op geomSize(dg_737 0.01))
	   errorLayer(err737 "GR737:  OP touching (DG not over (ESDUMMY or ESD_CDM)) not allowed!")

Executing: err737a = geomAndNot(geomAndNot(geomOverlap(pc_res geomSize(dg 0.01)) esdStru...
	   errorLayer(err737a "GR737a: PC(touching OP) touching DG found!")

Executing: err738rx = geomGetPolygon(rx_under_op)
	   errorLayer(err738rx "GR738a: Non-rectangular (OP intersect RX) found!")

Executing: err738pc = geomGetPolygon(geomAnd(geomAndNot(pc rr) op))
	   errorLayer(err738pc "GR738b: Non-rectangular (OP intersect (PC not over RR)) found!")

Executing: err738c = geomGetAngledEdge(pc_under_op ((0 < keep) < 90) fig)
	   errorLayer(err738c "GR738c_TF: Non-orthogonal  (OP intersect PC) found!")

Executing: drc(rx_res op (enc < 0.62) withSingularPoint "GR739a: RX overlap past OP >= 0...

Executing: drc(pc_res op (enc < 0.58) withSingularPoint "GR739b: PC overlap past OP >= 0...

Executing: drc(op rn (sep < 0.6) withSingularPoint "GROP20: OP to adjacent RN >= 0.600 u...

Executing: errop24 = geomOverlap(op geomSize(geomAnd(rx rn) 0.01))
	   errorLayer(errop24 "GROP24: OP touching RX(over RN) found!")

Executing: errop29 = geomButtOrOver(geomButtOrOver(geomAndNot(pc esdStruct) op) rx)
	   errorLayer(errop29 "GROP29: PC(touching OP) touching RX found!")

Executing: pcr_over_nw = geomAnd(pc_under_op nw)

Executing: drc(pcr_over_nw rx (sep < 0.38) "GROP30: ((PC over OP) over NW) to RX space >...

Executing: drc(pc_res rn (sep < 0.3) "GROP31: (PC touching OP) to RN must be>= 0.3um !")

Executing: errop31a = geomButtOrOver(geomAnd(pc_res geomSize(rn 0.01)) pc_res)

Executing: errop31b = geomButtOrOver(geomAnd(pc_res rn) pc_res)

Executing: errop31c = geomOr(errop31a errop31b)
	   errorLayer(errop31c "GROP31: (PC touching OP) cannot touch RN !")

Executing: rx_over_op_notover_grlogic = geomAndNot(rx_over_op_op32 grlogic)

Executing: nr_or_pr_op32 = geomOr(nr pr)

Executing: drc(rx_over_op_notover_grlogic nr_or_pr_op32 (sep < 0.26) "GROP32: ((RX over ...

Executing: errop32 = geomButtOrOver(rx_over_op_notover_grlogic nr_or_pr_op32)
	   errorLayer(errop32 "GROP32: ((RX over OP) not over GRLOGIC) touching (NR or PR) found!")

Executing: errgrpcr20a1 = geomAnd(geomButtOrOver(pc_res ns) ns)

Executing: errgrpcr20a2 = geomButtOrOver(geomAnd(pc_res geomSize(ns 0.01)) pc_res)

Executing: errpcr20a3 = geomOr(errgrpcr20a1 errgrpcr20a2)
	   errorLayer(errpcr20a3 "GRPCR20a: (PCtouching OP) touching NS found !")

Executing: errsblk4 = geomOr(geomStraddle(sblk esdStruct) geomOutside(sblk esdStruct))
	   errorLayer(errsblk4 "GRSBLK4: SBLK not covered by (ESDUMMY or ESD_CDM) found!!")

Executing: errpbr19pc = geomOutside(geomButtOrOver(pc_res op (keep > 1)) sblk)
	   errorLayer(errpbr19pc "GRPBR19: More than ONE set of contacts found on a PC resistor!")

Executing: errpbr19rx = geomOutside(geomButtOrOver(rx_res op (keep > 1)) sblk)
	   errorLayer(errpbr19rx "GRPBR19: More than ONE set of contacts found on a RX resistor!")

Executing: pcop_analog = geomAndNot(pc_res grlogic)

Executing: drc(nw pcop_analog (enc < 2.0) "GRPBR29: PC(touching OP, not GRLOGIC) within ...

Executing: pcop_bb = geomButtOrOver(pc_res bb)

Executing: drc(bb pcop_bb (enc < 2.0) "GRPBR31: PC(touching OP, touching BB) within BB >...

Executing: pcop_nonw = geomAndNot(geomOutside(pc_res nw) grlogic)

Executing: drc(pcop_nonw nw (sep < 2.0) "GRPBR33: PC(touch OP, no touch NW, not GRLOGIC)...

Executing: pcop_nobb = geomOutside(pc_res bb)

Executing: drc(pcop_nobb bb (sep < 2.0) "GRPBR35: PC(touching OP, not touching BB) to ad...

Executing: drc(rr (width < 0.8) "GRRR1: RR width >= 0.800 um.")

Executing: drc(rr (sep < 0.8) "GRRR2: RR space >= 0.800 um.")

Executing: drc(rr (notch < 0.8) "GRRR2: RR notch >= 0.800 um.")

Executing: errrr3 = geomButtOrOver(rr rp)
	   errorLayer(errrr3 "GRRR3: RR touching RP found!")

Executing: drc(rr rp ((0 < sep) < 0.8) "GRRR3: RR to RP space >= 0.800 um.")

Executing: pc_strad_rr = geomStraddle(pc rr)
	   errorLayer(pc_strad_rr "GRRR4: PC straddling RR found!")

Executing: drc(rr pc (enc < 0.26) "GRRR4: PC within RR >= 0.260 um.")

Executing: drc(rr pc (sep < 0.28) "GRRR5: RR to adjacent PC >= 0.280 um.")

Executing: drc(rr gate ((0 < sep) < 0.5) "GRRR6: RR to (PC over RX) space >= 0.500 um.")

Executing: errrr7 = geomButtOrOver(rr rx)
	   errorLayer(errrr7 "GRRR7: RR touching RX found!")

Executing: drc(rr rx ((0 < sep) < 0.28) "GRRR7: RR to adjacent RX >= 0.280 um.")

Executing: errrr8 = geomAndNot(geomOverlap(bp rr) rr)
	   errorLayer(errrr8 "GRRR8: BP within RR >= 0.000 um.")

Executing: bp_touch_rr = geomButtOrOver(bp rr)

Executing: errrr9bb = geomButtOrOver(bp_touch_rr bb)
	   errorLayer(errrr9bb "GRRR9: BP(touching RR) touching BB found!")

Executing: errrr9pc = geomButtOrOver(bp_touch_rr geomOutside(pc rr))
	   errorLayer(errrr9pc "GRRR9: BP(touching RR) touching PC(not touching RR) found!")

Executing: errrr10 = geomButtOrOver(geomAvoiding(pc op) rr)
	   errorLayer(errrr10 "GRRR10: PC(not touching OP) touching RR found!")

Executing: cont_rr = geomAnd(ca_all rr)

Executing: errrr11 = geomAndNot(cont_rr pd)
	   errorLayer(errrr11 "GRRR11: (CA/CABAR over RR) not covered by PD found!")

Executing: drc(rp (width < 0.8) "GRRP1: RP width >= 0.800 um.")

Executing: drc(rp (sep < 0.8) "GRRP2: RP space >= 0.800 um.")

Executing: drc(rp (notch < 0.8) "GRRP2: RP notch >= 0.800 um.")

Executing: pc_strad_rp = geomStraddle(pc rp)
	   errorLayer(pc_strad_rp "GRRP4: PC straddling RP found!")

Executing: drc(rp pc (enc < 0.26) "GRRP4: PC within RP >= 0.260 um.")

Executing: drc(rp pc (sep < 0.28) "GRRP5: RP to adjacent PC >= 0.280 um.")

Executing: drc(rp gate ((0 < sep) < 0.5) "GRRP6: RP to (PC over RX) space >= 0.500 um.")

Executing: errrp7 = geomButtOrOver(rp rx)
	   errorLayer(errrp7 "GRRP7: RP touching RX found!")

Executing: drc(rp rx ((0 < sep) < 0.28) "GRRP7: RP to adjacent RX >= 0.280 um.")

Executing: errrp8 = geomAndNot(geomOverlap(bp rp) rp)
	   errorLayer(errrp8 "GRRP8: BP within RP >= 0.000 um.")

Executing: bp_touch_rp = geomButtOrOver(bp rp)

Executing: errrp9bb = geomButtOrOver(bp_touch_rp bb)
	   errorLayer(errrp9bb "GRRP9: BP(touching RP) touching BB found!")

Executing: errrp9pc = geomButtOrOver(bp_touch_rp geomOutside(pc rp))
	   errorLayer(errrp9pc "GRRP9: BP(touching RP) touching PC(not touching RP) found!")

Executing: errrp10 = geomButtOrOver(geomAvoiding(pc op) rp)
	   errorLayer(errrp10 "GRRP10: PC(not touching OP) touching RP found!")

Executing: cont_rp = geomAnd(ca_all rp)

Executing: errrp11 = geomAndNot(cont_rp pd)
	   errorLayer(errrp11 "GRRP11: (CA/CABAR over RP) not covered by PD found!")

Executing: err_reshv1 = geomAvoiding(pc_under_op_non_rec rr)
	   errorLayer(err_reshv1 "GRSERP1: (Non rectangular (PC intersect OP)) must touch RR.")

Executing: pc_op_rr_serp = geomAnd(geomAnd(geomAnd(pc op) rr) pc_under_op_non_rec)

Executing: pc_serp_conve = geomGetCorner(pc_op_rr_serp convex)

Executing: err_serp7_1 = geomSize(geomGetEdge(pc_op_rr_serp) -0.01)

Executing: err_serp7_2 = geomGetEdge(pc_op_rr_serp coincident geomAvoiding(err_serp7_1 p...

Executing: err_serp7 = geomGetLength(err_serp7_2 (ignore == 0.24))
	   errorLayer(err_serp7 "GRSERP7: (((PC over OP) over RR) over (Non rectangular (PC intersect OP)) notches == 0.240.")

Executing: ca_serp = geomButtOrOver(ca geomButtOrOver(pc pc_under_op_non_rec))

Executing: drc(ca_serp op (sep < 0.32) "GRSERP10: (CA touching (PC touching (Non rectang...

Executing: op_size = geomSize(op 0.52)

Executing: err_reshv11 = geomAndNot(ca_serp op_size)
	   errorLayer(err_reshv11 "GRSERP11: (CA touching (PC touching (Non rectangular (PC intersect OP)))) must be within (OP expanded by 0.52) >= 0.0000 um.")

Executing: careshved_size = geomSize(geomGetEdge(ca_serp) 0.31)

Executing: err_reshv12 = geomAndNot(careshved_size geomAndNot(pd op))
	   errorLayer(err_reshv12 "GRSERP12: (CA touching (PC touching (Non rectangular (PC intersect OP)))) expanded by 0.31 per edge) must be within (PD not over OP) >= 0.0000 um.")

Executing: pd_reshv = geomButtOrOver(pd pc_under_op_non_rec)

Executing: err_reshv13_butt = geomButting(pd_reshv op)
	   errorLayer(err_reshv13_butt "GRSERP13: (PD touching (PC touching (Non rectangular (PC intersect OP)))) abutting OP is prohibited.")

Executing: err_reshv13 = geomAvoiding(pd_reshv op)
	   errorLayer(err_reshv13 "GRSERP13: (PD touching (PC touching (Non rectangular (PC intersect OP)))) must touch OP.")

Executing: drc(pd ca_serp (enc < 0.34) "GRSERP15: (CA touching (PC touching (Non rectang...

Executing: pc_under_op_rec = geomGetRectangle(pc_under_op)

Executing: rr_serp = geomButtOrOver(rr pc_under_op_non_rec)

Executing: err_serp16 = geomButtOrOver(rr_serp pc_under_op_rec)
	   errorLayer(err_serp16 "GRSERP16: (RR touching (Non rectangular (PC intersect OP)))  cannot touch (RR touching (rectangular (PC intersect OP))).")

Executing: drc(k1 (width < 5.0) "GRKX1: K1 width (min) >= 5.000 um.")

Executing: v1_strad_k1 = geomStraddle(v1 k1)
	   errorLayer(v1_strad_k1 "GRKX2: V1 straddling K1 found!")

Executing: drc(k1 v1 (enc < 0.5) "GRKX2: V1 within K1 >= 0.5000 um.")

Executing: drc(k1 (sep < 5.5) "GRKX3: K1 space >= 5.500 um.")

Executing: errkx4 = geomButtOrOver(k1 m1)
	   errorLayer(errkx4 "GRKX4: K1 touching M1 found!")

Executing: drc(k1 m1 ((0 < sep) < 1.0) "GRKX4: K1 to M1 space >= 1.000 um.")

Executing: v1_k1 = geomAnd(v1 k1)

Executing: errkx5 = geomEnclose(k1 geomSize(geomSize(v1_k1 0.28) -0.28) (keep > 2))
	   errorLayer(errkx5 "GRKX5: More than ONE set of contacts found on a K1 resistor!")

Executing: k1_res_end = geomAnd(geomSize(v1_k1 1.0) k1)

Executing: k1_v1_set = geomSize(v1_k1 1.1)

Executing: k1_edge_set = geomSize(geomStretch(k1 -2.4) 0.1 edges)

Executing: k1_and_set = geomAnd(geomSize(geomButtOrOver(k1_edge_set k1_v1_set) 2.4) k1)

Executing: errkx6 = geomGetLength(k1_and_set (keep > 30))
	   errorLayer(errkx6 "GRKX6: K1 width (max) <= 30.000 um.")

Executing: k1_polygon = geomGetPolygon(k1)
	   errorLayer(k1_polygon "GRKX8: Non-rectangular K1 found!")

Executing: k1_45 = geomGetAngledEdge(k1 (keep == 45) fig)
	   errorLayer(k1_45 "GRKX8: 45 degree K1 found!")

Executing: v1_contact = geomSize(geomSize(v1_k1 0.14) -0.14)

Executing: errkx9 = geomInside(v1_contact geomEnclose(k1_res_end v1_contact (keep > 1)))
	   errorLayer(errkx9 "GRKX9: V1(touching K1) space == 0.28 um. (error >)")

Executing: k1_over_m2 = geomAnd(geomOverlap(geomAnd(k1 m2) v1) LM2_5)

Executing: k1_over_mt = geomAnd(geomOverlap(geomAnd(k1 mt) v1) LM1)

Executing: k1m2_one_v1 = geomAnd(geomButtOrOver(k1_over_m2 v1 (keep == 1)) LM2_5)
	   errorLayer(k1m2_one_v1 "GRKX10: K1/M2 intersection only enclosing one V1 shape found!")

Executing: k1mt_one_v1 = geomAnd(geomButtOrOver(k1_over_mt v1 (keep == 1)) LM1)
	   errorLayer(k1mt_one_v1 "GRKX10: K1/MT intersection only enclosing one V1 shape found!")

Executing: errkx11 = geomButtOrOver(k1 op)
	   errorLayer(errkx11 "GRKX11: K1 touching OP found!")

Executing: errdg0 = geomXor(dgv geomButtOrOver(dg dgv))
	   errorLayer(errdg0 "GRDG0: DGV must be within DG == 0.000 um.")

Executing: errdg1 = geomGetAngledEdge(dg ((0 < keep) < 90) fig)
	   errorLayer(errdg1 "GRDG1: Non-orthagonal DG found!")

Executing: gate_dg = geomAnd(gate dg)

Executing: rx_touch_dg = geomButtOrOver(rx dg)

Executing: errdg2b_rect = geomGetPolygon(gate_dg)
	   errorLayer(errdg2b_rect "GRDG2b: Non-rectangular ((PC over RX) over DG) found!")

Executing: errdg2b_45 = geomGetAngledEdge(gate_dg (keep == 45) fig)
	   errorLayer(errdg2b_45 "GRDG2b: 45 degree ((PC over RX) over DG) found!")

Executing: pc_touch_dg = geomButtOrOver(pc dg)

Executing: drc(pc_touch_dg rx (sep < 0.08) "GRDG3: (PC touching DG) to RX space >= 0.080...

Executing: gate_strad_dg = geomStraddle(gate dg)
	   errorLayer(gate_strad_dg "GRDG4: (PC over RX) straddling DG found!")

Executing: drc(dg gate (enc < 0.5) "GRDG4: (PC over RX) within DG >= 0.500 um.")

Executing: drc(gate dg (sep < 0.5) "GRDG5: (PC over RX) to DG space >= 0.500 um.")

Executing: drc(dg (width < 0.44) "GRDG6: DG width >= 0.440 um.")

Executing: drc(dg (sep < 0.44) "GRDG7: DG space >= 0.440 um.")

Executing: drc(dg (notch < 0.44) "GRDG7: DG notch >= 0.440 um.")

Executing: diff_dg = geomButtOnly(geomButtOrOver(diff dg) gate)

Executing: errdg8a = geomAnd(geomAndNot(geomAndNot(geomAnd(drc(diff_dg (sep < 0.4)) dg) ...
	   errorLayer(errdg8a "GRDG8a: (((PC over RX) over DG) not over DGV) width for NFET >= 0.400 um.")

Executing: errdg8b = geomAnd(geomAnd(geomAndNot(geomAnd(drc(diff_dg (sep < 0.4)) dg) dgv...
	   errorLayer(errdg8b "GRDG8b: (((PC over RX) over DG) not over DGV) width for PFET >= 0.400 um.")

Executing: errdgv8a = geomAnd(geomAndNot(geomAnd(geomAnd(drc(diff_dg (sep < 0.32)) dg) d...
	   errorLayer(errdgv8a "GRDGV8a: (((PC over RX) over DG) over DGV) width for NFET >= 0.320 um.")

Executing: errdgv8b = geomAnd(geomAnd(geomAnd(geomAnd(drc(diff_dg (sep < 0.32)) dg) dgv)...
	   errorLayer(errdgv8b "GRDGV8b: (((PC over RX) over DG) over DGV) width for PFET >= 0.320 um.")

Executing: drc(gate_dg (sep < 0.3) "GRDG8c: ((PC over RX) over DG) space >= 0.300 um.")

Executing: drc(ca_rx gate_dg (sep < 0.16) "GRDG8d: (CA over RX) to adj ((PC over RX) ove...

Executing: drc(dg nw (enc < 0.44) "GRDG9: DG overlap past NW >= 0.440 um.")

Executing: drc(dg nr (sep < 0.7) "GRDG10 : DG to NR >= 0.700 um.")

Executing: errdg10 = geomButtOrOver(dg nr)
	   errorLayer(errdg10 "GRDG10: DG touching NR found!")

Executing: drc(dg pr (sep < 0.7) "GRDG11 : DG to PR >= 0.700 um.")

Executing: errdg11 = geomButtOrOver(dg pr)
	   errorLayer(errdg11 "GRDG11: DG touching PR found!")

Executing: drc(dg nw ((0 < ovlp) < 0.44) "GRDG14: DG overlap of NW >= 0.440 um.")

Executing: drc(dg pc_under_op ((0 < sep) < 0.7) "GRDG15: DG to (OP intersect PC) space >...

Executing: drc(nw dg (enc < 0.44) "GRDG16: NW overlap past DG >= 0.440 um.")

Executing: errdg21 = geomButtOrOver(dg bb)
	   errorLayer(errdg21 "GRDG21: DG touching BB found!")

Executing: pc_ng_dg = geomAnd(pc_near_gt dg)

Executing: errdg50 = geomAnd(gate_dg drc(pc_ng_dg (sep < 0.5)))
	   errorLayer(errdg50 "GRDG50: ((RX over PC) over DG) width >= 0.500 um.")

Executing: drc(rx_touch_dg rx ((0 < sep) < 0.38) "GRDG52: (RX touching DG) to RX space >...

Executing: rx_over_dg = geomAnd(rx dg)

Executing: errdg110 = geomAndNot(geomSize(geomGetEdge(pc over rx_over_dg) 0.38) rx)
	   errorLayer(errdg110 "GRDG110: (RX over DG) overlap past PC >= 0.380 um.")

Executing: pdiff_in_dg = geomButtOrOver(pdiff_in_nw dg)

Executing: drc(nw pdiff_in_dg (enc < 0.56) "GRDG260: (RX(P+) touching DG) within NW >= 0...

Executing: ndiff_in_dg = geomButtOrOver(ndiff dg)

Executing: nw_touch_dg = geomButtOrOver(nw dg)

Executing: drc(ndiff_in_dg nw (sep < 0.56) "GRDG265a: (RX(N+) touching DG) to adjacent N...

Executing: drc(ndiff_in_dg bb (sep < 0.56) "GRDG265a1: (RX(N+) touching DG) to adjacent ...

Executing: errdg265b_all = drc(ndiff nw_touch_dg (sep < 0.56))

Executing: errdg265b = geomOutside(errdg265b_all nw_touch_dg)
	   errorLayer(errdg265b "GRDG265b: RX(N+) to adjacent (NW touching DG) >= 0.560 um.")

Executing: pdiff_dg268 = geomButtOrOver(geomAndNot(pdiff_in_nw geomOr(esdummy esd_cdm)) dg)

Executing: ndiff0 = geomAndNot(ndiff geomOr(esdummy esd_cdm))

Executing: nwc_fet0 = geomAndNot(geomButtOrOver(geomStraddle(ndiff0 nw) pc) nw)

Executing: njct0 = geomOr(geomOutside(geomButtOrOver(ndiff0 ca_all) geomOr(nw bb bfmoat)...

Executing: njct_dg268 = geomButtOrOver(njct0 dg)

Executing: njct_dg268_in_pi = geomAnd(njct_dg268 pi)

Executing: njct_dg268_in_sx = geomAndNot(njct_dg268 pi)

Executing: errdg268a = geomSepInside(pdiff_dg268 20.0 nwc_over_nw nw)
	   errorLayer(errdg268a "GRDG268a: (RX(in BP)touch DG) to RX(not BP) (same NW) space <= 20.000 um.")

Executing: geomHoles(sx_block)

Executing: VOID_T?12540 = geomOutside(WELL_T?12539 sxcont_268b)

Executing: GATE_T?12541 = geomAnd(njct_dg268_in_sx VOID_T?12540)

Executing: WELL_T?12542 = geomAndNot(njct_dg268_in_sx GATE_T?12541)
  PD time stat after utlPolygonMerge 2.63dt 9dw 2.66t 245.6meg 0pf 1098.7rss 0r 189936w

Executing: geomSepOutside(WELL_T?12542 20.0 sxcont_268b sx_block)

Executing: geomSepOutside

Executing: geomSepOutside

Executing: errdg268b_sx = errorLayer(T?12550 "_GeomSepOutside(njct_dg268_in_sx 20.000 sx...

Executing: VOID_T?12553 = geomOutside(WELL_T?12552 picont_268b)

Executing: GATE_T?12554 = geomAnd(njct_dg268_in_pi VOID_T?12553)

Executing: WELL_T?12555 = geomAndNot(njct_dg268_in_pi GATE_T?12554)
  PD time stat after utlPolygonMerge 0.00dt 0dw 2.66t 245.6meg 0pf 1098.7rss 0r 8w

Executing: geomSepOutside(WELL_T?12555 20.0 picont_268b sx_block)

Executing: geomSepOutside

Executing: geomSepOutside

Executing: errdg268b_pi = errorLayer(T?12563 "_GeomSepOutside(njct_dg268_in_pi 20.000 pi...

Executing: errdg268b = geomOr(errdg268b_sx errdg268b_pi)
	   errorLayer(errdg268b "GRDG268b: (RX(no BP)touch DG) to Substrate Contact space <= 20.000 um.")

Executing: drc(pd (width < 0.34) "GRPD1: PD width >= 0.340 um.")

Executing: drc(pd (sep < 0.34) "GRPD2a: PD space >= 0.340 um.")

Executing: drc(pd (notch < 0.34) "GRPD2a: PD notch >= 0.340 um.")

Executing: sbd_anode = geomButtOrOver(pd_enclosure sbd)

Executing: drc(sbd_anode (width < 0.7) "GRPD3: PDHOLE width (for SBD anode) >= 0.700 um.")

Executing: pd_pd4 = geomAndNot(pd geomButtOrOver(pd geomAnd(pd rx)))

Executing: errpd4 = geomButtOnly(pd_pd4 rx)

Executing: errpd4bis = drc(pd_pd4 rx (sep < 0.36) withSingularPoint)

Executing: errorLayer(geomOr(errpd4 errpd4bis) "GRPD4: PD to adj RX >= 0.360 um.")

Executing: pd_sbd = geomButtOrOver(pd sbd)

Executing: drc(pd_sbd rx (ovlp < 0.32) "GRPD5: RX intersect PD (SBD guardring) >= 0.320 ...

Executing: rx_not_sbd = geomAndNot(rx sbd)

Executing: rx_not_sbd_bp2 = geomAndNot(rx geomOr(sbd bp2nd))

Executing: rx_strad_pd = geomStraddle(rx_not_sbd_bp2 pd)
	   errorLayer(rx_strad_pd "GRPD6: RX(not over (SBD or BP2ND)) straddling PD found!")

Executing: rx_sbd = geomButtOrOver(rx pd_sbd)

Executing: drc(pd rx_not_sbd_bp2 (enc < 0.2) "GRPD6: RX(not over (SBD or BP2ND)) within ...

Executing: drc(pd_sbd rx_sbd (enc < 0.36) "GRPD6a: PD overlap past RX(SBD guardring) >= ...

Executing: drc(pd rx_not_sbd (enc < 0.14) "GRPD6b: RX(not over SBD) within PD >= 0.140 u...

Executing: drc(pd pc (enc < 0.28) "GRPD7: PD overlap past PC >= 0.280 um.")

Executing: errpd9b = geomGetAngledEdge(pd ((0 < keep) < 90) fig)
	   errorLayer(errpd9b "GRPD9b: Non-orthogonal PD shape found!")

Executing: drc(pd pc (sep < 0.28) "GRPD10a: PD to adjacent PC >= 0.280 um.")

Executing: drc(geomAnd(pd rr) pc (sep < 0.28) "GRPD10b: (PD over RR) to  PC >= 0.280 um.")

Executing: drc(pd_enclosure (area < 0.32) "GRPD11: PD enclosed area >= 0.320 sq.um.")

Executing: ca_sbd = geomButtOrOver(geomAndNot(ca rn) sbd)

Executing: errpd14 = geomAndNot(ca_sbd pd_sbd)
	   errorLayer(errpd14 "GRPD14: CA(not over RN) not within PD(SBD) found!")

Executing: drc(pd_sbd ca_sbd (enc < 0.28) "GRPD14: CA(not over RN) must be within PD(SBD...

Executing: errpd15 = geomButtOrOver(geomButtOrOver(rx pd_sbd) bp)
	   errorLayer(errpd15 "GRPD15: (RX touching PD(touching SBD)) touching BP(drawn) found!")

Executing: errpd16 = geomButtOrOver(pd_sbd geomOr(pc geomOutside(rx pd)))
	   errorLayer(errpd16 "GRPD16: PD(touching SBD) touching {PC or (RX not touching PD)} found!")

Executing: drc(rn (width < 0.8) "GRRN1: RN width >= 0.800 um.")

Executing: drc(rn (sep < 1.28) "GRRN2: RN space >= 1.280 um.")

Executing: drc(rn (notch < 1.28) "GRRN2: RN notch >= 1.280 um.")

Executing: drc(rn rx (sep < 0.42) "GRRN3: RN to adjacent RX >= 0.420 um.")

Executing: rx_strad_rn = geomStraddle(rx rn)
	   errorLayer(rx_strad_rn "GRRN4: RX straddling RN found!")

Executing: drc(rn rx (enc < 0.14) "GRRN4: RX within RN >= 0.140 um.")

Executing: errrn5 = geomOverlap(geomAnd(rx rn) geomAnd(geomSize(bpgen 0.01) geomAnd(rx r...
	   errorLayer(errrn5 "GRRN5a: (RX within RN) touching BP found!")

Executing: errrn6 = geomOverlap(rn geomAnd(geomSize(geomOr(pdiff_in_nw pdiff_in_bb) 0.01...
	   errorLayer(errrn6 "GRRN6: RN touching a P+ Junction found!")

Executing: errrn7 = geomButtOrOver(rn sxcont)
	   errorLayer(errrn7 "GRRN7: RN touching a Substrate Contact found!")

Executing: errrn10pd = geomAnd(rx_over_rn pd)
	   errorLayer(errrn10pd "GRRN10: (RN over RX) touching PD found!")

Executing: errrn11 = geomAndNot(rn ns)
	   errorLayer(errrn11 "GRRN11: RN not within NS found!")

Executing: drc(rn nw (sep < 1.28) "GRRN12: RN to NW space >= 1.280 um.")

Executing: drc(rn_or_nw (width < 0.7) "GRRN13: (RN union NW) width >= 0.700 um.")

Executing: drc(ns (width < 4.5) "GRNS1: NS width >= 4.500 um.")

Executing: drc(ns (sep < 3.68) "GRNS2: NS space >= 3.680 um.")

Executing: drc(ns (notch < 3.68) "GRNS2: NS notch >= 3.680 um.")

Executing: errns4b = geomButtOrOver(ns nw)
	   errorLayer(errns4b "GRNS4b: NS touching NW found!")

Executing: drc(ns nw ((0 < sep) < 3.68) "GRNS5: NS to adjacent NW space >= 3.680 um.")

Executing: errcpns7 = geomAndNot(geomSize(geomButtOrOver(bb ns) -2.1) ns)
	   errorLayer(errcpns7 "GRCPNS7: NS within BB == 2.100 um.(error >)")

Executing: drc(bb ns (enc < 2.1) "GRCPNS7: NS within BB == 2.100 um.(error <)")

Executing: errns9 = geomAndNot(ns bb)
	   errorLayer(errns9 "GRNS9: NS not covered by BB found!")

Executing: drc(ns bb (sep < 5.2) "GRNS10: NS to adjacent BB >= 5.200 um.")

Executing: rx_jdvar = geomOr(rx ns)

Executing: errns15a_bb = geomEnclose(bb rx_jdvar (keep > 1))
	   errorLayer(errns15a_bb "GRNS15a: More than one (RX union NS) shape in the same BB found!")

Executing: errns16 = geomOutside(ns geomAnd(rx rn))
	   errorLayer(errns16 "GRNS16: NS not enclosing RX(over RN) found!")

Executing: errns21b_pd = geomAnd(ns geomAndNot(rx_pd sbd))
	   errorLayer(errns21b_pd "GRNS21b: NS touching ((RX touching PD) not over SBD) found!")

Executing: errns21b_bp = geomAnd(ns geomAndNot(rx_bp sbd))
	   errorLayer(errns21b_bp "GRNS21b: NS touching ((RX touching BP) not over SBD)found!")

Executing: drc(ns rx_pd (sep < 2.76) "GRNS21b: NS to (RX touching PD) space >= 2.760 um.")

Executing: drc(ns rx_bp (sep < 2.76) "GRNS21b: NS to (RX touching BP) space >= 2.760 um.")

Executing: errns26 = geomAvoiding(ns geomOr(jd pd_enclosure))
	   errorLayer(errns26 "GRNS26: NS not touching (JD (HAVAR) or PD hole (SBD)) found!")

Executing: bb_butt_nw = geomButting(bb nw)

Executing: bb_not_schky = geomAndNot(bb schky)

Executing: bb_not_schky_butt_nw = geomButting(bb_not_schky nw)

Executing: bb_not_schky_nobutt_nw = geomAndNot(bb_not_schky bb_not_schky_butt_nw)

Executing: bb_touch_schky = geomButtOrOver(bb geomSize(schky 0.001))

Executing: drc(bb_not_schky_nobutt_nw (width < 2.76) "GRBB1: ((BB not over SCHY) not abu...

Executing: drc(bb_touch_schky (width < 0.98) "GRBB1b: BB(touching SCHKY) width >= 0.980 ...

Executing: errorLayer(geomWidth(bb_butt_nw (keep > 1.0)) "GRBB1a: BB(abutting NW) width == 1.000 um.(error >)")

Executing: drc(bb_butt_nw (width < 1.0) "GRBB1a: BB(abutting NW) width == 1.000 um.(erro...

Executing: bb_and_nw = geomAnd(bb nw)

Executing: errbb2_0 = drc(bb_not_nw (sepNotch < 2.0))

Executing: errbb2_1 = drc(bb_not_nw bb_and_nw (sep < 2.0))

Executing: errorLayer(geomOr(errbb2_0 errbb2_1) "GRBB2: (BB to BB space) not over NW (including notch)  >= 2.00")

Executing: errbb2a = drc(bb_and_nw (sepNotch < 0.5))
	   errorLayer(errbb2a "GRBB2a: (BB to BB space) over NW (including notch)   >= 0.50")

Executing: drc(bb_not_schky (area < 9.6) "GRBB6: (BB not over SCHKY) area >= 9.600 sq.um.")

Executing: errbc6b = geomAndNot(schky nw)
	   errorLayer(errbc6b "GRBB6a: SCHKY must be covered by NW")

Executing: bb_enclosure = geomAndNot(geomHoles(bb) bb)

Executing: drc(bb_enclosure (area < 4.0) "GRBB7: BB enclosed area >= 4.000 sq.um.")

Executing: errbb34_over = geomAnd(geomAndNot(bb schky) nw)
	   errorLayer(errbb34_over "GRBB34: BB over NW found!")

Executing: drc(geomAndNot(bb schky) nw ((0 < sep) < 0.01) withSingularPoint "GRBB34: BB ...

Executing: errbb34a1 = geomOr(ns nw rn)

Executing: errbb34a2 = geomButtOrOver(bb errbb34a1 (keep > 1))
	   errorLayer(errbb34a2 "GRBB34a: BB touching more than one (union(union(NS, NW), RN)) shapes not allowed !")

Executing: errbb35a = geomButtOrOver(bb bp)
	   errorLayer(errbb35a "GRBB35a: BB touching BP found!")

Executing: drc(bb bp ((0 < sep) < 0.44) "GRBB35: BB to adjacent BP >= 0.440 um.")

Executing: bb_ind = geomButtOrOver(bb ind_filt)

Executing: bb_pcres = geomAnd(bb geomSize(pc_res 0.4))

Executing: bp_pcres = geomAnd(bp geomSize(pc_res 0.4))

Executing: serp_bb37 = geomAnd(geomOr(bb bp) geomAnd(rr geomSize(pc_res 0.8)))

Executing: errbb37 = geomAndNot(pd geomOr(bb_ind bb_pcres bp_pcres sbd bp2nd serp_bb37))
	   errorLayer(errbb37 "GRBB37: PD not within {[BB touch IND_FLT] or [(BP or BB) over (PC(res)+ 0.40)] or SBD or BP2ND or ((BB or BP) intersect (RR intersect (PC touching OP)expanded by 0.8))} found!")

Executing: errbb38 = geomAvoiding(geomAndNot(geomButtOrOver(geomAndNot(rx schky) bb) ind...
	   errorLayer(errbb38 "GRBB38: (((RX not over SCHKY) touching BB) not over IND_FILT) must be touching NS")

Executing: pc_strad_bb = geomStraddle(pc bb)
	   errorLayer(pc_strad_bb "GRBB41: PC straddling BB found!")

Executing: drc(bb pc (enc < 0.5) "GRBB41: PC within BB >= 0.500 um.")

Executing: pc_touch_pd = geomButtOrOver(pc pd)

Executing: pc_touch_rr = geomButtOrOver(pc rr)

Executing: pc_touch_rp = geomButtOrOver(pc rp)

Executing: errpbn10_pd = geomAndNot(pc_touch_pd bb_or_bp)
	   errorLayer(errpbn10_pd "GRPBN10: PC(touching PD) not within {BP or BB} found!")

Executing: errpbn10_rr = geomAndNot(pc_touch_rr bb_or_bp)
	   errorLayer(errpbn10_rr "GRPBN10: PC(touching RR) not within {BP or BB} found!")

Executing: errpbn10_rp = geomAndNot(pc_touch_rp bb_or_bp)
	   errorLayer(errpbn10_rp "GRPBN10: PC(touching RP) not within {BP or BB} found!")

Executing: drc(bb_or_bp pc_touch_pd (enc < 0.4) "GRPBN10: PC(touch PD) must be within {B...

Executing: drc(bb_or_bp pc_touch_rr (enc < 0.4) "GRPBN10: PC(touch RR) must be within {B...

Executing: drc(bb_or_bp pc_touch_rp (enc < 0.4) "GRPBN10: PC(touch RP) must be within {B...

Executing: errpbn11 = geomAndNot(geomAnd(geomButtOrOver(pc ca_all) bb) geomOr(pd rr rp))
	   errorLayer(errpbn11 "GRPBN11: (PC(touching CA/CABAR) intersect BB) not within {PD/RR/RP} found!")

Executing: drc(pc bb (sep < 0.32) "GRPBN12: PC to adjacent BB space >= 0.320 um.")

Executing: errtw1a = geomGetAngledEdge(pi ((0 < keep) < 90) fig)
	   errorLayer(errtw1a "GRTW01a: Non-orthagonal PI found!")

Executing: drc(pi (width < 3.2) "GRTW01: PI width >= 3.20 um.")

Executing: err_tw02 = geomButtOrOver(nw pi (keep > 1))

Executing: drc(geomOverlap(pi err_tw02) (sep < 4.0) "GRTW02: PI space (PI shapes touchin...

Executing: drc(pi (notch < 4.0) "GRTW02: PI notch (PI shapes touching the same NW ) >= 4...

Executing: pinonw = geomAvoiding(pi nw)

Executing: err_tw02_a = geomButtOrOver(nw pi (keep == 1))

Executing: err_tw02_b = drc(geomOverlap(pi err_tw02_a) (sep < 4.3) withSingularPoint)

Executing: err_tw02_c = drc(pinonw (sepNotch < 4.3) withSingularPoint)

Executing: errorLayer(geomOr(err_tw02_b err_tw02_c) "GRTW02: PI space >= 4.30 um.")

Executing: errtw03 = geomButtOrOver(pi eval(level))
	   errorLayer(errtw03 errMsgtw03)

Executing: errtw03 = geomButtOrOver(pi eval(level))
	   errorLayer(errtw03 errMsgtw03)

Executing: errtw03 = geomButtOrOver(pi eval(level))
	   errorLayer(errtw03 errMsgtw03)

Executing: errtw03 = geomButtOrOver(pi eval(level))
	   errorLayer(errtw03 errMsgtw03)

Executing: errtw3apd = geomButtOrOver(pi geomAndNot(pd bp2nd))
	   errorLayer(errtw3apd "GRTW03a: PI touching  (PD not over BP2ND) found!")

Executing: errtw4 = geomAndNot(geomSize(geomStretch(geomGetEdge(pi) -0.02) -0.02) nw)
	   errorLayer(errtw4 "GRTW04: PI(edge) not covered by NW found!")

Executing: drc(pi nw (ovlp < 1.0) "GRTW05: PI overlap of NW >= 1.00 um.")

Executing: drc(nw pi (enc < 1.1) "GRTW06: NW overlap past PI >= 1.10 um.")

Executing: errtw10a = geomButtOrOver(pi ns)
	   errorLayer(errtw10a "GRTW10a: PI touching NS found!")

Executing: errtw10b = geomAndNot(drc(pi bb ((0 < sep) < 3.2)) nw)
	   errorLayer(errtw10b "GRTW10: (PI to adjacent BB) not over NW >= 3.20 um.")

Executing: drc(pi ns ((0 < sep) < 5.52) "GRTW10a: PI to adjacent NS >= 5.52 um.")

Executing: errtw10b = geomOr(geomGetEdge(geomAnd(bb pi) outside geomOr(nw bp2nd)) geomGe...
	   errorLayer(errtw10b "GRTW10b: all (BB over PI) edges must abut (NW or BP2ND)")

Executing: errtw10a1 = geomAnd(drc(pi bb ((0 < sep) < 1.1)) nw)
	   errorLayer(errtw10a1 "GRTW10a1: (PI to adjacent BB) over NW >= 1.10 um.")

Executing: errtw10c = geomOverlap(pi_ovr_nw bb)
	   errorLayer(errtw10c "GRTW10a1: (PI over NW) overlapping BB found!")

Executing: pi_bb_over_nw = geomAnd(geomButtOrOver(pi bb) nw)

Executing: geomHoles(pi_ovr_nw)

Executing: pi_edg_check = geomSize(geomGetEdge(pi_bb_over_nw butting pi_ovr_nw_hole) 0.01)

Executing: errtw10d = geomAndNot(pi_edg_check bb)
	   errorLayer(errtw10d "GRTW10a1: All (((PI touching BB) over NW) edges touching (PI over NW) hole) must abut BB.")

Executing: pdinnw_vts = geomButtOrOver(pdiff_in_nw vtsens)

Executing: drc(pdinnw_vts pi (sep < 1.0) "GRTW17a: (((RX over BP) over VTSENS) over NW) ...

Executing: pi_319 = geomSize(pi 3.19)

Executing: errtw18 = geomButting(drc(pi nw ((0 < sep) < 3.2) diffNet) geomAnd(pi geomBut...
	   errorLayer(errtw18 "GRTW18: PI to NW space >= 3.200 um.")

Executing: errpi5 = geomOutside(geomAndNot(pi nw) geomOr(sxcont geomAnd(rx pd)))
	   errorLayer(errpi5 "GRTW19: PI(not over NW) not touching a Pwell contact found!")

Executing: nw_pi = geomButtOrOver(nw pi)

Executing: ndiff_in_pi = geomAnd(ndiff pi)

Executing: ndiff_indg_tpi = geomAnd(ndiff_in_dg pi)

Executing: drc(pdiff_in_nw pi_not_nw (sep < 0.42) "GRTW260: ((RX over BP) over NW) to (P...

Executing: errtw265 = geomOutside(drc(ndiff_in_pi nw_pi (sep < 0.42)) nw_pi)
	   errorLayer(errtw265 "GRTW265: (RX(not over BP) over PI) to adjacent (NW touching PI) >= 0.420 um.")

Executing: drc(ndiff_indg_tpi nw_pi (sep < 0.56) "GRTW265a: ((RX(not over BP) touch DG) ...

Executing: drc(sxc_not_pi nw_pi (sep < 0.16) "GRTW266: (RX(over BP) not over PI) to (NW ...

Executing: diff_zvt = geomButtOrOver(diff zerovt)

Executing: diff_zvt_dg = geomAnd(geomButtOrOver(diff zerovt) dg)

Executing: err1a = geomAnd(drc(diff_zvt (sep < 0.7)) zerovt)
	   errorLayer(err1a "GR1a: (Gate over ZEROVT) width >= 0.70 um.")

Executing: err1b = geomAnd(drc(diff_zvt_dg (sep < 0.8)) zerovt)
	   errorLayer(err1b "GR1b: ((Gate over ZEROVT) over DG) width >= 0.80 um.")

Executing: ngate_zvt = geomButtOrOver(ngate zerovt)

Executing: pc_near_gt_zvt = geomButtOrOver(pc_near_gt ngate_zvt)

Executing: zvtgt_width_fail = drc(pc_near_gt_zvt (sep < 3.0) opposite parallel)

Executing: err10a = geomAnd(ngate_zvt zvtgt_width_fail)
	   errorLayer(err10a "GR10a: ((RX under PC) touching ZEROVT) width >= 3.00 um.")

Executing: err122a = geomGetPolygon(geomAnd(gate zerovt))
	   errorLayer(err122a "GR122a: Polygonal (PC over RX) (bent gates) over ZEROVT found!")

Executing: err280a = geomGetAngledEdge(zerovt ((0 < keep) < 90) fig)
	   errorLayer(err280a "GR280a: Non-orthagonal ZEROVT shapes found!")

Executing: drc(zerovt (width < 2.4) "GR280: ZEROVT width >= 2.40 um.")

Executing: drc(zerovt (sep < 1.88) "GR282: ZEROVT space >= 1.88 um.")

Executing: drc(zerovt (notch < 1.88) "GR282: ZEROVT notch >= 1.88 um.")

Executing: err283 = geomButtOrOver(zerovt rx (keep > 1))
	   errorLayer(err283 "GR283: ZEROVT touching more than one RX shape found!")

Executing: zvt_not_rx = geomAndNot(zerovt rx)
	   errorLayer(zvt_not_rx "GR284: ZEROVT not within RX found!")

Executing: err284_gt = geomAndNot(geomSize(geomButtOrOver(rx zerovt) -0.3) zerovt)
	   errorLayer(err284_gt "GR284: ZEROVT must be within RX == 0.30 um. (error >)")

Executing: drc(rx zerovt (enc < 0.3) "GR284: ZEROVT must be within RX == 0.30 um. (error...

Executing: err286 = geomButtOrOver(bp zerovt)

Executing: err286bis = drc(bp zerovt (sep < 0.01) withSingularPoint)

Executing: errorLayer(geomOr(err286 err286bis) "GR286: BP touching ZEROVT found!")

Executing: drc(zerovt rx ((0 < sep) < 1.3) "GR288: ZEROVT to adjacent RX >= 1.30 um.")

Executing: err289 = geomButtOrOver(zerovt nw)
	   errorLayer(err289 "GR289: ZEROVT touching NW found!")

Executing: err289a = geomButtOrOver(zerovt bb)

Executing: err289abis = drc(bb zerovt (sep < 0.01) withSingularPoint)

Executing: drc(zerovt nw ((0 < sep) < 1.66) "GR289: ZEROVT to NW space >= 1.66 um.")

Executing: drc(zerovt bb ((0 < sep) < 1.9) "GR289a: ZEROVT to BB space >= 1.90 um.")

Executing: errorLayer(geomOr(err289a err289abis) "GR289a: ZEROVT touching BB found!")

Executing: drc(zerovt gate (enc < 0.92) "GRZT1: ZEROVT overlap past (PC over RX) >= 0.92...

Executing: zvt_edge_out = geomSize(zerovt 0.01 edges)

Executing: zvt_halo_out = geomAndNot(geomSize(zerovt 0.01) zerovt)

Executing: zvt_corner_out = geomAndNot(zvt_halo_out zvt_edge_out)

Executing: zvt_edge_in = geomSize(zerovt -0.01 edges)

Executing: zvt_halo_in = geomAndNot(zerovt geomSize(zerovt -0.01))

Executing: zvt_corner_in = geomAndNot(zvt_halo_in zvt_edge_in)

Executing: zvt_corner_err = geomOverlap(zerovt geomAnd(geomSize(geomOr(zvt_corner_out zv...
	   errorLayer(zvt_corner_err "GRZT2: ZEROVT vertices over (PC over RX) found!")

Executing: drc(zerovt dg (sep < 1.2) "GRZT3: ZEROVT to adjacent DG >= 1.20 um.")

Executing: drc(zerovt pc_under_op (sep < 1.32) "GRZT4: ZEROVT to adjacent (PC under OP) ...

Executing: errzt5_jd = geomButtOrOver(zerovt jd)
	   errorLayer(errzt5_jd "GRZT5: ZEROVT touching JD found!")

Executing: errzt5_rp = geomButtOrOver(zerovt rp)
	   errorLayer(errzt5_rp "GRZT5: ZEROVT touching RP found!")

Executing: errzt5_rr = geomButtOrOver(zerovt rr)
	   errorLayer(errzt5_rr "GRZT5: ZEROVT touching RR found!")

Executing: drc(zerovt jd ((0 < sep) < 1.66) "GRZT5: ZEROVT to JD space >= 1.66 um.")

Executing: drc(zerovt rp ((0 < sep) < 1.66) "GRZT5: ZEROVT to RP space >= 1.66 um.")

Executing: drc(zerovt rr ((0 < sep) < 1.66) "GRZT5: ZEROVT to RR space >= 1.66 um.")

Executing: errzt6 = geomButtOrOver(zerovt pi)
	   errorLayer(errzt6 "GRZT6: ZEROVT touching PI found!")

Executing: drc(zerovt pi ((0 < sep) < 3.0) "GRZT6: ZEROVT to PI space >= 3.00 um.")

Executing: errzt9 = geomOr(geomButtOrOver(zerovt op) geomOverlap(zerovt geomAnd(geomSize...
	   errorLayer(errzt9 "GRZT9: ZEROVT touching OP found!")

Executing: drc(bfmoat (width < 10.0) "GR790: BFMOAT width >= 10.000 um.")

Executing: drc(bb bfmoat ((0 < sep) < 10.0) "GR792: BB to adjacent BFMOAT space >= 10.00...

Executing: drc(bfmoat ((0 < sep) < 10.0) "GR792: BFMOAT space >= 10.000 um.")

Executing: drc(bfmoat (notch < 10.0) "GR792: BFMOAT notch >= 10.000 um.")

Executing: drc(bfmoat nw ((0 < sep) < 2.0) "GR793: BFMOAT to adjacent NW space >= 2.000 ...

Executing: drc(bfmoat rx ((0 < sep) < 1.0) "GR795: BFMOAT to adjacent RX space >= 1.000 ...

Executing: drc(bfmoat zerovt ((0 < sep) < 2.0) "GR796: BFMOAT to adjacent ZEROVT space >...

Executing: err799bb = geomButtOrOver(bb bfmoat)
	   errorLayer(err799bb "GR799: BB touching BFMOAT found!")

Executing: err799nw = geomButtOrOver(nw bfmoat)
	   errorLayer(err799nw "GR799: NW touching BFMOAT found!")

Executing: err799pc = geomButtOrOver(pc bfmoat)
	   errorLayer(err799pc "GR799: PC touching BFMOAT found!")

Executing: err799rx = geomButtOrOver(rx bfmoat)
	   errorLayer(err799rx "GR799: RX touching BFMOAT found!")

Executing: err799ns = geomButtOrOver(ns bfmoat)
	   errorLayer(err799ns "GR799: NS touching BFMOAT found!")

Executing: err799nr = geomButtOrOver(nr bfmoat)
	   errorLayer(err799nr "GR799: NR touching BFMOAT found!")

Executing: err799pr = geomButtOrOver(pr bfmoat)
	   errorLayer(err799pr "GR799: PR touching BFMOAT found!")

Executing: err799pi = geomButtOrOver(pi bfmoat)
	   errorLayer(err799pi "GR799: PI touching BFMOAT found!")

Executing: m1_out_logo = geomAvoiding(m1 logobnd)

Executing: m2_out_logo = geomAvoiding(m2 logobnd)

Executing: mt_out_logo = geomAvoiding(mt logobnd)

Executing: err500b = geomWidth(m1 (keep > 35.0))
	   errorLayer(err500b "GR500b: M1 width (max) <= 35.000 um.")

Executing: drc(m1 (width < 0.24) withCornerTouch "GR500: M1 width (min) >= 0.240 um.")

Executing: m1_enclosure = geomAndNot(geomHoles(m1_not_ring) m1_not_ring)

Executing: drc(m1 (area < 0.172) "GR501a: M1 area >= 0.172 sq.um.")

Executing: drc(m1_enclosure (area < 0.705) "GR501b: M1 enclosed area >= 0.705 sq. um.")

Executing: drc(m1 (sep < 0.2) "GR502: M1 space >= 0.200 um.")

Executing: drc(m1 (notch < 0.2) "GR502: M1 notch >= 0.200 um.")

Executing: drcTable(m1_out_logo ((width > 1.6) (widthOutput m1_gt_160)))

Executing: drcTable(m2_out_logo ((width > 1.6) (widthOutput m2_gt_160)))

Executing: drcTable(mt_out_logo ((width > 1.6) (widthOutput mt_gt_160)))

Executing: err504 = geomAnd(m1 geomWidth(m1 (keep > 1.48) truncate 0.74))

Executing: err504aTN = geomAnd(m1 geomWidth(m1 (keep > 1.6) truncate 0.8))

Executing: err504b = geomAnd(m1 geomWidth(m1 (keep > 4.0) truncate 2.0))

Executing: drc(err504 m1 (sep < 0.32) shielded "GR504:   M1(>1.48) to M1 (run >0) space ...

Executing: drc(err504b m1 (sep < 0.6) shielded "GR504b:  M1(>4.00) to M1 (run >0) space ...

Executing: out2 = drc(err504aTN m1 (sep < 0.36) shielded)

Executing: errorLayer(geomAndNot(out2 grlogic) "GR504a:  M1(>1.60) to M1 (run >0) space >= 0.36 um.")

Executing: ca_no_m1 = geomAndNot(ca m1)
	   errorLayer(ca_no_m1 "GR505a: CA not within M1 found!")

Executing: cab_no_m1 = geomAndNot(cabar m1)
	   errorLayer(cab_no_m1 "GR505b: CABAR not within M1 found!")

Executing: drc(m1 ca (enc < 0.02) "GR505a: CA must be within M1 >= 0.020 um.")

Executing: drc(m1 cabar (enc < 0.04) "GR505b: CABAR must be within M1 >= 0.040 um.")

Executing: drc(v1 (width < 0.28) withCornerTouch "GR550: V1 width and length == 0.280 um...

Executing: drc(v2 (width < 0.28) withCornerTouch "GR550: V2 width and length == 0.280 um...

Executing: drc(v3 (width < 0.28) withCornerTouch "GR550: V3 width and length == 0.280 um...

Executing: drc(v4 (width < 0.28) withCornerTouch "GR550: V4 width and length == 0.280 um...

Executing: drc(v5 (width < 0.28) withCornerTouch "GR550: V5 width and length == 0.280 um...

Executing: drc(v1 (area > 0.0784) "GR550: V1 width and length == 0.280 um. (error >)")

Executing: drc(v2 (area > 0.0784) "GR550: V2 width and length == 0.280 um. (error >)")

Executing: drc(v3 (area > 0.0784) "GR550: V3 width and length == 0.280 um. (error >)")

Executing: drc(v4 (area > 0.0784) "GR550: V4 width and length == 0.280 um. (error >)")

Executing: drc(v5 (area > 0.0784) "GR550: V5 width and length == 0.280 um. (error >)")

Executing: drc(v1 (sep < 0.28) withSingularPoint "GR553a: V1 to V1 space >= 0.280 um.")

Executing: drc(v2 (sep < 0.28) withSingularPoint "GR553a: V2 to V2 space >= 0.280 um.")

Executing: drc(v3 (sep < 0.28) withSingularPoint "GR553a: V3 to V3 space >= 0.280 um.")

Executing: drc(v4 (sep < 0.28) withSingularPoint "GR553a: V4 to V4 space >= 0.280 um.")

Executing: drc(v5 (sep < 0.28) withSingularPoint "GR553a: V5 to V5 space >= 0.280 um.")

Executing: err557_0 = geomGetPolygon(eval(level))
	   errorLayer(err557_0 errMsg0)

Executing: err557_1 = geomGetAngledEdge(eval(level) (keep == 45) fig)
	   errorLayer(err557_1 errMsg1)

Executing: err557_0 = geomGetPolygon(eval(level))
	   errorLayer(err557_0 errMsg0)

Executing: err557_1 = geomGetAngledEdge(eval(level) (keep == 45) fig)
	   errorLayer(err557_1 errMsg1)

Executing: err557_0 = geomGetPolygon(eval(level))
	   errorLayer(err557_0 errMsg0)

Executing: err557_1 = geomGetAngledEdge(eval(level) (keep == 45) fig)
	   errorLayer(err557_1 errMsg1)

Executing: err557_0 = geomGetPolygon(eval(level))
	   errorLayer(err557_0 errMsg0)

Executing: err557_1 = geomGetAngledEdge(eval(level) (keep == 45) fig)
	   errorLayer(err557_1 errMsg1)

Executing: err557_0 = geomGetPolygon(eval(level))
	   errorLayer(err557_0 errMsg0)

Executing: err557_1 = geomGetAngledEdge(eval(level) (keep == 45) fig)
	   errorLayer(err557_1 errMsg1)

Executing: err558v5b = geomOutside(eval(level) chipring)
	   errorLayer(err558v5b errMsg)

Executing: err558v5b = geomOutside(eval(level) chipring)
	   errorLayer(err558v5b errMsg)

Executing: err558v5b = geomOutside(eval(level) chipring)
	   errorLayer(err558v5b errMsg)

Executing: err558v5b = geomOutside(eval(level) chipring)
	   errorLayer(err558v5b errMsg)

Executing: err558v5b = geomOutside(eval(level) chipring)
	   errorLayer(err558v5b errMsg)

Executing: err560_V1 = geomWidth(v1b_not_ring (keep > 0.28))
	   errorLayer(err560_V1 "GR560: V1BAR width == 0.20 um. (error >)")

Executing: drc(v1b_not_ring (width < 0.28) "GR560: V1BAR width == 0.20 um. (error <)")

Executing: err560_V2 = geomWidth(v2b_not_ring (keep > 0.28))
	   errorLayer(err560_V2 "GR560: V2BAR width == 0.20 um. (error >)")

Executing: drc(v2b_not_ring (width < 0.28) "GR560: V2BAR width == 0.20 um. (error <)")

Executing: err560_V3 = geomWidth(v3b_not_ring (keep > 0.28))
	   errorLayer(err560_V3 "GR560: V3BAR width == 0.20 um. (error >)")

Executing: drc(v3b_not_ring (width < 0.28) "GR560: V3BAR width == 0.20 um. (error <)")

Executing: err560_V4 = geomWidth(v4b_not_ring (keep > 0.28))
	   errorLayer(err560_V4 "GR560: V4BAR width == 0.20 um. (error >)")

Executing: drc(v4b_not_ring (width < 0.28) "GR560: V4BAR width == 0.20 um. (error <)")

Executing: err560_V5 = geomWidth(v5b_not_ring (keep > 0.28))
	   errorLayer(err560_V5 "GR560: V5BAR width == 0.20 um. (error >)")

Executing: drc(v5b_not_ring (width < 0.28) "GR560: V5BAR width == 0.20 um. (error <)")

Executing: v1_v1bar = geomOverlap(v1 v1bar)
	   errorLayer(v1_v1bar "GR566: V1 overlapping V1BAR found!")

Executing: v2_v2bar = geomOverlap(v2 v2bar)
	   errorLayer(v2_v2bar "GR566: V2 overlapping V2BAR found!")

Executing: v3_v3bar = geomOverlap(v3 v3bar)
	   errorLayer(v3_v3bar "GR566: V3 overlapping V3BAR found!")

Executing: v4_v4bar = geomOverlap(v4 v4bar)
	   errorLayer(v4_v4bar "GR566: V4 overlapping V4BAR found!")

Executing: v5_v5bar = geomOverlap(v5 v5bar)
	   errorLayer(v5_v5bar "GR566: V5 overlapping V5BAR found!")

Executing: drc(v1bar v1 (sep < 0.56) "GR566: V1BAR to V1 space >= 0.560 um.")

Executing: drc(v2bar v2 (sep < 0.56) "GR566: V2BAR to V2 space >= 0.560 um.")

Executing: drc(v3bar v3 (sep < 0.56) "GR566: V3BAR to V3 space >= 0.560 um.")

Executing: drc(v4bar v4 (sep < 0.56) "GR566: V4BAR to V4 space >= 0.560 um.")

Executing: drc(v5bar v5 (sep < 0.56) "GR566: V5BAR to V5 space >= 0.560 um.")

Executing: drc(v1bar (sep < 3.6) "GR567: V1BAR to adjacent V1BAR >= 3.60 um.")

Executing: drc(v2bar (sep < 3.6) "GR567: V2BAR to adjacent V2BAR >= 3.60 um.")

Executing: drc(v3bar (sep < 3.6) "GR567: V3BAR to adjacent V3BAR >= 3.60 um.")

Executing: drc(v4bar (sep < 3.6) "GR567: V4BAR to adjacent V4BAR >= 3.60 um.")

Executing: drc(v5bar (sep < 3.6) "GR567: V5BAR to adjacent V5BAR >= 3.60 um.")

Executing: drc(v1bar (notch < 1.8) "GR567b: V1BAR notch >= 1.80 um.")

Executing: drc(v2bar (notch < 1.8) "GR567b: V2BAR notch >= 1.80 um.")

Executing: drc(v3bar (notch < 1.8) "GR567b: V3BAR notch >= 1.80 um.")

Executing: drc(v4bar (notch < 1.8) "GR567b: V4BAR notch >= 1.80 um.")

Executing: drc(v5bar (notch < 1.8) "GR567b: V5BAR notch >= 1.80 um.")

Executing: v1_no_m1x002 = geomAndNot(geomAndNot(v1 k1) geomSize(m1 0.02))
	   errorLayer(v1_no_m1x002 "GR570: V1(not over K1) must be within M1 >= -0.020 um.")

Executing: drc(m1 v1b_not_ring (enc < 0.08) "GR570c: V1BAR must be within M1 >= 0.08 um.")

Executing: errorLayer(geomAndNot(v1b_not_ring m1) "GR570c: V1BAR not within M1 found!")

Executing: v1_no_m2 = geomAnd(geomAndNot(v1 m2) LM2_5)
	   errorLayer(v1_no_m2 "GR575a: V1 not within M2 found!")

Executing: v1_no_mt = geomAnd(geomAndNot(v1 mt) LM1)
	   errorLayer(v1_no_mt "GR575a1: V1 not within MT found!")

Executing: err575ab = geomAnd(geomAndNot(v1b_not_ring m2) LM2_5)
	   errorLayer(err575ab "GR575ab: V1BAR not within M2 found!")

Executing: drc(m2 v1b_not_ring (enc < 0.4) "GR575ab: V1BAR must be within M2 >= 0.40 um.")

Executing: v1b_LM1 = geomAnd(v1b_not_ring LM1)

Executing: drc(mt v1b_LM1 (enc < 0.4) "GR575a2: V1BAR must be within MT >= 0.40 um.")

Executing: errorLayer(geomAndNot(v1b_LM1 m2) "GR575a2: V1BAR not within MT found!")

Executing: m2_not_ring = geomAndNot(m2 m2_ring)

Executing: m2Hole = geomAndNot(geomHoles(m2_not_ring) m2_not_ring)

Executing: err601b_m2 = drc(m2Hole (area < 0.705))
	   errorLayer(err601b_m2 errMsg601b)

Executing: err600 = drc(eval(level) (width < 0.28) withCornerTouch)
	   errorLayer(err600 errMsg600)

Executing: err601a = drc(eval(level) (area < 0.3136))
	   errorLayer(err601a errMsg601a)

Executing: err602 = drc(eval(level) (sepNotch < 0.28) withSingularPoint)
	   errorLayer(err602 errMsg602)

Executing: m2_gtt_160 = geomAnd(m2 geomWidth(m2 (keep > 1.6) truncate 0.8))

Executing: m2_gtt_500 = geomAnd(m2 geomWidth(m2 (keep > 5.0) truncate 2.5))

Executing: err604_m2 = drc(m2_gtt_160 ((0 < sepNotch) < 0.4) shielded)

Executing: err604a_m2 = drc(m2_gtt_500 m2 ((0 < sep) < 0.6) shielded)
	   errorLayer(err604a_m2 errMsg604a)

Executing: errorLayer(geomAndNot(err604_m2 m2) errMsg604)

Executing: m3_not_ring = geomAndNot(m3 m3_ring)

Executing: m3Hole = geomAndNot(geomHoles(m3_not_ring) m3_not_ring)

Executing: err601b_m3 = drc(m3Hole (area < 0.705))
	   errorLayer(err601b_m3 errMsg601b)

Executing: err600 = drc(eval(level) (width < 0.28) withCornerTouch)
	   errorLayer(err600 errMsg600)

Executing: err601a = drc(eval(level) (area < 0.3136))
	   errorLayer(err601a errMsg601a)

Executing: err602 = drc(eval(level) (sepNotch < 0.28) withSingularPoint)
	   errorLayer(err602 errMsg602)

Executing: m3_gtt_160 = geomAnd(m3 geomWidth(m3 (keep > 1.6) truncate 0.8))

Executing: m3_gtt_500 = geomAnd(m3 geomWidth(m3 (keep > 5.0) truncate 2.5))

Executing: err604_m3 = drc(m3_gtt_160 ((0 < sepNotch) < 0.4) shielded)

Executing: err604a_m3 = drc(m3_gtt_500 m3 ((0 < sep) < 0.6) shielded)
	   errorLayer(err604a_m3 errMsg604a)

Executing: errorLayer(geomAndNot(err604_m3 m3) errMsg604)

Executing: m4_not_ring = geomAndNot(m4 m4_ring)

Executing: m4Hole = geomAndNot(geomHoles(m4_not_ring) m4_not_ring)

Executing: err601b_m4 = drc(m4Hole (area < 0.705))
	   errorLayer(err601b_m4 errMsg601b)

Executing: err600 = drc(eval(level) (width < 0.28) withCornerTouch)
	   errorLayer(err600 errMsg600)

Executing: err601a = drc(eval(level) (area < 0.3136))
	   errorLayer(err601a errMsg601a)

Executing: err602 = drc(eval(level) (sepNotch < 0.28) withSingularPoint)
	   errorLayer(err602 errMsg602)

Executing: m4_gtt_160 = geomAnd(m4 geomWidth(m4 (keep > 1.6) truncate 0.8))

Executing: m4_gtt_500 = geomAnd(m4 geomWidth(m4 (keep > 5.0) truncate 2.5))

Executing: err604_m4 = drc(m4_gtt_160 ((0 < sepNotch) < 0.4) shielded)

Executing: err604a_m4 = drc(m4_gtt_500 m4 ((0 < sep) < 0.6) shielded)
	   errorLayer(err604a_m4 errMsg604a)

Executing: errorLayer(geomAndNot(err604_m4 m4) errMsg604)

Executing: m5_not_ring = geomAndNot(m5 m5_ring)

Executing: m5Hole = geomAndNot(geomHoles(m5_not_ring) m5_not_ring)

Executing: err601b_m5 = drc(m5Hole (area < 0.705))
	   errorLayer(err601b_m5 errMsg601b)

Executing: err600 = drc(eval(level) (width < 0.28) withCornerTouch)
	   errorLayer(err600 errMsg600)

Executing: err601a = drc(eval(level) (area < 0.3136))
	   errorLayer(err601a errMsg601a)

Executing: err602 = drc(eval(level) (sepNotch < 0.28) withSingularPoint)
	   errorLayer(err602 errMsg602)

Executing: m5_gtt_160 = geomAnd(m5 geomWidth(m5 (keep > 1.6) truncate 0.8))

Executing: m5_gtt_500 = geomAnd(m5 geomWidth(m5 (keep > 5.0) truncate 2.5))

Executing: err604_m5 = drc(m5_gtt_160 ((0 < sepNotch) < 0.4) shielded)

Executing: err604a_m5 = drc(m5_gtt_500 m5 ((0 < sep) < 0.6) shielded)
	   errorLayer(err604a_m5 errMsg604a)

Executing: errorLayer(geomAndNot(err604_m5 m5) errMsg604)

Executing: errorLayer(geomAndNot(v2 m2) "GR610: V2 not within M2 found!")

Executing: errorLayer(geomAndNot(v3 m3) "GR610: V3 not within M3 found!")

Executing: errorLayer(geomAndNot(v4 m4) "GR610: V4 not within M4 found!")

Executing: errorLayer(geomAndNot(v5 m5) "GR610: V5 not within M5 found!")

Executing: drc(m2 v2b_not_ring (enc < 0.4) withSingularPoint "GR610c: V2BAR must be with...

Executing: errorLayer(geomAndNot(v2b_not_ring m2) "GR610c: V2BAR not within M2 found!")

Executing: drc(m3 v3b_not_ring (enc < 0.4) withSingularPoint "GR610c: V3BAR must be with...

Executing: errorLayer(geomAndNot(v3b_not_ring m3) "GR610c: V3BAR not within M3 found!")

Executing: drc(m4 v4b_not_ring (enc < 0.4) withSingularPoint "GR610c: V4BAR must be with...

Executing: errorLayer(geomAndNot(v4b_not_ring m4) "GR610c: V4BAR not within M4 found!")

Executing: drc(m5 v5b_not_ring (enc < 0.4) withSingularPoint "GR610c: V5BAR must be with...

Executing: errorLayer(geomAndNot(v5b_not_ring m5) "GR610c: V5BAR not within M5 found!")

Executing: v2_not_m3 = geomAnd(geomAndNot(v2 m3) LM3_5)
	   errorLayer(v2_not_m3 "GR611: V2 not within M3 found!")

Executing: v2_not_mt = geomAnd(geomAndNot(v2 mt) LM2)
	   errorLayer(v2_not_mt "GR611: V2 not within MT found!")

Executing: v3_not_m4 = geomAnd(geomAndNot(v3 m4) LM4_5)
	   errorLayer(v3_not_m4 "GR611: V3 not within M4 found!")

Executing: v3_not_mt = geomAnd(geomAndNot(v3 mt) LM3)
	   errorLayer(v3_not_mt "GR611: V3 not within MT found!")

Executing: v4_not_m5 = geomAnd(geomAndNot(v4 m5) LM5)
	   errorLayer(v4_not_m5 "GR611: V4 not within M5 found!")

Executing: v4_not_mt = geomAnd(geomAndNot(v4 mt) LM4)
	   errorLayer(v4_not_mt "GR611: V4 not within MT found!")

Executing: v5_not_mt = geomAnd(geomAndNot(v5 mt) LM5)
	   errorLayer(v5_not_mt "GR611: V5 not within MT found!")

Executing: err611c_V2 = geomAnd(geomAndNot(v2b_not_ring m3) LM3_5)
	   errorLayer(err611c_V2 "GR611a: V2BAR not within M3 found!")

Executing: drc(m3 v2b_not_ring (enc < 0.4) "GR611a: V2BAR must be within M3 >= 0.40 um.")

Executing: v2b_LM2 = geomAnd(v2b_not_ring LM2)

Executing: drc(mt v2b_LM2 (enc < 0.4) "GR611a: V2BAR must be within MT >= 0.40 um.")

Executing: errorLayer(geomAndNot(v2b_LM2 mt) "GR611a: V2BAR not within MT found!")

Executing: err611c_V3 = geomAnd(geomAndNot(v3b_not_ring m4) LM4_5)
	   errorLayer(err611c_V3 "GR611a: V3BAR not within M4 found!")

Executing: drc(m4 v3b_not_ring (enc < 0.4) "GR611a: V3BAR must be within M4 >= 0.40 um.")

Executing: v3b_LM3 = geomAnd(v3b_not_ring LM3)

Executing: drc(mt v3b_LM3 (enc < 0.4) "GR611a: V3BAR must be within MT >= 0.40 um.")

Executing: errorLayer(geomAndNot(v3b_LM3 mt) "GR611a: V3BAR not within MT found!")

Executing: err611c_V4 = geomAnd(geomAndNot(v4b_not_ring m5) LM5)
	   errorLayer(err611c_V4 "GR611a: V4BAR not within M5 found!")

Executing: drc(m5 v4b_not_ring (enc < 0.4) "GR611a: V4BAR must be within M5 >= 0.40 um.")

Executing: v4b_LM4 = geomAnd(v4b_not_ring LM4)

Executing: drc(mt v4b_LM4 (enc < 0.4) "GR611a: V4BAR must be within MT >= 0.40 um.")

Executing: errorLayer(geomAndNot(v4b_LM4 mt) "GR611a: V4BAR not within MT found!")

Executing: drc(mt v5b_not_ring (enc < 0.4) "GR611a: V5BAR must be within MT >= 0.40 um.")

Executing: errorLayer(geomAndNot(v5b_not_ring mt) "GR611a: V5BAR not within MT found!")

Executing: m1m2_612 = geomAnd(geomButtOrOver(geomAnd(m1 m2) geomOr(geomAnd(m1_gt_160 m2)...

Executing: m1mt_612 = geomAnd(geomButtOrOver(geomAnd(m1 mt) geomOr(geomAnd(m1_gt_160 mt)...

Executing: m1m2_612_b = geomAnd(geomOr(geomAnd(m1_gt_160 m2) geomAnd(m1 m2_gt_160)) LM2_5)

Executing: m1mt_612_b = geomAnd(geomOr(geomAnd(m1_gt_160 mt) geomAnd(m1 mt_gt_160)) LM1)

Executing: m1m2_one_v1 = geomAnd(geomButtOrOver(m1m2_612 v1 (keep == 1)) LM2_5)

Executing: m1mt_one_v1 = geomAnd(geomButtOrOver(m1mt_612 v1 (keep == 1)) LM1)

Executing: m1m2_one_v1_b = geomAnd(geomButtOrOver(m1m2_612_b v1 (keep == 1)) LM2_5)

Executing: m1mt_one_v1_b = geomAnd(geomButtOrOver(m1mt_612_b v1 (keep == 1)) LM1)

Executing: m1m2_one_v1 = geomAnd(m1m2_one_v1 m1m2_one_v1_b)
	   errorLayer(m1m2_one_v1 "GR612: M1/M2 intersection only enclosing one V1 shape found!")

Executing: m1mt_one_v1 = geomAnd(m1mt_one_v1 m1mt_one_v1_b)
	   errorLayer(m1mt_one_v1 "GR612: M1/MT intersection only enclosing one V1 shape found!")

Executing: drc(mt (width < 0.28) "GR640: MT width >= 0.280 um.")

Executing: mt_enclosure = geomAndNot(geomHoles(mt_not_ring) mt_not_ring)

Executing: drc(mt (area < 0.548) "GR641a: MT area > 0.548 sq.um.")

Executing: drc(mt_enclosure (area < 0.705) "GR641b: MT enclosed area >= 0.705 sq.um.")

Executing: drc(mt (sep < 0.28) "GR642: MT space >= 0.280 um.")

Executing: drc(mt (notch < 0.28) "GR642: MT notch >= 0.280 um.")

Executing: err644 = geomAnd(mt geomWidth(mt (keep > 1.6) truncate 0.8))

Executing: err644a = geomAnd(mt geomWidth(mt (keep > 5.0) truncate 2.5))

Executing: err644b = geomAnd(mt geomWidth(mt (keep > 35.0) truncate 17.5))

Executing: drc(err644 mt (sep < 0.4) shielded "GR644:   MT(>1.60) to MT space >= 0.40 um.")

Executing: drc(err644a mt (sep < 0.6) shielded "GR644a:  MT(>5.00) to MT space >= 0.60 u...

Executing: drc(err644b mt (sep < 2.0) shielded "GR644b:  MT(>35.00) to MT space >= 2.00 ...

Executing: dv_ovr_ecm = geomAnd(dv crk_tch_grde)

Executing: dv_not_ecm = geomAndNot(dv crk_tch_grde)

Executing: lv_ovr_ecm = geomAnd(lv crk_tch_grde)

Executing: lv_not_ecm = geomAndNot(lv crk_tch_grde)

Executing: drc(lv_not_ecm (width < 14.0) withCornerTouch "GR650a1: (LV not over (CRACKST...

Executing: drc(lv_ovr_ecm (width < 9.0) withCornerTouch "GR650a2: (LV over (CRACKSTOP to...

Executing: drc(dv_not_ecm (width < 14.0) withCornerTouch "GR650b1: (DV not over (CRACKST...

Executing: drc(dv_ovr_ecm (width < 9.0) withCornerTouch "GR650b2: (DV over (CRACKSTOP to...

Executing: drc(lv (area < 550.0) "GR651a: LV area >= 550.000 sq.um.")

Executing: drc(dv (area < 480.0) "GR651b: DV area >= 480.000 sq.um.")

Executing: drc(dv (sepNotch < 11.0) withSingularPoint "GR653b: DV space >= 11.000 um.")

Executing: drc(lv (sepNotch < 29.0) withSingularPoint "GR653c: LV space >= 29.000 um.")

Executing: tv_in_padf = geomInside(tv padfiltr)

Executing: tv_out_padf = geomOr(geomOutside(tv padfiltr) geomStraddle(tv padfiltr))

Executing: tv_ovr_pfOrCrk = geomAnd(tv geomOr(padfiltr crackstop))

Executing: tv_not_pfOrCrk = geomAndNot(tv geomOr(padfiltr crackstop))

Executing: drc(tv_ovr_pfOrCrk (width < 4.2) withCornerTouch "GR655b: (TV covered by (PAD...

Executing: drc(tv_not_pfOrCrk (width < 14.0) withCornerTouch "GR655c: (TV not covered by...

Executing: drc(tv_in_padf (area < 103.0) "GR656b: (TV covered by PADFILTR) area >= 103.0...

Executing: drc(tv_out_padf (area < 480.0) "GR656c: (TV not covered by PADFILTR) area >= ...

Executing: drc(tv_in_padf (sepNotch < 6.0) withSingularPoint "GR657b: (TV covered by PAD...

Executing: drc(tv_out_padf (sepNotch < 8.0) withSingularPoint "GR657c: (TV not covered b...

Executing: ChipEdge = geomOr(guardedge geomAvoiding(chipedge guardedge))

Executing: drc(ChipEdge tv (enc < 12.0) withSingularPoint "GR658ab: TV within {GUARDEDGE...

Executing: drc(ChipEdge dv (enc < 20.0) withSingularPoint "GR658c: DV within {GUARDEDGE,...

Executing: drc(ChipEdge dv (enc < 11.0) withSingularPoint "GR658c1: DV within {GUARDEDGE...

Executing: drc(ChipEdge lv (enc < 29.0) withSingularPoint "GR658d: LV within {GUARDEDGE,...

Executing: drc(ChipEdge lv (enc < 11.0) withSingularPoint "GR658d1: LV within {GUARDEDGE...

Executing: errbeol2 = geomButtOrOver(geomButtOrOver(mpw_edge dv) lv)
	   errorLayer(errbeol2 "GRBEOL2: (MPW_EDGE touching DV) touching LV is prohibited!")

Executing: m1_chex = geomAnd(m1 m1chexcl)

Executing: erra500b = geomWidth(m1_chex (keep > 14.0))
	   errorLayer(erra500b "GRA500b: M1(over M1CHEXCL) width (max) <= 14.000 um.")

Executing: m1_fata = geomAnd(geomWidth(m1_chex (keep > 2.4) truncate 1.2) m1_chex)

Executing: m1_fatb = geomAnd(geomWidth(m1_chex (keep > 5.3) truncate 2.65) m1_chex)

Executing: m1_fatc = geomAnd(geomWidth(m1_chex (keep > 8.4) truncate 4.2) m1_chex)

Executing: m1_fatd = geomAnd(geomWidth(m1_chex (keep > 11.5) truncate 5.75) m1_chex)

Executing: m1_fata_err = drc(m1_fata m1_chex (sep < 0.7) shielded)

Executing: m1_fatb_err = drc(m1_fatb m1_chex (sep < 1.6) shielded)

Executing: m1_fatc_err = drc(m1_fatc m1_chex (sep < 2.5) shielded)

Executing: m1_fatd_err = drc(m1_fatd m1_chex (sep < 3.5) shielded)
	   errorLayer(m1_fatd_err "GRA504d: M1(over M1CHEXCL) (>11.50 wide) space >= 3.500 um.")

Executing: errorLayer(geomOr(geomOutside(m1_fata_err m1_fatb_err) geomStraddle(m1_fata_err m1_fatb_err)) "GRA504a: M1(over M1CHEXCL) (>2.40 and <=5.30) space >= 0.700 um.")

Executing: errorLayer(geomOr(geomOutside(m1_fatb_err m1_fatc_err) geomStraddle(m1_fatb_err m1_fatc_err)) "GRA504b: M1(over M1CHEXCL) (>5.30 and <=8.40) space >= 1.600 um.")

Executing: errorLayer(geomOr(geomOutside(m1_fatc_err m1_fatd_err) geomStraddle(m1_fatc_err m1_fatd_err)) "GRA504c: M1(over M1CHEXCL) (>8.40 and <=11.50) space >= 2.500 um.")

Executing: drc(jd (width < 1.0) "GRJD1: JD width >= 1.000 um.")

Executing: drc(jd (sep < 1.0) "GRJD2: JD space >= 1.000 um.")

Executing: drc(jd (notch < 1.0) "GRJD2: JD notch >= 1.000 um.")

Executing: rx_strad_jd = geomStraddle(rx jd)
	   errorLayer(rx_strad_jd "GRJD3: RX straddling JD found!")

Executing: drc(jd rx (enc < 0.32) "GRJD3: RX within JD >= 0.320 um.")

Executing: drc(jd pc ((0 < sep) < 1.04) "GRJD4: JD to PC space >= 1.040 um.")

Executing: drc(jd rx (sep < 0.58) "GRJD4a: JD to RX space >= 0.580 um.")

Executing: errjd5op = geomButtOrOver(jd op)
	   errorLayer(errjd5op "GRJD5: JD touching OP found!")

Executing: errjd5pc = geomButtOrOver(jd pc)
	   errorLayer(errjd5pc "GRJD5: JD touching PC found!")

Executing: errjd5rn = geomButtOrOver(jd rn)
	   errorLayer(errjd5rn "GRJD5: JD touching RN found!")

Executing: errjd5rp = geomButtOrOver(jd rp)
	   errorLayer(errjd5rp "GRJD5: JD touching RP found!")

Executing: errjd5rr = geomButtOrOver(jd rr)
	   errorLayer(errjd5rr "GRJD5: JD touching RR found!")

Executing: errjd6 = geomButtOrOver(jd geomOutside(rx ns))
	   errorLayer(errjd6 "GRJD6: JD touching (RX not touching NS) found!")

Executing: drc(mosvar (width < 0.44) "GRMOSVAR1: MOSVAR width >= 0.440 um.")

Executing: drc(mosvar (sep < 0.44) "GRMOSVAR2: MOSVAR space >= 0.440 um.")

Executing: drc(mosvar (notch < 0.44) "GRMOSVAR2: MOSVAR notch >= 0.440 um.")

Executing: errmosvar3_dg = geomButtOrOver(mosvar dg)
	   errorLayer(errmosvar3_dg "GRMOSVAR3: MOSVAR touching DG found!")

Executing: errmosvar3_ns = geomButtOrOver(mosvar ns)
	   errorLayer(errmosvar3_ns "GRMOSVAR3: MOSVAR touching NS found!")

Executing: errmosvar3_rp = geomButtOrOver(mosvar rp)
	   errorLayer(errmosvar3_rp "GRMOSVAR3: MOSVAR touching RP found!")

Executing: errmosvar3_rr = geomButtOrOver(mosvar rr)
	   errorLayer(errmosvar3_rr "GRMOSVAR3: MOSVAR touching RR found!")

Executing: errmosvar3_zvt = geomButtOrOver(mosvar zvt_072)
	   errorLayer(errmosvar3_zvt "GRMOSVAR3: MOSVAR touching (ZEROVT sized by +0.72) found!")

Executing: errmosvar3a_bp = geomButtOrOver(geomAnd(mosvar nw) bp)
	   errorLayer(errmosvar3a_bp "GRMOSVAR3a: (MOSVAR over NW) touching BP found!")

Executing: drc(mosvar bb ((0 < sep) < 0.44) "GRMOSVAR4: MOSVAR to BB space >= 0.440 um.")

Executing: drc(mosvar dg (sep < 0.44) "GRMOSVAR4: MOSVAR to DG space >= 0.440 um.")

Executing: drc(mosvar nw ((0 < sep) < 0.44) "GRMOSVAR4: MOSVAR to NW space >= 0.440 um.")

Executing: drc(mosvar zvt_072 (sep < 0.44) "GRMOSVAR4: MOSVAR to (ZEROVT sized by +0.72)...

Executing: drc(mosvar rx (sep < 0.34) "GRMOSVAR5: MOSVAR to RX space >= 0.340 um.")

Executing: drc(mosvar gate (sep < 0.5) "GRMOSVAR5a: MOSVAR to (PC over RX) space >= 0.50...

Executing: rx_mosvar = geomButtOrOver(geomAndNot(rx bipolar) mosvar)

Executing: nw_pi_over_mosvar = geomAnd(geomOr(nw pi) mosvar)

Executing: errmosvar6 = geomAndNot(rx_mosvar nw_pi_over_mosvar)
	   errorLayer(errmosvar6 "GRMOSVAR6: ((RX not over BIPOLAR) touch MOSVAR) not within ((NW or PI)over MOSVAR) found!")

Executing: drc(nw_pi_over_mosvar rx_mosvar (enc < 0.42) "GRMOSVAR6: ((RX not over BIPOLA...

Executing: rx_mosvar6a = geomButtOrOver(geomAnd(rx bipolar) mosvar)

Executing: errmosvar6a = geomAndNot(rx_mosvar6a nw_pi_over_mosvar)
	   errorLayer(errmosvar6a "GRMOSVAR6a: ((RX over BIPOLAR)touch MOSVAR) not within ((NW or PI)over MOSVAR) found!")

Executing: drc(nw_pi_over_mosvar rx_mosvar6a (enc < 0.34) "GRMOSVAR6a: ((RX over BIPOLAR...

Executing: errmosvar8 = geomButtOrOver(geomAnd(mosvar pi) geomSize(tg 0.001))
	   errorLayer(errmosvar8 "GRMOSVAR8: (MOSVAR over PI) touching TG prohibited")

Executing: err_ncap1 = geomButtOrOver(geomButtOrOver(nw geomAndNot(gate bp)) geomSize(ge...
	   errorLayer(err_ncap1 "GRNCAP1: { NW touching [ (PC over RX) NOT over BP ]  } cannot touch ( BP over RX )")

Executing: drc(bp pc_rx_pcap1 (enc < 0.36) "GRPCAP1: (PC over RX) must be within BP >= 0...

Executing: pc_rx_pcap1_bp = geomOverlap(pc_rx_pcap1 bp)

Executing: errpcap1 = geomAndNot(pc_rx_pcap1_bp bp)
	   errorLayer(errpcap1 "GRPCAP1: (PC over RX ) within BP >= 0.360 um.")

Executing: err_pcap1 = geomButtOrOver(geomButtOrOver(geomAndNot(pi nw) geomAnd(gate bp))...
	   errorLayer(err_pcap1 "GRPCAP2: { ( PI  NOT over NW ) touching ( (PC over RX)  over BP ) } cannot touch ( RX  NOT over BP )")

Executing: errvlpnp01 = geomButtOrOver(bipolar geomSize(grlogic 0.001))
	   errorLayer(errvlpnp01 "GRVLNPN01: BIPOLAR cannot touch GRLOGIC")

Executing: lay_vlpnp02 = geomButtOrOver(gate geomSize(bipolar 0.001))

Executing: errvlpnp02 = geomAndNot(geomSize(lay_vlpnp02 0.5) mosvar)
	   errorLayer(errvlpnp02 "GRVLNPN02: (((PC over RX) touching BIPOLAR) must be within MOSVAR >= 0.50 um.")

Executing: lay_vlpnp03 = geomAnd(mosvar geomAndNot(geomAnd(gate pi) bp))

Executing: errvlpnp03 = geomAvoiding(bipolar lay_vlpnp03)
	   errorLayer(errvlpnp03 "GRVLNPN03: BIPOLAR must touch (MOSVAR over (((PC over RX) over PI) not over BP))")

Executing: pi_not_nw_siz = geomSize(geomEnclose(pi_not_nw bipolar) -0.56)

Executing: errvlpnp04 = geomAndNot(pi_not_nw_siz bipolar)
	   errorLayer(errvlpnp04 "GRVLNPN04: BIPOLAR within (PI not over NW) == 0.56 um.")

Executing: drc(pi_not_nw bipolar (enc < 0.56) "GRVLNPN04: BIPOLAR within (PI not over NW...

Executing: nwpi_bipolar = geomButtOrOver(geomOr(nw pi) bipolar)

Executing: nwpi_bipolar_siz = geomSize(nwpi_bipolar -2.68)

Executing: errvlpnp04b = geomAndNot(nwpi_bipolar_siz bipolar)
	   errorLayer(errvlpnp04b "GRVLNPN04b: (Union( NW,PI) touching BIPOLAR) overlap past BIPOLAR == 2.680 um (error>).")

Executing: drc(nwpi_bipolar bipolar (enc < 2.68) "GRVLNPN04b: (Union( NW,PI) touching BI...

Executing: pc_under_bipo = geomAnd(geomAnd(pc rx) bipolar)

Executing: pc_under_bipo_sup = geomSize(geomSize(pc_under_bipo -0.09) 0.09)
	   errorLayer(pc_under_bipo_sup "GRVLNPN05: (PC over RX) width under BIPOLAR == 0.18um (error >).")

Executing: drc(pc_under_bipo (width < 0.18) "GRVLNPN05: (PC over RX) width under BIPOLAR...

Executing: rx_bp_06 = geomAnd(rx_not_ring bp_not_ring)

Executing: bp_ring2 = geomButting(rx_bp_06 geomHoles(rx_bp_06))

Executing: vlnpn_guard_ring = geomButtOrOver(bp_ring2 bperi)

Executing: geomHoles(vlnpn_guard_ring)

Executing: err_vlnpn6a = geomAndNot(vlnpn_dev vlnpn_valid_ring)
	   errorLayer(err_vlnpn6a "GRVLNPN06: ((NW or PI) touching BIPOLAR) must be contained within a (P+ ring touching BPERI).")

Executing: err_vlnpn6b = geomAvoiding(geomSize(geomStretch(geomGetEdge(vlnpn_dev) -0.01)...
	   errorLayer(err_vlnpn6b "GRVLNPN06: ((NW or PI) touching BIPOLAR) to a (P+ ring touching BPERI) must be =< 0.84um")

Executing: drc(jc (sep < 0.9) "GRJC1: JC space >= 0.900 um.")

Executing: drc(jc (notch < 0.9) "GRJC1: JC notch >= 0.900 um.")

Executing: drc(jc (width < 1.38) "GRJC2: JC width >= 1.380 um.")

Executing: drc(jc (area < 6.0) "GRJC2a: JC minimum area >= 6.000 um.")

Executing: errjc3 = geomAndNot(jc pi)
	   errorLayer(errjc3 "GRJC3: JC not within PI found!")

Executing: drc(pi jc (enc < 1.94) "GRJC3: JC must be within PI >= 1.940 um.")

Executing: drc(jc nw (sep < 0.94) "GRJC4: JC to NW space >= 0.940 um.")

Executing: drc(jc rx_notover_bp (enc < 0.5) "GRJC5: (RX not over BP) must be within JC >...

Executing: jc6_lay = geomOr(as dg jd rr rp rn bb nr pr pd op pc zerovt mosvar schky bipo...

Executing: drc(jc jc6_lay (sep < 1.0) "GRJC6: JC to (AS DG JD RR RP RN BB  NR PR PD OP P...

Executing: err_jc6 = geomButtOrOver(jc jc6_lay)
	   errorLayer(err_jc6 "GRJC6: JC touch (AS DG JD RR RP RN BB  NR PR PD OP PC ZEROVT MOSVAR SCHKY BIPOLAR) found !")

Executing: jc_no_rxbp = geomAndNot(jc geomAnd(rx bp))

Executing: rxnotbp_jc = geomButtOrOver(rx_notover_bp jc_no_rxbp)

Executing: err_jc7_tp = geomAnd(rxnotbp_jc geomButtOrOver(m1 rxnotbp_jc (keep > 1)))

Executing: err_jc7 = geomButtOrOver(jc_no_rxbp geomAndNot(rx_notover_bp err_jc7_tp) (kee...
	   errorLayer(err_jc7 "GRJC7: ((JC not over (RX over BP)) touching more than one (RX not over BP) shape is prohibited.")

Executing: errjc8_edges = geomGetEdge(jc outside geomAnd(rx bp))
	   errorLayer(errjc8_edges "GRJC12: All JC Edges must abut or be covered by (RX over BP).")

Executing: jfet_channel = geomAnd(geomAnd(rx bp) jc)

Executing: drc(jfet_channel (width < 0.4) "GRJC8: (RX over BP) over JC) minimum  width >...

Executing: jfet_chann_ed = geomGetEdge(jfet_channel inside jc)

Executing: jfet_chann_ed_size = geomSize(jfet_chann_ed -0.25)

Executing: err_jc10 = geomAndNot(jfet_channel jfet_chann_ed_size)
	   errorLayer(err_jc10 "GRJC9: (RX over BP) over JC) maximum  width >= 0.500 um.")

Executing: rxnotoverbp_jc = geomAnd(rx_notover_bp jc)

Executing: errjc11_less = drc(rxnotoverbp_jc jfet_channel (sep < 0.28) (app > 0.0))
	   errorLayer(errjc11_less "GRJC10: ((RX not over BP) to (RX over BP)) over JC  for commom runlength > 0.0 == 0.28.(error < )")

Executing: errjc11_sup = geomAvoiding(geomSize(jfet_chann_ed 0.28) rxnotoverbp_jc)
	   errorLayer(errjc11_sup "GRJC10: ((RX not over BP) to (RX over BP)) over JC  for commom runlength > 0.0 == 0.28.(error > )")

Executing: drc(rxoverbp jc (enc < 0.5) "GRJC11: (RX over BP) overlap past JC >= 0.500 um.")

Executing: jc_polygon = geomGetPolygon(jc)
	   errorLayer(jc_polygon "GRJC13: Non-rectangular JC found!")

Executing: jc_45 = geomGetAngledEdge(jc (keep == 45) fig)
	   errorLayer(jc_45 "GRJC13: 45 degree JC found!")

Executing: jcchan_polygon = geomGetPolygon(jfet_channel)
	   errorLayer(jcchan_polygon "GRJC14: Non-rectangular ((RX over BP) over JC) found!")

Executing: jcchan_45 = geomGetAngledEdge(jfet_channel (keep == 45) fig)
	   errorLayer(jcchan_45 "GRJC14: 45 degree ((RX over BP) over JC) found!")

Executing: pinotnw_jc = geomOverlap(geomAndNot(pi nw) geomSize(jc 0.01))

Executing: err_jc15 = geomOverlap(geomOverlap(geomAndNot(pi nw) geomSize(jc 0.01)) geomS...
	   errorLayer(err_jc15 "GRJC15: ((PI not over NW) touching JC) touching (OP,PC,JD) is prohibited!")

Executing: err_jc16 = geomButtOrOver(pinotnw_jc jc (keep > 1))
	   errorLayer(err_jc16 "GRJC16: ((PI not over NW) touching JC) cannot touch more than JC shape!")

Executing: drc(dvpad jc (sep < 3.0) "GRJC942: DV terminal Pad to JC space >= 3.000 um.")

Executing: drc(tvpad jc (sep < 3.0) "GRJC942: TV terminal Pad to JC space >= 3.000 um.")

Executing: errjc951 = geomOverlap(dvpad geomSize(jc 0.01))
	   errorLayer(errjc951 "GRJC951: DV terminal Pad touching JC found!")

Executing: errjc951_tv = geomOverlap(tvpad geomSize(jc 0.01))
	   errorLayer(errjc951_tv "GRJC951: LV terminal Pad touching JC found!")

Executing: errjc990 = geomOverlap(bp_ring geomSize(jc 0.01))
	   errorLayer(errjc990 "GRJC990: BP in chip guard ring touching JC found!")

Executing: errorLayer(geomStraddle(jc logobnd) "GRJCPN001: JC shape straddling LOGOBND not allowed")

Executing: err_bp2nd = geomGetEdge(bp2nd outside geomAnd(bb pi))
	   errorLayer(err_bp2nd "GRBP2ND1: All BP2ND edges must abut (BB over PI).")

Executing: bp2nd2_lay = geomOr(as dg jd rr rp rn ns nw tg nr pr op pc zerovt schky grlogic)

Executing: drc(bp2nd bp2nd2_lay (sep < 1.0) "GRBP2ND2: BP2ND to (AS NS NW DG TG JD RR RP...

Executing: err_bp2nd2 = geomButtOrOver(bp2nd bp2nd2_lay)
	   errorLayer(err_bp2nd2 "GRBP2ND2: BP2ND touch (AS NS NW DG TG JD RR RP RN NR PR OP PC ZEROVT GRLOGIC SCHKY) found !")

Executing: rxnopd_bp2nd = geomButtOrOver(geomAndNot(rx pd) bp2nd)

Executing: drc(rxnopd_bp2nd (width < 1.0) "GRBP2ND3: (RX not over PD) touching BP2ND wid...

Executing: drc(bp2nd (width < 0.34) "GRBP2ND350: BP2ND width (min) >= 0.340 um.")

Executing: drc(bp2nd (area < 0.387) "GRBP2ND351a: BP2ND minimum area >= 0.387 sq.um.")

Executing: bp2nd_encl = geomAndNot(geomHoles(bp2nd) bp2nd)

Executing: drc(bp2nd_encl (area < 0.387) "GRBP2ND351b: BP2ND enclosed area >= 0.387 sq.u...

Executing: drc(bp2nd (sep < 0.34) "GRBP2ND352a: BP2ND space >= 0.340 um.")

Executing: drc(bp2nd (notch < 0.34) "GRBP2ND352a: BP2ND notch >= 0.340 um.")

Executing: err_bp2nd352b = geomButtOrOver(bp2nd bp)
	   errorLayer(err_bp2nd352b "GRBP2ND352b: BP2ND touching BP is prohibited.")

Executing: drc(bp2nd bp (sep < 0.34) "GRBP2ND352b: BP2ND to BP space >= 0.340 um.")

Executing: e1b_not_ind = geomAndNot(e1 ind_filt)

Executing: erre1aa = geomWidth(geomAndNot(e1 ind_filt) (keep > 25.0))
	   errorLayer(erre1aa "GRE1aa: E1(not under IND_FLT) width (max) <= 25.000 um.")

Executing: indf_x2500 = geomSize(ind_filt 25.0)

Executing: erre1ab = geomWidth(geomAnd(e1 geomSize(ind_filt 25.0)) (keep > 30.0))
	   errorLayer(erre1ab "GRE1ab: E1(under (IND_FLT sized by 25 per edge)) width (max) <= 30.000 um.")

Executing: drc(e1_not_ring (width < 1.5) "GRE1a: E1 width (min) >= 1.500 um.")

Executing: e1b_ind = geomAnd(e1 ind_filt)

Executing: drc(e1b_not_ind (sepNotch < 2.0) "GRE1b: E1 (not IND) space >= 2.000 um.")

Executing: drc(e1b_ind (sepNotch < 1.992) "GRE1b: E1 (IND) space >= 2.000 um.")

Executing: drc(e1b_ind e1b_not_ind ((0 < sep) < 2.0) shielded "GRE1b: E1 (IND) to E1 (no...

Executing: erre1e = geomAnd(geomAndNot(ft e1) LM0MA)
	   errorLayer(erre1e "GRE1e: FT not within E1 found!")

Executing: drc(e1 ft (enc < 1.0) "GRE1e: FT must be within E1 >= 1.000 um.")

Executing: erre1f = geomAnd(geomAndNot(ftb_not_ring e1) LM0MA)
	   errorLayer(erre1f "GRE1f: FTBAR not within E1 found!")

Executing: drc(e1 ftb_not_ring (enc < 1.0) "GRE1f: FTBAR must be within E1 >= 1.000 um.")

Executing: drc(e1 (area < 9.0) "GRE1g: E1 area >= 9.000 sq.um.")

Executing: e1s1 = geomAnd(e1 geomWidth(e1 (keep > 8.0) truncate 4.0))

Executing: e1s2 = geomAnd(e1 geomWidth(e1 (keep > 11.5) truncate 5.75))

Executing: e1s1_45 = geomGetNon90(e1s1 fig)

Executing: e1s1_90 = geomAndNot(e1s1 e1s1_45)

Executing: e1s2_45 = geomGetNon90(e1s2 fig)

Executing: e1s2_90 = geomAndNot(e1s2 e1s2_45)

Executing: e1s1_tmp1 = drc(e1s1_90 e1 (sep < 2.5) shielded)

Executing: e1s1_tmp2 = drc(e1s1_45 e1 (sep < (2.5 - tolLeg)) shielded)

Executing: e1s1_err = geomOr(e1s1_tmp1 e1s1_tmp2)

Executing: e1s2_tmp1 = drc(e1s2_90 e1 (sep < 3.5) shielded)

Executing: e1s2_tmp2 = drc(e1s2_45 e1 (sep < (3.5 - tolLeg)) shielded)

Executing: e1s2_err = geomOr(e1s2_tmp1 e1s2_tmp2)
	   errorLayer(e1s2_err "GRE1S2: E1(>11.50) space >=  3.50 um.")

Executing: errorLayer(geomOr(geomOutside(e1s1_err e1s2_err) geomStraddle(e1s1_err e1s2_err)) "GRE1S1: E1(> 8.00 and <=11.50) space >=  2.50 um.")

Executing: e1a3 = geomAnd(e1 geomWidth(e1 (keep > 14.0) truncate 7.0))

Executing: e1a4 = geomAnd(e1 geomWidth(e1 (keep > 17.5) truncate 8.75))

Executing: e1a5 = geomAnd(e1 geomWidth(e1 (keep > 21.0) truncate 10.5))

Executing: e1a6 = geomAnd(e1 geomWidth(e1 (keep > 24.5) truncate 12.25))

Executing: e1a7 = geomAnd(e1 geomWidth(e1 (keep > 28.0) truncate 14.0))

Executing: e1at = geomAnd(e1 geomWidth(e1 (keep > 30.0) truncate 15.0))

Executing: e1_hole = geomAndNot(geomHoles(e1_not_ring) e1_not_ring)

Executing: e1_a01_hole = geomButtOrOver(e1_hole e1a1)

Executing: e1_a02_hole = geomButtOrOver(e1_hole e1a2)

Executing: e1_a03_hole = geomButtOrOver(e1_hole e1a3)

Executing: e1_a04_hole = geomButtOrOver(e1_hole e1a4)

Executing: e1_a05_hole = geomButtOrOver(e1_hole e1a5)

Executing: e1_a06_hole = geomButtOrOver(e1_hole e1a6)

Executing: e1_a07_hole = geomButtOrOver(e1_hole geomAvoiding(e1a7 e1at))

Executing: e1a1_err = drc(e1_a01_hole (area < 19.0))

Executing: e1a2_err = drc(e1_a02_hole (area < 37.0))

Executing: e1a3_err = drc(e1_a03_hole (area < 61.0))

Executing: e1a4_err = drc(e1_a04_hole (area < 91.0))

Executing: e1a5_err = drc(e1_a05_hole (area < 127.0))

Executing: e1a6_err = drc(e1_a06_hole (area < 169.0))

Executing: e1a7_err = drc(e1_a07_hole (area < 217.0))
	   errorLayer(e1a7_err "GRE1A7: E1 enclosed area touching (E1 with width > 28.00 <= 30.00) >= 217.00 sq.um.")

Executing: errorLayer(geomOutside(e1a1_err e1a2_err) "GRE1A1: E1 enclosed area touching (E1 with width >  8.00 <= 11.50) >=  19.00 sq.um.")

Executing: errorLayer(geomOutside(e1a2_err e1a3_err) "GRE1A2: E1 enclosed area touching (E1 with width > 11.50 <= 14.00) >=  37.00 sq.um.")

Executing: errorLayer(geomOutside(e1a3_err e1a4_err) "GRE1A3: E1 enclosed area touching (E1 with width > 14.00 <= 17.50) >=  61.00 sq.um.")

Executing: errorLayer(geomOutside(e1a4_err e1a5_err) "GRE1A4: E1 enclosed area touching (E1 with width > 17.50 <= 21.00) >=  91.00 sq.um.")

Executing: errorLayer(geomOutside(e1a5_err e1a6_err) "GRE1A5: E1 enclosed area touching (E1 with width > 21.00 <= 24.50) >= 127.00 sq.um.")

Executing: errorLayer(geomOutside(e1a6_err e1a7_err) "GRE1A6: E1 enclosed area touching (E1 with width > 24.50 <= 28.00) >= 169.00 sq.um.")

Executing: drc(e2_not_ring (width < 1.991) "GRE2a: E2 width (min) >= 2.000 um.")

Executing: drc(e2 (sep < 1.992) "GRE2b: E2 space >= 2.000 um.")

Executing: drc(e2 (notch < 1.992) "GRE2b: E2 notch >= 2.000 um.")

Executing: drc(e2 (area < 4.0) "GRE2c: E2 area (min) >= 4.000 sq.um.")

Executing: erre2d = geomAndNot(e2_not_ring e1)
	   errorLayer(erre2d "GRE2d: E2 not within E1 found!")

Executing: drc(e1 e2_not_ring (enc < 0.6) "GRE2d: E2 must be within E1 >= 0.600 um.")

Executing: erre2e = geomAndNot(e2_not_ring ma)
	   errorLayer(erre2e "GRE2e: E2 not within MA found!")

Executing: e2_not_ind = geomAndNot(e2_not_ring ind_filt)

Executing: e2_ind = geomAnd(e2_not_ring ind_filt)

Executing: drc(ma e2_not_ind (enc < 1.76) "GRE2e: E2(not under IND) must be within MA >=...

Executing: drc(ma e2_ind (enc < (1.76 - tolLeg)) "GRE2e: E2(under IND) must be within MA...

Executing: ma_not_ring = geomAndNot(ma ma_ring)

Executing: e2_small = drc(e2_not_ring (area < 10.0))

Executing: e2_large = geomAndNot(e2_not_ring e2_small)

Executing: e1ma_e2 = geomOverlap(geomAnd(e1_not_ring ma_not_ring) e2)

Executing: e1ma_e2sm = geomAndNot(e1ma_e2 geomOverlap(e1ma_e2 e2_large))

Executing: e1ma_one_e2 = geomButtOrOver(e1ma_e2sm e2 (keep == 1))
	   errorLayer(e1ma_one_e2 "GRE2f: E1/MA intersection only enclosing one small E2 shape found!")

Executing: e1ma_two_e2 = geomButtOrOver(e1ma_e2sm e2 (keep == 2))

Executing: errptch_e2 = geomOverlap(e1ma_e2sm geomSize(geomInside(e2_not_ring e1ma_two_e...
	   errorLayer(errptch_e2 "GRE2f: E1/MA intersection with two small E2's not at minimum pitch found!")

Executing: drc(ft (width < 1.2391) "GRFT1: FT width == 1.24 um.(error <)")

Executing: drc(ft (area > 1.54) "GRFT1: FT width == 1.24 um.(error >)")

Executing: drc(ft (sep < 1.992) "GRFT2: FT space >= 2.000 um.")

Executing: ftb_ind = geomAnd(ftb_not_ring ind_filt)

Executing: ftb_out_ind = geomOutside(ftb_not_ring ind_filt)

Executing: errft3_noind = geomSize(geomSize(ftb_out_ind -0.62) 0.62)
	   errorLayer(errft3_noind "GRFT3: FTBAR(outside IND_FLT) width == 1.24 um.(error >)")

Executing: errft3ind = geomSize(geomSize(ftb_ind -0.629) 0.629)
	   errorLayer(errft3ind "GRFT3: FTBAR(over IND_FLT) width == 1.24 um.(error >)")

Executing: drc(ftb_out_ind (width < 1.24) "GRFT3: FTBAR(outside IND_FLT) width == 1.24 u...

Executing: drc(ftb_ind (width < 1.222) "GRFT3: FTBAR(over IND_FLT) width == 1.24 um.(err...

Executing: drc(ftb_not_ring (area < 1.56) "GRFT4: FTBAR length (min) <= 1.260 um.")

Executing: drc(ftb_not_ring (width < 1.3) (length > 20.0) "GRLEG_FT5: FTBAR length (max)...

Executing: errft6 = geomButtOrOver(ft ftbar)
	   errorLayer(errft6 "GRFT6: FT touching FTBAR found!")

Executing: drc(ft ftbar ((0 < sep) < 2.0) "GRFT6: FT to FTBAR space >= 2.000 um.")

Executing: drc(ftbar (sep < 2.0) "GRFT7: FTBAR space (run length <= 5.0) >= 2.000 um.")

Executing: drc(ftbar (sep < 4.0) (5.0 < app) "GRFT8: FTBAR space (run length > 5.0) >= 4...

Executing: errft9 = geomAndNot(ft mt)
	   errorLayer(errft9 "GRFT9: FT not within MT found!")

Executing: drc(mt_not_ring ft (enc < 1.0) "GRFT9: FT must be within MT >= 1.000 um.")

Executing: errft10 = geomAndNot(ftbar mt)
	   errorLayer(errft10 "GRFT10: FTBAR not within MT found!")

Executing: drc(mt_not_ring ftb_not_ring (enc < 1.0) "GRFT10: FTBAR must be within MT >= ...

Executing: errorLayer(geomGetPolygon(ft) "GRLEG_FT11: Non-retangular FT found!")

Executing: errorLayer(geomGetPolygon(ftb_not_ring) "GRLEG_FT11: Non-retangular FTBAR found!")

Executing: errft12_ft = geomGetAngledEdge(ft ((44.5 <= keep) <= 45.5) fig)
	   errorLayer(errft12_ft "GRLEG_FT12: 45 degree FT found!")

Executing: errft12_ftb = geomGetAngledEdge(ftb_not_ring ((44.5 <= keep) <= 45.5) fig)
	   errorLayer(errft12_ftb "GRLEG_FT12: 45 degree FTBAR found!")

Executing: am_not_ring = geomAnd(geomAndNot(am am_ring) LM0AM)

Executing: drc(am_not_ring (width < (2.0 - tolLeg)) withCornerTouch "GRAM1: AM width >= ...

Executing: drc(geomAnd(am LM0AM) (area < 10.0) "GRAM1a: AM area >= 10.000 sq.um.")

Executing: ft_all = geomOr(ft ftbar)

Executing: drc(am (sepNotch < (2.8 - tolGrid2)) withSingularPoint "GRAM2: AM to AM space...

Executing: ft_no_low_ind = geomSize(geomAndNot(ft_all geomOr(lowcrnt ind_filt)) 8.0)

Executing: am_ft_not_low_ind = geomAnd(am ft_no_low_ind)

Executing: am_to_check = geomGetEdge(am coincident am_ft_not_low_ind)

Executing: erram2a1 = geomAnd(drc(am_to_check am ((0 < sep) < (5.0 - tolGrid2))) ft_no_l...

Executing: erram2a = geomAnd(am geomSize(geomButting(erram2a1 am (keep > 1)) 0.01))

Executing: drc(erram2a (sep < (5.0 - tolGrid2)) "GRAM2a: AM space for AM edges over the ...

Executing: ftall_u_ind = geomAnd(ft_all ind_filt)

Executing: ft_ind_no_low = geomSize(geomAndNot(geomAnd(ft_all ind_filt) lowcrnt) 6.0)

Executing: am_ft_ind_not_low = geomAnd(am ft_ind_no_low)

Executing: am_edge_ind = geomGetEdge(am coincident am_ft_ind_not_low)

Executing: erram2aa1 = geomAnd(drc(am_edge_ind am ((0 < sep) < (5.0 - tolGrid2))) ft_ind...

Executing: erram2aa = geomAnd(am geomSize(geomButting(erram2aa1 am (keep > 1)) 0.01))

Executing: drc(erram2aa (sep < (5.0 - tolGrid2)) "GRAM2aa: AM space for AM edges (within...

Executing: am_not_ind = geomAndNot(am ind_filt)

Executing: indf_x5000 = geomSize(ind_filt 50.0)

Executing: am2b = geomAnd(am geomWidth(am_not_ind (keep > 10.006) truncate 5.003))

Executing: am2ba = geomAnd(am geomWidth(am (keep > 10.006) truncate 5.003))

Executing: am2b2 = geomAnd(am geomWidth(am (keep > 25.006) truncate 12.503))

Executing: am2c = geomAnd(am geomWidth(am (keep > 50.0) truncate 25.0))

Executing: erram2b_45 = geomGetNon90(am2b fig)

Executing: erram2b_90 = geomAndNot(am2b erram2b_45)

Executing: erram2ba_45 = geomGetNon90(am2ba fig)

Executing: erram2ba_90 = geomAndNot(am2ba erram2ba_45)

Executing: erram2b2_45 = geomGetNon90(am2b2 fig)

Executing: erram2b2_90 = geomAndNot(am2b2 erram2b2_45)

Executing: erram2c_45 = geomGetNon90(am2c fig)

Executing: erram2c_90 = geomAndNot(am2c erram2c_45)

Executing: erram2b_1 = drc(erram2b_90 am_not_ind (sep < 4.0) (shielded am))

Executing: erram2b_2 = drc(erram2b_45 am_not_ind (sep < (4.0 - tolGrid2)) (shielded am))

Executing: erram2b = geomOr(erram2b_1 erram2b_2)
	   errorLayer(erram2b "GRAM2b: (AM not over IND_FILT)(>10.00) to AM space >= 4.00 um.")

Executing: erram2ba_1 = drc(erram2ba_90 am (sep < 3.0) (shielded am))

Executing: erram2ba_2 = drc(erram2ba_45 am (sep < (3.0 - tolGrid2)) (shielded am))

Executing: erram2ba = geomAnd(geomOr(erram2ba_1 erram2ba_2) indf_x2500)

Executing: erram2b2_1 = drc(erram2b2_90 am (sep < 4.0) (shielded am))

Executing: erram2b2_2 = drc(erram2b2_45 am (sep < (4.0 - tolGrid2)) (shielded am))

Executing: erram2b2 = geomAnd(geomOr(erram2b2_1 erram2b2_2) indf_x5000)

Executing: erram2c_1 = drc(erram2c_90 am (sep < 5.0) (shielded am))

Executing: erram2c_2 = drc(erram2c_45 am (sep < (5.0 - tolGrid2)) (shielded am))

Executing: erram2c = geomOr(erram2c_1 erram2c_2)
	   errorLayer(erram2c "GRAM2c:  AM(>50.00) to AM space >= 5.00 um.")

Executing: errorLayer(geomOr(geomOutside(erram2ba erram2b2) geomStraddle(erram2ba erram2b2)) "GRAM2ba: AM over (IND_FILT +25.0)(>10.00 and <=25) to AM space >= 3.00 um.")

Executing: errorLayer(geomOr(geomOutside(erram2b2 erram2c) geomStraddle(erram2b2 erram2c)) "GRAM2b2: AM over (IND_FILT +50.0)(>25.00) to AM space >= 4.00 um.")

Executing: erram3ft = geomAnd(geomAndNot(ft am) LM0AM)
	   errorLayer(erram3ft "GRAM3: FT not within AM found!")

Executing: erram3ftb = geomAnd(geomAndNot(ftb_not_ring am) LM0AM)
	   errorLayer(erram3ftb "GRAM3: FTBAR not within AM found!")

Executing: drc(am ft (enc < (1.0 - tolGrid2)) "GRAM3: FT must be within AM >= 1.000 um.")

Executing: drc(am ftb_not_ring (enc < (1.0 - tolGrid2)) "GRAM3: FTBAR must be within AM ...

Executing: erram4dv = geomAnd(geomAndNot(geomInside(dv ChipEdge) am) LM0AM)
	   errorLayer(erram4dv "GRAM4: DV(within {GUARDEDGE,(CHIPEDGE not touching GUARDEDGE)}) not within AM found!")

Executing: erram4lv = geomAnd(geomAndNot(geomInside(lv ChipEdge) am) LM0AM)
	   errorLayer(erram4lv "GRAM4: LV(within {GUARDEDGE,(CHIPEDGE not touching GUARDEDGE)}) not within AM found!")

Executing: drc(ma_not_ring (width < (2.0 - tolLeg)) "GRMA1: MA width >= 2.000 um.")

Executing: drc(ma (area < 10.0) "GRMA1a: MA minimum area >= 10.00 sq.um.")

Executing: drc(ma (sepNotch < (2.8 - tolGrid2)) withSingularPoint "GRMA2: MA space >= 2....

Executing: e2_not_indLct = geomSize(geomAndNot(e2 geomOr(lowcrnt ind_filt)) 8.0)

Executing: ma_e2_not_ind = geomAnd(ma e2_not_indLct)

Executing: ma_e2_to_check = geomGetEdge(ma coincident ma_e2_not_ind)

Executing: errma2a1 = geomAnd(drc(ma_e2_to_check ma ((0 < sep) < (5.0 - tolGrid2))) e2_n...

Executing: errma2a = geomAnd(ma geomSize(geomButting(errma2a1 ma (keep > 1)) 0.01))

Executing: drc(errma2a (sep < (5.0 - tolGrid2)) "GRMA2a: MA space (within (E2 not over (...

Executing: e2_ind_ntlow = geomSize(geomAndNot(geomAnd(e2 ind_filt) lowcrnt) 6.0)

Executing: ma_e2_ind_ntlow = geomAnd(ma e2_ind_ntlow)

Executing: ma_coin_edge = geomGetEdge(ma coincident ma_e2_ind_ntlow)

Executing: errma2aa1 = geomAnd(drc(ma_coin_edge ma ((0 < sep) < (5.0 - tolGrid2))) e2_in...

Executing: errma2aa = geomAnd(ma geomSize(geomButting(errma2aa1 ma (keep > 1)) 0.01))

Executing: drc(errma2aa (sep < (5.0 - tolGrid2)) "GRMA2aa: MA space for MA edges (within...

Executing: ma_not_ind = geomAnd(geomAndNot(ma ind_filt) LM0MA)

Executing: ma2b = geomAnd(ma_not_ind geomWidth(ma_not_ind (keep > 10.006) truncate 5.003))

Executing: ma2ba = geomAnd(ma geomWidth(ma (keep > 10.006) truncate 5.003))

Executing: ma2b2 = geomAnd(ma geomWidth(ma (keep > 25.006) truncate 12.503))

Executing: ma2c = geomAnd(ma geomWidth(ma (keep > 50.0) truncate 25.0))

Executing: errma2b_45 = geomGetNon90(ma2b fig)

Executing: errma2b_90 = geomAndNot(ma2b errma2b_45)

Executing: errma2ba_45 = geomGetNon90(ma2ba fig)

Executing: errma2ba_90 = geomAndNot(ma2ba errma2ba_45)

Executing: errma2b2_45 = geomGetNon90(ma2b2 fig)

Executing: errma2b2_90 = geomAndNot(ma2b2 errma2b2_45)

Executing: errma2c_45 = geomGetNon90(ma2c fig)

Executing: errma2c_90 = geomAndNot(ma2c errma2c_45)

Executing: errma2b_1 = drc(errma2b_90 ma_not_ind (sep < 4.0) (shielded ma))

Executing: errma2b_2 = drc(errma2b_45 ma_not_ind (sep < (4.0 - tolGrid2)) (shielded ma))

Executing: errma2b = geomOr(errma2b_1 errma2b_2)
	   errorLayer(errma2b "GRMA2b: (MA not over IND_FILT)(>10.00) to MA space >= 4.00 um.")

Executing: errma2ba_1 = drc(errma2ba_90 ma (sep < 3.0) (shielded ma))

Executing: errma2ba_2 = drc(errma2ba_45 ma (sep < (3.0 - tolGrid2)) (shielded ma))

Executing: errma2ba = geomAnd(geomOr(errma2ba_1 errma2ba_2) indf_x2500)

Executing: errma2b2_1 = drc(errma2b2_90 ma (sep < 4.0) (shielded ma))

Executing: errma2b2_2 = drc(errma2b2_45 ma (sep < (4.0 - tolGrid2)) (shielded ma))

Executing: errma2b2 = geomAnd(geomOr(errma2b2_1 errma2b2_2) indf_x5000)

Executing: errma2c_1 = drc(errma2c_90 ma (sep < 5.0) (shielded ma))

Executing: errma2c_2 = drc(errma2c_45 ma (sep < (5.0 - tolGrid2)) (shielded ma))

Executing: errma2c = geomOr(errma2c_1 errma2c_2)
	   errorLayer(errma2c "GRMA2c:  MA(>50.00) to MA space >= 5.00 um.")

Executing: errorLayer(geomOr(geomOutside(errma2ba errma2b2) geomStraddle(errma2ba errma2b2)) "GRMA2ba: MA over (IND_FILT +25.0)(>10.00 and <=25) to MA space >= 3.00 um.")

Executing: errorLayer(geomOr(geomOutside(errma2b2 errma2c) geomStraddle(errma2b2 errma2c)) "GRMA2b2: MA over (IND_FILT +50.0)(>25.00 and <=50) to MA space >= 4.00 um.")

Executing: errma4dv = geomAnd(geomAndNot(geomInside(dv ChipEdge) ma) LM0MA)
	   errorLayer(errma4dv "GRMA4: DV(within {GUARDEDGE,(CHIPEDGE not touching GUARDEDGE)}) not within MA found!")

Executing: errma4lv = geomAnd(geomAndNot(geomInside(lv ChipEdge) ma) LM0MA)
	   errorLayer(errma4lv "GRMA4: LV(within {GUARDEDGE,(CHIPEDGE not touching GUARDEDGE)}) not within MA found!")

Executing: ml_not_ring = geomAnd(geomAndNot(ml ml_ring) LM0ML)

Executing: drc(ml_not_ring (width < (2.4 - tolLeg)) withCornerTouch "GRML1: ML width >= ...

Executing: drc(ml (sepNotch < (2.4 - tolLeg)) withSingularPoint "GRML2: ML space >= 2.40...

Executing: errml3ft = geomAnd(geomAndNot(ft ml) LM0ML)
	   errorLayer(errml3ft "GRML3: FT not within ML found!")

Executing: errml3ftb = geomAnd(geomAndNot(ftb_not_ring ml) LM0ML)
	   errorLayer(errml3ftb "GRML3: FTBAR not within ML found!")

Executing: drc(ml ft (enc < (0.6 - tolLeg)) "GRML3: FT must be within ML >= 0.600 um.")

Executing: drc(ml ftb_not_ring (enc < (0.6 - tolLeg)) "GRML3: FTBAR must be within ML >=...

Executing: errml4dv = geomAnd(geomAndNot(geomInside(dv ChipEdge) ml) LM0ML)
	   errorLayer(errml4dv "GRML4: DV(within {GUARDEDGE,(CHIPEDGE not touching GUARDEDGE)}) not within ML found!")

Executing: errml4lv = geomAnd(geomAndNot(geomInside(lv ChipEdge) ml) LM0ML)
	   errorLayer(errml4lv "GRML4: LV(within {GUARDEDGE,(CHIPEDGE not touching GUARDEDGE)}) not within ML found!")

Executing: errmz1 = geomAnd(drc(mz_not_ring (width < (2.0 - tolLeg)) withCornerTouch) LM...
	   errorLayer(errmz1 "GRMZ1: MZ width >= 2.00 um.")

Executing: errmz1a = geomAnd(drc(mz (area < 10.0)) LM0MZ)
	   errorLayer(errmz1a "GRMZ1a: MZ area >= 10.00 um.")

Executing: errmz2 = geomAnd(drc(mz (sepNotch < (2.8 - tolLeg)) withSingularPoint) LM0MZ)
	   errorLayer(errmz2 "GRMZ2: MZ space >= 2.80 um.")

Executing: mz_ft_not_low_ind = geomAnd(mz ft_no_low_ind)

Executing: mz_to_check = geomGetEdge(mz coincident mz_ft_not_low_ind)

Executing: errmz2a1 = geomAnd(drc(mz_to_check mz ((0 < sep) < (5.0 - tolGrid2))) ft_no_l...

Executing: errmz2a = geomAnd(mz geomSize(geomButting(errmz2a1 mz (keep > 1)) 0.01))

Executing: errmz2a_f = geomAnd(drc(errmz2a (sep < (5.0 - tolGrid2)) withSingularPoint) L...
	   errorLayer(errmz2a_f "GRMZ2a: MZ space for MZ edges within ((FT,FTBAR) not over (LOWCRNT, IND_FILT) +8.0 um.) >= 5.000 um.")

Executing: mz_ft_ind_not_low = geomAnd(mz ft_ind_no_low)

Executing: mz_edge_ind = geomGetEdge(mz coincident mz_ft_ind_not_low)

Executing: errmz2aa1 = geomAnd(drc(mz_edge_ind mz ((0 < sep) < (5.0 - tolGrid2))) ft_ind...

Executing: errmz2aa = geomAnd(mz geomSize(geomButting(errmz2aa1 mz (keep > 1)) 0.01))

Executing: errmz2aa_f = geomAnd(drc(errmz2aa (sep < (5.0 - tolGrid2)) withSingularPoint)...
	   errorLayer(errmz2aa_f "GRMZ2aa: mz space for mz edges within ((((FT,FTBAR) over IND_FILT) not over LOWCRNT) +6.0 um.) >= 5.000 um.")

Executing: mz_not_ind = geomAnd(geomAndNot(mz ind_filt) LM0MZ)

Executing: mz2b = geomAnd(mz_not_ind geomWidth(mz_not_ind (keep > 10.006) truncate 5.003))

Executing: mz2ba = geomAnd(mz geomWidth(mz (keep > 10.006) truncate 5.003))

Executing: mz2b2 = geomAnd(mz geomWidth(mz (keep > 25.006) truncate 12.503))

Executing: mz2c = geomAnd(mz geomWidth(mz (keep > 50.0) truncate 25.0))

Executing: errmz2b_45 = geomGetNon90(mz2b fig)

Executing: errmz2b_90 = geomAndNot(mz2b errmz2b_45)

Executing: errmz2ba_45 = geomGetNon90(mz2ba fig)

Executing: errmz2ba_90 = geomAndNot(mz2ba errmz2ba_45)

Executing: errmz2b2_45 = geomGetNon90(mz2b2 fig)

Executing: errmz2b2_90 = geomAndNot(mz2b2 errmz2b2_45)

Executing: errmz2c_45 = geomGetNon90(mz2c fig)

Executing: errmz2c_90 = geomAndNot(mz2c errmz2c_45)

Executing: errmz2b_1 = drc(errmz2b_90 mz_not_ind (sep < 4.0) (shielded mz))

Executing: errmz2b_2 = drc(errmz2b_45 mz_not_ind (sep < (4.0 - tolGrid2)) (shielded mz))

Executing: errmz2b = geomOr(errmz2b_1 errmz2b_2)
	   errorLayer(errmz2b "GRMZ2b: (MZ not over IND_FILT)(>10.00) to MZ space >= 4.00 um.")

Executing: errmz2ba_1 = drc(errmz2ba_90 mz (sep < 3.0) (shielded mz))

Executing: errmz2ba_2 = drc(errmz2ba_45 mz (sep < (3.0 - tolGrid2)) (shielded mz))

Executing: errmz2ba = geomAnd(geomOr(errmz2ba_1 errmz2ba_2) indf_x2500)

Executing: errmz2b2_1 = drc(errmz2b2_90 mz (sep < 4.0) (shielded mz))

Executing: errmz2b2_2 = drc(errmz2b2_45 mz (sep < (4.0 - tolGrid2)) (shielded mz))

Executing: errmz2b2 = geomAnd(geomOr(errmz2b2_1 errmz2b2_2) indf_x5000)

Executing: errmz2c_1 = drc(errmz2c_90 mz (sep < 5.0) (shielded mz))

Executing: errmz2c_2 = drc(errmz2c_45 mz (sep < (5.0 - tolGrid2)) (shielded mz))

Executing: errmz2c = geomOr(errmz2c_1 errmz2c_2)
	   errorLayer(errmz2c "GRMZ2c:  MZ(>50.00) to MZ space >= 5.00 um.")

Executing: errorLayer(geomOr(geomOutside(errmz2ba errmz2b2) geomStraddle(errmz2ba errmz2b2)) "GRMZ2ba: MA over (IND_FILT +25.0)(>10.00 and <=25) to MZ space >= 3.00 um.")

Executing: errorLayer(geomOr(geomOutside(errmz2b2 errmz2c) geomStraddle(errmz2b2 errmz2c)) "GRMZ2b2: MA over (IND_FILT +50.0)(>25.00 and <=50) to MZ space >= 4.00 um.")

Executing: errmz3ft = geomAnd(geomAndNot(ft mz) LM0MZ)
	   errorLayer(errmz3ft "GRMZ3: FT not within MZ found!")

Executing: errmz3ftb = geomAnd(geomAndNot(ftb_not_ring mz) LM0MZ)
	   errorLayer(errmz3ftb "GRMZ3: FTBAR not within MZ found!")

Executing: drc(mz ft (enc < (1.0 - tolGrid2)) "GRMZ3: FT must be within MZ >= 1.000 um.")

Executing: drc(mz ftb_not_ring (enc < (1.0 - tolGrid2)) "GRMZ3: FTBAR must be within MZ ...

Executing: errmz4 = geomAnd(geomAndNot(geomInside(tv ChipEdge) mz) LM0MZ)
	   errorLayer(errmz4 "GRMZ4: (TV within {GUARDEDGE,(CHIPEDGE not touching GUARDEDGE)} ) not within MZ found!")

Executing: errmz5 = geomAnd(geomButtOrOver(mz geomButtOrOver(chipedge dv)) LM0MZ)
	   errorLayer(errmz5 "GRMZ5: MZ touching (CHIPEDGE touching DV) is not allowed found!")

Executing: errqcap1dqt = geomSize(geomSize(qt -500.0) 500.0)
	   errorLayer(errqcap1dqt "GRQCAP1d: QT width (max) <= 1,000.0 um.")

Executing: errqcap1dht = geomSize(geomSize(ht -500.0) 500.0)
	   errorLayer(errqcap1dht "GRQCAP1d: HT width (max) <= 1,000.0 um.")

Executing: drc(qt (width < 4.0) "GRQCAP1: QT width >= 4.000 um.")

Executing: drc(ht (width < 4.0) "GRQCAP1a: HT width >= 4.000 um.")

Executing: drc(qt (area > 100000.0) "GRQCAP1b: QT area (max per shape) <= 100,000.0 sq.u...

Executing: drc(ht (area > 100000.0) "GRQCAP1b: HT area (max per shape) <= 100,000.0 sq.u...

Executing: errqcap2a_qt = geomGetPolygon(qt)
	   errorLayer(errqcap2a_qt "GRQCAP2a: Non-rectangular QT shapes found!")

Executing: errqcap2a_ht = geomGetPolygon(ht)
	   errorLayer(errqcap2a_ht "GRQCAP2a: Non-rectangular HT shapes found!")

Executing: errqcap2b_qt = geomOverlap(qt geomSize(geomLineEnd(qt 1000.0 4.0 (legs 3.0001...
	   errorLayer(errqcap2b_qt "GRQCAP2b: QT MIM aspect ratio > 3.0 found!")

Executing: errqcap2b_ht = geomOverlap(ht geomSize(geomLineEnd(ht 1000.0 4.0 (legs 3.0001...
	   errorLayer(errqcap2b_ht "GRQCAP2b: HT MIM aspect ratio > 3.0 found!")

Executing: drc(qt (sep < 2.2) "GRQCAP2: QT space >= 2.200 um.")

Executing: drc(ht (sep < 3.6) "GRQCAP2a1: HT space >= 3.600 um.")

Executing: errqcap3 = geomAndNot(qt mt)
	   errorLayer(errqcap3 "GRQCAP3: QT not within MT found!")

Executing: errqcap3a = geomAndNot(ht qt)
	   errorLayer(errqcap3a "GRQCAP3a: HT not within QT found!")

Executing: drc(mt qt (enc < 0.7) "GRQCAP3: QT must be within MT >= 0.700 um.")

Executing: drc(qt ht (enc < 0.7) "GRQCAP3a: HT must be within QT >= 0.700 um.")

Executing: qt_encl_ht = geomEnclose(qt ht)

Executing: ft_out_ht = geomOutside(geomButtOrOver(ft qt) ht)

Executing: errqcap4 = geomOutside(qt_encl_ht ft_out_ht)
	   errorLayer(errqcap4 "GRQCAP4: QT(touching HT) not touching FT(outside of HT) found!")

Executing: ft_strad_qt = geomStraddle(ft qt)
	   errorLayer(ft_strad_qt "GRQCAP4: FT straddling QT found!")

Executing: ft_strad_ht = geomStraddle(ft ht)
	   errorLayer(ft_strad_ht "GRQCAP4b: FT straddling HT found!")

Executing: errqcap4av1 = geomAnd(geomEnclose(geomButtOrOver(mt_not_ring qt) v1) geomOr(L...
	   errorLayer(errqcap4av1 "GRQCAP4a: (MT touching QT) touching V1 found!")

Executing: errqcap4av2 = geomAnd(geomEnclose(geomButtOrOver(mt_not_ring qt) v2) geomOr(L...
	   errorLayer(errqcap4av2 "GRQCAP4a: (MT touching QT) touching V2 found!")

Executing: errqcap4av3 = geomAnd(geomEnclose(geomButtOrOver(mt_not_ring qt) v3) geomOr(L...
	   errorLayer(errqcap4av3 "GRQCAP4a: (MT touching QT) touching V3 found!")

Executing: errqcap4av4 = geomAnd(geomEnclose(geomButtOrOver(mt_not_ring qt) v4) geomOr(L...
	   errorLayer(errqcap4av4 "GRQCAP4a: (MT touching QT) touching V4 found!")

Executing: errqcap4av5 = geomAnd(geomEnclose(geomButtOrOver(mt_not_ring qt) v5) geomOr(L...
	   errorLayer(errqcap4av5 "GRQCAP4a: (MT touching QT) touching V5 found!")

Executing: drc(qt ft (enc < 1.2) "GRQCAP4: FT within QT >= 1.200 um.")

Executing: drc(ht ft (enc < 1.2) "GRQCAP4b: FT within HT >= 1.200 um.")

Executing: drc(ft ht (sep < 1.0) "GRQCAP4c: FT to HT space >= 1.000 um.")

Executing: drc(ft qt (sep < 1.0) "GRQCAP5: FT to adjacent QT >= 1.000 um.")

Executing: drc(ftbar qt ((0 < sep) < 1.0) "GRQCAP5: FTBAR to adjacent QT >= 1.000 um.")

Executing: errqcap6 = geomButtOrOver(ftbar qt)
	   errorLayer(errqcap6 "GRQCAP6: FTBAR touching QT found!")

Executing: pc_or_di_or_pi = geomOr(pc di pi mosvar)

Executing: bb_out_pcdipi = geomAvoiding(bb pc_or_di_or_pi)

Executing: nw_out_pcdipi = geomAvoiding(nw pc_or_di_or_pi)

Executing: errqcap8_bb = geomStraddle(qt bb_out_pcdipi)
	   errorLayer(errqcap8_bb "GRQCAP8b: QT straddling BB(not touching (PC or DI or PI or MOSVAR)) found!")

Executing: errqcap8_nw = geomStraddle(qt nw_out_pcdipi)
	   errorLayer(errqcap8_nw "GRQCAP8b: QT straddling NW(not touching (PC or DI or PI or MOSVAR)) found!")

Executing: drc(bb_out_pcdipi qt (enc < 4.0) "GRQCAP8b: QT within BB(not touching (PC or ...

Executing: drc(nw_out_pcdipi qt (enc < 4.0) "GRQCAP8b: QT within NW(not touching (PC or ...

Executing: mt_touching_qt = geomAndNot(mt geomAvoiding(mt qt))

Executing: mt_notch = drc(mt_touching_qt (notch < 0.8))

Executing: errqcap10 = geomAndNot(drc(mt_touching_qt mt (sep < 0.8)) mt_notch)
	   errorLayer(errqcap10 "GRQCAP10: (MT touching QT) to MT space >= 0.800!")

Executing: qt_over_nw = geomInside(qt nw)

Executing: drc(nw qt_over_nw (enc < 4.0) "GRQCAP12b: QT(covered by NW) within NW >= 4.00...

Executing: qt_qcap16 = geomAvoiding(qt geomOr(nw pc rx))

Executing: qt_qcap16_1 = geomAvoiding(qt geomOr(pc rx))

Executing: drc(ns qt_qcap16_1 (sep < 4.6) "GRQCAP16: NS to adjacent QT(not touching {PC,...

Executing: drc(nw qt_qcap16 (sep < 4.6) "GRQCAP16b: NW to adjacent QT(not touching {NW,P...

Executing: qt_touch_mimhk = geomOverlap(qt geomAnd(geomSize(mimhk 0.01) qt))

Executing: qt_touch_mimhk_exist = geomEnclose(bkgnd qt_touch_mimhk)

Executing: errqcap21 = geomAnd(geomAndNot(qt mimhk) qt_touch_mimhk_exist)
	   errorLayer(errqcap21 "GRQCAP21: QT shapes must be covered by MIM_HK (if at least one QT touch MIM_HK).")

Executing: ht_exist = geomEnclose(bkgnd ht)

Executing: mimhk_exist = geomEnclose(bkgnd mimhk)

Executing: errqcap22 = geomAnd(geomOr(ht mimhk) geomAnd(ht_exist mimhk_exist))
	   errorLayer(errqcap22 "GRQCAP22: HT and MIM_HK cannot exist in the same design !!!")

Executing: mim_hk_good = geomOverlap(mimhk geomAnd(geomSize(qt 0.01) mimhk))

Executing: errqcap22a = geomAndNot(mimhk mim_hk_good)
	   errorLayer(errqcap22a "GRQCAP22a: (MIM_HK not touching QT) found!")

Executing: processAntenna((qt_hk (gate qt_hk) (antenna ft_qt_hk) (keep > 0.1))
	   errorLayer(errqcap23a "GRQCAP23a: (Ratio of (FT over (QT touching MIMHK or MIMHD)) area to QT area) > 10.0% found !")
running in speedup mode

Executing: processAntenna((ht_hd (gate ht_hd) (antenna ft_ht_hd) (keep > 0.1))
	   errorLayer(errqcap23b "GRQCAP23b: (Ratio of (FT over HT) area to HT area) > 10.0% found !")
running in speedup mode

Executing: mimhd_exist = geomEnclose(bkgnd mimhd)

Executing: qt_touch_mimhd = geomOverlap(qt geomAnd(geomSize(mimhd 0.01) qt))

Executing: qt_touch_mimhd_exist = geomEnclose(bkgnd qt_touch_mimhd)

Executing: errqcap30 = geomAnd(geomAndNot(qt mimhd) qt_touch_mimhd_exist)
	   errorLayer(errqcap30 "GRQCAP30: QT shapes must be covered by MIM_HD (if at least one QT touch MIM_HD).")

Executing: errqcap30_bis = geomAnd(mimhd geomAnd(mimhd_exist mimht_exist))
	   errorLayer(errqcap30_bis "GRQCAP30: MIM_HD and HT can not exist in same design")

Executing: mim_hd_good = geomOverlap(mimhd geomAnd(geomSize(qt 0.01) mimhd))

Executing: errqcap30a = geomAndNot(mimhd mim_hd_good)
	   errorLayer(errqcap30a "GRQCAP30a: (MIM_HD not covering QT) found!")

Executing: errqcap30a_2 = geomButtOrOver(mimhd geomAndNot(qt_touch_mimhd mimhd))
	   errorLayer(errqcap30a_2 "GRQCAP30a: (MIM_HD partly covering QT) found!")

Executing: errqcap33a = geomOverlap(mimhd geomAnd(geomSize(mimhk 0.01) mimhd))

Executing: errqcap33b = geomButtOrOver(mimhd mimhk)

Executing: errqcap33 = geomOr(errqcap33a errqcap33b)
	   errorLayer(errqcap33 "GRQCAP33: MIM_HD touching MIM_HK found !!!")

Executing: errqcap34 = geomAnd(geomOr(mimhd mimhk) geomAnd(mimhd_exist mimhk_exist))
	   errorLayer(errqcap34 "GRQCAP34: MIM_HD MIM_HK cannot exist in the same design !!!")

Executing: am_ind = geomAnd(am ind_filt)

Executing: ma_ind = geomAnd(ma ind_filt)

Executing: ml_ind = geomAnd(ml ind_filt)

Executing: errind10b = geomAnd(geomOverlap(ind_filt geomSize(geomButtOrOver(chipedge mz)...
	   errorLayer(errind10b "GRIND10b: IND_FILT touching ( CHIPEDGE touching MZ )  found!!")

Executing: bn_ind11 = geomAnd(bn ind_filt)
	   errorLayer(bn_ind11 "GRIND11: Invalid layer under IND_FLT found! (BN)")

Executing: bp_ind11 = geomAnd(bp ind_filt)
	   errorLayer(bp_ind11 "GRIND11: Invalid layer under IND_FLT found! (BP)")

Executing: cabar_ind11 = geomAnd(cabar ind_filt)
	   errorLayer(cabar_ind11 "GRIND11: Invalid layer under IND_FLT found! (CABAR)")

Executing: lv_ind11 = geomAnd(lv ind_filt)
	   errorLayer(lv_ind11 "GRIND11: Invalid layer under IND_FLT found! (LV)")

Executing: lvd_ind11 = geomAnd(lvdummy ind_filt)
	   errorLayer(lvd_ind11 "GRIND11: Invalid layer under IND_FLT found! (LVDUMMY)")

Executing: m1_not_M1_MT = geomAndNot(m1 geomOr(LM1AM LM1ML LM1MA))

Executing: m1_strad = geomStraddle(m1_not_M1_MT ind_filt)
	   errorLayer(m1_strad "GRIND11: M1 straddling IND_FLT found!")

Executing: m2_ind11 = geomOutside(geomAnd(m2 ind_filt) geomOr(v1 v2))
	   errorLayer(m2_ind11 "GRIND11: Invalid layer under IND_FLT found! (M2)")

Executing: m3_ind = geomAnd(m3 ind_filt)

Executing: m3_ind11 = geomOutside(geomAnd(m3 ind_filt) geomOr(v2 v3))
	   errorLayer(m3_ind11 "GRIND11: Invalid layer under IND_FLT found! (M3)")

Executing: m4_ind = geomAnd(m4 ind_filt)

Executing: m4_ind11 = geomOutside(geomAnd(m4 ind_filt) geomOr(v3 v4))
	   errorLayer(m4_ind11 "GRIND11: Invalid layer under IND_FLT found! (M4)")

Executing: m5_ind = geomAnd(m5 ind_filt)

Executing: m5_ind11 = geomOutside(geomAnd(m5 ind_filt) geomOr(v4 v5))
	   errorLayer(m5_ind11 "GRIND11: Invalid layer under IND_FLT found! (M5)")

Executing: ns_ind11 = geomAnd(ns ind_filt)
	   errorLayer(ns_ind11 "GRIND11: Invalid layer under IND_FLT found! (NS)")

Executing: nw_ind11 = geomAnd(nw ind_filt)
	   errorLayer(nw_ind11 "GRIND11: Invalid layer under IND_FLT found! (NW)")

Executing: op_ind11 = geomAnd(op ind_filt)
	   errorLayer(op_ind11 "GRIND11: Invalid layer under IND_FLT found! (OP)")

Executing: qt_ind11 = geomAnd(qt ind_filt)
	   errorLayer(qt_ind11 "GRIND11: Invalid layer under IND_FLT found! (QT)")

Executing: rn_ind11 = geomAnd(rn ind_filt)
	   errorLayer(rn_ind11 "GRIND11: Invalid layer under IND_FLT found! (RN)")

Executing: rx_ind11 = geomOverlap(geomButtOrOver(rx ind_filt) geomAndNot(ca pc))
	   errorLayer(rx_ind11 "GRIND11: Invalid layer under IND_FLT found! (RX)")

Executing: rx_strad = geomStraddle(rx ind_filt)
	   errorLayer(rx_strad "GRIND11: RX straddling IND_FLT found!")

Executing: v1_u_ind = geomAnd(v1 ind_filt)

Executing: v1_ind_M1_MT = geomAnd(v1_u_ind geomOr(LM1AM LM1ML LM1MA))

Executing: mt_ind = geomAnd(mt ind_filt)

Executing: mt_ind11 = geomOutside(geomAnd(mt ind_filt) geomOr(ftall_u_ind v1_ind_M1_MT))
	   errorLayer(mt_ind11 "GRIND11: Invalid layer under IND_FLT found! (MT)")

Executing: drc(ns ind_filt (sep < 4.6) "GRIND12: NS to IND_FILT space >= 4.600 um.")

Executing: errind13_am = geomAndNot(am_ind bb)
	   errorLayer(errind13_am "GRIND13: AM(over IND_FLT) not covered by BB found!")

Executing: errind13_e1 = geomAndNot(e1_ind bb)
	   errorLayer(errind13_e1 "GRIND13: E1(over IND_FLT) not covered by BB found!")

Executing: errind13_ma = geomAndNot(ma_ind bb)
	   errorLayer(errind13_ma "GRIND13: MA(over IND_FLT) not covered by BB found!")

Executing: errind13_ml = geomAndNot(ml_ind bb)
	   errorLayer(errind13_ml "GRIND13: ML(over IND_FLT) not covered by BB found!")

Executing: errind16bp = geomButtOrOver(bb_ind bp)
	   errorLayer(errind16bp "GRIND16: (BB touch IND_FLT) touching BP found!")

Executing: errind16pc = geomButtOrOver(bb_ind geomOutside(pc ind_filt))
	   errorLayer(errind16pc "GRIND16: (BB touch IND_FLT) touching (PC not touching IND_FLT) found!")

Executing: errind16rx = geomButtOrOver(bb_ind geomOutside(rx ind_filt))
	   errorLayer(errind16rx "GRIND16: (BB touch IND_FLT) touching (RX not touching IND_FLT) found!")

Executing: inductor = geomOr(am_ind ma_ind ml_ind)

Executing: errshort = geomAndNot(inductor geomOr(tline_am tline_ma tline_ml))
	   errorLayer(errshort "GRIND23: SHORTED INDUCTOR COILS FOUND!")

Executing: e1_coil_ind = geomAnd(e1_coil ind_filt)

Executing: errind23a = geomXor(e1_coil_ind e1_ind)
	   errorLayer(errind23a "GRIND23a: E1 over IND_FILT must match exactly E1_COIL!")

Executing: m3_coil_ind = geomAnd(m3_coil ind_filt)

Executing: m4_coil_ind = geomAnd(m4_coil ind_filt)

Executing: m5_coil_ind = geomAnd(m5_coil ind_filt)

Executing: mt_coil_ind = geomAnd(mt_coil ind_filt)

Executing: errind23bm3 = geomXor(m3_coil_ind m3_ind)
	   errorLayer(errind23bm3 "GRIND23b: M3 over IND_FILT must match exactly M3_COIL!")

Executing: errind23bm4 = geomXor(m4_coil_ind m4_ind)
	   errorLayer(errind23bm4 "GRIND23b: M4 over IND_FILT must match exactly M4_COIL!")

Executing: errind23bm5 = geomXor(m5_coil_ind m5_ind)
	   errorLayer(errind23bm5 "GRIND23b: M5 over IND_FILT must match exactly M5_COIL!")

Executing: errind23bmt = geomXor(mt_coil_ind mt_ind)
	   errorLayer(errind23bmt "GRIND23b: MT over IND_FILT must match exactly MT_COIL!")

Executing: am_tline = geomAnd(am tline)

Executing: ma_tline = geomAnd(ma tline)

Executing: ml_tline = geomAnd(ml tline)

Executing: errtl1b_am = geomSize(geomSize(am_tline -12.5) 12.5)
	   errorLayer(errtl1b_am "GRTL1b: (AM over TLINE) width (max) <= 25.00 um.")

Executing: errtl1b_ma = geomSize(geomSize(ma_tline -12.5) 12.5)
	   errorLayer(errtl1b_ma "GRTL1b: (MA over TLINE) width (max) <= 25.00 um.")

Executing: errtl1b_ml = geomSize(geomSize(ml_tline -12.5) 12.5)
	   errorLayer(errtl1b_ml "GRTL1b: (ML over TLINE) width (max) <= 25.00 um.")

Executing: drc(tline am (enc < 20.0) "GRTL2a: TLINE overlap past AM >= 20.00 um.")

Executing: drc(tline ma (enc < 20.0) "GRTL2a: TLINE overlap past MA >= 20.00 um.")

Executing: drc(tline ml (enc < 20.0) "GRTL2a: TLINE overlap past ML >= 20.00 um.")

Executing: drc(am tline (enc < 1.0) "GRTL2b: AM overlap past TLINE >= 1.00 um")

Executing: drc(ma tline (enc < 1.0) "GRTL2b: MA overlap past TLINE >= 1.00 um")

Executing: drc(ml tline (enc < 1.0) "GRTL2b: ML overlap past TLINE >= 1.00 um")

Executing: amtl_length = geomGetLength(am_tline ((3.98 < keep) < 25.02))

Executing: matl_length = geomGetLength(ma_tline ((3.98 < keep) < 25.02))

Executing: mltl_length = geomGetLength(ml_tline ((3.98 < keep) < 25.02))

Executing: amtl_length_fail = geomGetAdjacentEdge(am_tline amtl_length)

Executing: matl_length_fail = geomGetAdjacentEdge(ma_tline matl_length)

Executing: mltl_length_fail = geomGetAdjacentEdge(ml_tline mltl_length)

Executing: amtl_length_err = geomEnclose(am_tline geomSize(geomGetLength(amtl_length_fai...
	   errorLayer(amtl_length_err "GRTL3b: (AM over TLINE) length (min) >= 100.00 um.")

Executing: matl_length_err = geomEnclose(ma_tline geomSize(geomGetLength(matl_length_fai...
	   errorLayer(matl_length_err "GRTL3b: (MA over TLINE) length (min) >= 100.00 um.")

Executing: mltl_length_err = geomEnclose(ml_tline geomSize(geomGetLength(mltl_length_fai...
	   errorLayer(mltl_length_err "GRTL3b: (ML over TLINE) length (min) >= 100.00 um.")

Executing: drc(am_tline (area < 400.0) "GRTL3a: (AM over TLINE) area (min) >= 400.00 sq....

Executing: drc(ma_tline (area < 400.0) "GRTL3a: (MA over TLINE) area (min) >= 400.00 sq....

Executing: drc(ml_tline (area < 400.0) "GRTL3a: (ML over TLINE) area (min) >= 400.00 sq....

Executing: errtl4b_am = geomEnclose(am_tline geomAnd(geomSize(geomGetEdge(tline over am)...
	   errorLayer(errtl4b_am "GRTL4b: (AM over TLINE) length (max) >= 1500.00 um.")

Executing: errtl4b_ma = geomEnclose(ma_tline geomAnd(geomSize(geomGetEdge(tline over ma)...
	   errorLayer(errtl4b_ma "GRTL4b: (MA over TLINE) length (max) >= 1500.00 um.")

Executing: errtl4b_ml = geomEnclose(ml_tline geomAnd(geomSize(geomGetEdge(tline over ml)...
	   errorLayer(errtl4b_ml "GRTL4b: (ML over TLINE) length (max) >= 1500.00 um.")

Executing: drc(am_tline (area > 37500.0) "GRTL4a: (AM over TLINE) area (max) >= 37,500.0...

Executing: drc(ma_tline (area > 37500.0) "GRTL4a: (MA over TLINE) area (max) >= 37,500.0...

Executing: drc(ml_tline (area > 37500.0) "GRTL4a: (ML over TLINE) area (max) >= 37,500.0...

Executing: errtl5_am = geomAndNot(am_tline bb)
	   errorLayer(errtl5_am "GRTL5: (AM over TLINE) not within BB found!")

Executing: errtl5_ma = geomAndNot(ma_tline bb)
	   errorLayer(errtl5_ma "GRTL5: (MA over TLINE) not within BB found!")

Executing: errtl5_ml = geomAndNot(ml_tline bb)
	   errorLayer(errtl5_ml "GRTL5: (ML over TLINE) not within BB found!")

Executing: drc(bb am_tline (enc < 4.0) withSingularPoint "GRTL5: (AM over TLINE) must be...

Executing: drc(bb ma_tline (enc < 4.0) withSingularPoint "GRTL5: (AM over TLINE) must be...

Executing: drc(bb ml_tline (enc < 4.0) withSingularPoint "GRTL5: (AM over TLINE) must be...

Executing: m1_tl6a = geomButtOrOver(m1 tline)
	   errorLayer(m1_tl6a "GRTL6a: Invalid layer under TLINE found! (M1)")

Executing: m2_tl6a = geomButtOrOver(m2 tline)
	   errorLayer(m2_tl6a "GRTL6a: Invalid layer under TLINE found! (M2)")

Executing: m3_tl6a = geomButtOrOver(m3 tline)
	   errorLayer(m3_tl6a "GRTL6a: Invalid layer under TLINE found! (M3)")

Executing: m4_tl6a = geomButtOrOver(m4 tline)
	   errorLayer(m4_tl6a "GRTL6a: Invalid layer under TLINE found! (M4)")

Executing: m5_tl6a = geomButtOrOver(m5 tline)
	   errorLayer(m5_tl6a "GRTL6a: Invalid layer under TLINE found! (M5)")

Executing: mt_tl6a = geomButtOrOver(mt tline)
	   errorLayer(mt_tl6a "GRTL6a: Invalid layer under TLINE found! (MT)")

Executing: ns_tl6a = geomButtOrOver(ns tline)
	   errorLayer(ns_tl6a "GRTL6a: Invalid layer under TLINE found! (NS)")

Executing: nw_tl6a = geomButtOrOver(nw tline)
	   errorLayer(nw_tl6a "GRTL6a: Invalid layer under TLINE found! (NW)")

Executing: pc_tl6a = geomButtOrOver(pc tline)
	   errorLayer(pc_tl6a "GRTL6a: Invalid layer under TLINE found! (PC)")

Executing: rx_outca = geomAvoiding(rx ca_all)

Executing: rx_tl6a = geomButtOrOver(rx_outca tline)
	   errorLayer(rx_tl6a "GRTL6a: Invalid layer under TLINE found! (RX)")

Executing: drc(am_tline (sep < 40.0) "GRTL6b: (AM over TLINE) space >= 40.00 um.")

Executing: drc(ma_tline (sep < 40.0) "GRTL6b: (MA over TLINE) space >= 40.00 um.")

Executing: drc(ml_tline (sep < 40.0) "GRTL6b: (ML over TLINE) space >= 40.00 um.")

Executing: errtl9_am = geomAnd(geomGetPolygon(am_tline) LM0AM)
	   errorLayer(errtl9_am "GRTL9: Non-rectangular (AM over TLINE) found!")

Executing: errtl9_ma = geomAnd(geomGetPolygon(ma_tline) LM0MA)
	   errorLayer(errtl9_ma "GRTL9: Non-rectangular (MA over TLINE) found!")

Executing: errtl9_ml = geomAnd(geomGetPolygon(ml_tline) LM0ML)
	   errorLayer(errtl9_ml "GRTL9: Non-rectangular (ML over TLINE) found!")

Executing: err_tl10_am = geomButtOrOver(am_tline geomOr(lv dv tv))
	   errorLayer(err_tl10_am "GRTL10: (AM over TLINE) touching (LV,DV,TV) found!")

Executing: err_tl10_ma = geomButtOrOver(ma_tline geomOr(lv dv tv))
	   errorLayer(err_tl10_ma "GRTL10: (MA over TLINE) touching (LV,DV,TV) found!")

Executing: err_tl10_ml = geomButtOrOver(ml_tline geomOr(lv dv tv))
	   errorLayer(err_tl10_ml "GRTL10: (ML over TLINE) touching (LV,DV,TV) found!")

Executing: drc(am_tline geomOr(lv dv tv) (sep < 4.0) "GRTL10: (AM over TLINE) to (LV,DV,...

Executing: drc(ma_tline geomOr(lv dv tv) (sep < 4.0) "GRTL10: (MA over TLINE) to (LV,DV,...

Executing: drc(ml_tline geomOr(lv dv tv) (sep < 4.0) "GRTL10: (ML over TLINE) to (LV,DV,...

Executing: pcing_wide = geomSize(geomSize(pcing -0.08) 0.08)
	   errorLayer(pcing_wide "GR780: PCING width == 0.160 um.(error > )")

Executing: drc(pcing (width < 0.16) "GR780: PCING width == 0.160 um.(error < )")

Executing: errorLayer(geomAvoiding(ipci pcing) "GR781b: Cells named with 'IPCI' other than those containing PCING found!")

Executing: drc(pcing bondpad ((0 < sep) < 0.42) "GR782: PCING to BONDPAD space >= 0.420 ...

Executing: drc(pcing ind_filt ((0 < sep) < 0.42) "GR782: PCING to IND_FILT space >= 0.42...

Executing: drc(pcing ((0 < sep) < 0.42) "GR782: PCING to PCING space >= 0.420 um.")

Executing: drc(pcing pc ((0 < sep) < 0.42) "GR782: PCING to PC    space >= 0.420 um.")

Executing: drc(pcing rx ((0 < sep) < 0.42) "GR782: PCING to RX    space >= 0.420 um.")

Executing: drc(pcing ca ((0 < sep) < 0.42) "GR782: PCING to CA    space >= 0.420 um.")

Executing: drc(pcing cabar ((0 < sep) < 0.42) "GR782: PCING to CABAR space >= 0.420 um.")

Executing: gr782othrlevs = geomOr(pc rx ca_all bondpad ind_filt)

Executing: err782 = geomButtOrOver(pcing gr782othrlevs)
	   errorLayer(err782 "GR782: PCING touching (PC, RX, BONDPAD, IND_FILT or CA/CABAR) shapes found")

Executing: drc(pcing ((0.14 < width) < 0.18) (length < 2.0) "GR783: PCING arm length (fr...

Executing: pcing_empty = geomOutside(chipMpwCrk pcing)

Executing: chip6mmx = geomButtOrOver(chipMpwCrk geomGrow(chipMpwCrk -3000 0))

Executing: chip6mmy = geomButtOrOver(chipMpwCrk geomGrow(chipMpwCrk 0 -3000))

Executing: chip6mm = geomOr(chip6mmx chip6mmy)

Executing: err784_zero = geomButtOrOver(chip6mm pcing_empty)
	   errorLayer(err784_zero "GR784: Union(CHIPEDGE,MPW_EDGE,CRACKSTOP) not enclosing any PCI shapes found!")

Executing: err784_lt40 = geomButtOrOver(chip6mm pcing (keep < 40))
	   errorLayer(err784_lt40 "GR784: Union(CHIPEDGE,MPW_EDGE,CRACKSTOP) enclosing < 40 PCI shapes found!")

Executing: drc(ds_match (sepNotch < 0.1) withSingularPoint "GRDM001: DS_MATCH minspace >...

Executing: errdm002 = geomOverlap(ds_match geomSize(eval(level) 0.01))
	   errorLayer(errdm002 errMsg)

Executing: errdm002 = geomOverlap(ds_match geomSize(eval(level) 0.01))
	   errorLayer(errdm002 errMsg)

Executing: errdm002 = geomOverlap(ds_match geomSize(eval(level) 0.01))
	   errorLayer(errdm002 errMsg)

Executing: errdm002 = geomOverlap(ds_match geomSize(eval(level) 0.01))
	   errorLayer(errdm002 errMsg)

Executing: errdm002 = geomOverlap(ds_match geomSize(eval(level) 0.01))
	   errorLayer(errdm002 errMsg)

Executing: errdm002 = geomOverlap(ds_match geomSize(eval(level) 0.01))
	   errorLayer(errdm002 errMsg)

Executing: errdm002 = geomOverlap(ds_match geomSize(eval(level) 0.01))
	   errorLayer(errdm002 errMsg)

Executing: drc(ds_match (area > 400000.0) "GRDM003: DS_MATCH area (max per shape) <= 400...

Executing: errorLayer(geomStraddle(ds_match logobnd) "GRDMPN001: DS_MATCH straddling LOGOBND found!!.")

Executing: erref01 = geomSize(geomSize(pcfuse -0.09) 0.09)
	   errorLayer(erref01 "GREF01: PCFUSE width == 0.18 um.(error >)")

Executing: drc(pcfuse (width < 0.18) "GREF01: PCFUSE width == 0.18 um.(error <)")

Executing: drc(pcfuse (width < 0.36) (length < 1.2) "GREF02: PCFUSE length == 1.20 um.(e...

Executing: drc(pcfuse (width < 0.36) (length > 1.2) "GREF02: PCFUSE length == 1.20 um.(e...

Executing: pc_fuse = geomButtOrOver(pc pcfuse)

Executing: pcf_polygon = geomGetPolygon(pcfuse)
	   errorLayer(pcf_polygon "GREF03: Non-rectangular PCFUSE found!")

Executing: pc_f_polygon = geomGetPolygon(pc_fuse)
	   errorLayer(pc_f_polygon "GREF03a: Non-rectangular (PC touching PCFUSE) found!")

Executing: pcf_45 = geomGetAngledEdge(pcfuse ((0 < keep) < 90) fig)
	   errorLayer(pcf_45 "GREF03: 45 degree PCFUSE found")

Executing: pc_f_45 = geomGetAngledEdge(pc_fuse ((0 < keep) < 90) fig)
	   errorLayer(pc_f_45 "GREF03a: 45 degree (PC touching PCFUSE) found")

Executing: drc(pcfuse (sep < 2.5) "GREF04: PCFUSE space >= 2.50 um.")

Executing: erref05_bb = geomAnd(pcfuse bb)
	   errorLayer(erref05_bb "GREF05: PCFUSE over BB found!")

Executing: erref05_bfm = geomAnd(pcfuse bfmoat)
	   errorLayer(erref05_bfm "GREF05: PCFUSE over BFMOAT found!")

Executing: erref05_ca = geomAnd(pcfuse ca)
	   errorLayer(erref05_ca "GREF05: PCFUSE over CA found!")

Executing: erref05_dg = geomAnd(pcfuse dg)
	   errorLayer(erref05_dg "GREF05: PCFUSE over DG found!")

Executing: erref05_k1 = geomAnd(pcfuse k1)
	   errorLayer(erref05_k1 "GREF05: PCFUSE over K1 found!")

Executing: erref05_m1 = geomAnd(pcfuse m1)
	   errorLayer(erref05_m1 "GREF05: PCFUSE over M1 found!")

Executing: erref05_m2 = geomAnd(pcfuse m2)
	   errorLayer(erref05_m2 "GREF05: PCFUSE over M2 found!")

Executing: erref05_mt = geomAnd(geomAnd(pcfuse mt) LM1)
	   errorLayer(erref05_mt "GREF05: PCFUSE over MT found!")

Executing: erref05_ns = geomAnd(pcfuse ns)
	   errorLayer(erref05_ns "GREF05: PCFUSE over NS found!")

Executing: erref05_nw = geomAnd(pcfuse nw)
	   errorLayer(erref05_nw "GREF05: PCFUSE over NW found!")

Executing: erref05_op = geomAnd(pcfuse op)
	   errorLayer(erref05_op "GREF05: PCFUSE over OP found!")

Executing: erref05_pc = geomAnd(pcfuse pc)
	   errorLayer(erref05_pc "GREF05: PCFUSE over PC found!")

Executing: erref05_pi = geomAnd(pcfuse pi)
	   errorLayer(erref05_pi "GREF05: PCFUSE over PI found!")

Executing: erref05_qt = geomAnd(pcfuse qt)
	   errorLayer(erref05_qt "GREF05: PCFUSE over QT found!")

Executing: erref05_rp = geomAnd(pcfuse rp)
	   errorLayer(erref05_rp "GREF05: PCFUSE over RP found!")

Executing: erref05_rr = geomAnd(pcfuse rr)
	   errorLayer(erref05_rr "GREF05: PCFUSE over RR found!")

Executing: erref05_rx = geomAnd(pcfuse rx)
	   errorLayer(erref05_rx "GREF05: PCFUSE over RX found!")

Executing: erref05_vncapm1 = geomAnd(pcfuse vncapm1)
	   errorLayer(erref05_vncapm1 "GREF05: PCFUSE over VNCAP_M1 found!")

Executing: erref05_vncapm2 = geomAnd(pcfuse vncapm2)
	   errorLayer(erref05_vncapm2 "GREF05: PCFUSE over VNCAP_M2 found!")

Executing: erref05_vncapm3 = geomAnd(pcfuse vncapm3)
	   errorLayer(erref05_vncapm3 "GREF05: PCFUSE over VNCAP_M3 found!")

Executing: erref05_vncapm4 = geomAnd(pcfuse vncapm4)
	   errorLayer(erref05_vncapm4 "GREF05: PCFUSE over VNCAP_M4 found!")

Executing: erref05_vncapm5 = geomAnd(pcfuse vncapm5)
	   errorLayer(erref05_vncapm5 "GREF05: PCFUSE over VNCAP_M5 found!")

Executing: erref05_vncapmt = geomAnd(pcfuse vncapmt)
	   errorLayer(erref05_vncapmt "GREF05: PCFUSE over VNCAP_MT found!")

Executing: erref05_jd = geomAnd(pcfuse jd)
	   errorLayer(erref05_jd "GREF05: PCFUSE over JD found!")

Executing: mt_4lm = geomAnd(mt_not_ring LM1)

Executing: drc(pcfuse bb (sep < 2.5) withSingularPoint "GREF06: PCFUSE to BB space >= 2....

Executing: drc(pcfuse bfmoat (sep < 2.5) withSingularPoint "GREF06: PCFUSE to BFMOAT spa...

Executing: drc(pcfuse dg (sep < 2.5) withSingularPoint "GREF06: PCFUSE to DG space >= 2....

Executing: drc(pcfuse k1 (sep < 2.5) withSingularPoint "GREF06: PCFUSE to K1 space >= 2....

Executing: drc(pcfuse m2 (sep < 2.5) withSingularPoint "GREF06: PCFUSE to M2 space >= 2....

Executing: drc(pcfuse mt_4lm (sep < 2.5) withSingularPoint "GREF06: PCFUSE to MT space >...

Executing: drc(pcfuse ns (sep < 2.5) withSingularPoint "GREF06: PCFUSE to NS space >= 2....

Executing: drc(pcfuse nw (sep < 2.5) withSingularPoint "GREF06: PCFUSE to NW space >= 2....

Executing: drc(pcfuse op (sep < 2.5) withSingularPoint "GREF06: PCFUSE to OP space >= 2....

Executing: drc(pcfuse pi (sep < 2.5) withSingularPoint "GREF06: PCFUSE to PI space >= 2....

Executing: drc(pcfuse qt (sep < 2.5) withSingularPoint "GREF06: PCFUSE to QT space >= 2....

Executing: drc(pcfuse rp (sep < 2.5) withSingularPoint "GREF06: PCFUSE to RP space >= 2....

Executing: drc(pcfuse rr (sep < 2.5) withSingularPoint "GREF06: PCFUSE to RR space >= 2....

Executing: drc(pcfuse rx (sep < 2.5) withSingularPoint "GREF06: PCFUSE to RX space >= 2....

Executing: drc(pcfuse v1 (sep < 2.5) withSingularPoint "GREF06: PCFUSE to V1 space >= 2....

Executing: drc(pcfuse vncapm1 (sep < 2.5) withSingularPoint "GREF06: PCFUSE to VNCAP_M1 ...

Executing: drc(pcfuse vncapm2 (sep < 2.5) withSingularPoint "GREF06: PCFUSE to VNCAP_M2 ...

Executing: drc(pcfuse vncapm3 (sep < 2.5) withSingularPoint "GREF06: PCFUSE to VNCAP_M3 ...

Executing: drc(pcfuse vncapm4 (sep < 2.5) withSingularPoint "GREF06: PCFUSE to VNCAP_M4 ...

Executing: drc(pcfuse vncapm5 (sep < 2.5) withSingularPoint "GREF06: PCFUSE to VNCAP_M5 ...

Executing: drc(pcfuse vncapmt (sep < 2.5) withSingularPoint "GREF06: PCFUSE to VNCAP_MT ...

Executing: drc(pcfuse jd (sep < 2.5) withSingularPoint "GREF06: PCFUSE to JD space >= 2....

Executing: erref07_pcf = geomAndNot(pcfuse bp)
	   errorLayer(erref07_pcf "GREF07a: PCFUSE not within BP found!")

Executing: erref07_pc = geomAndNot(pc_fuse bp)
	   errorLayer(erref07_pc "GREF07b: (PC touching PCFUSE) not within BP found!")

Executing: drc(bp pcfuse (enc < 0.3) "GREF07a: PCFUSE must be within BP >= 0.30 um.")

Executing: drc(bp pc_fuse (enc < 0.3) "GREF07b: (PC touching PCFUSE) must be within BP >...

Executing: pcf_anode = drc(pc_fuse (area < 3.0))

Executing: pcf_cathode = geomAndNot(pc_fuse pcf_anode)

Executing: pcfuse_edge = geomSize(geomGetEdge(pcfuse over bkgnd) 0.02)

Executing: pcfuse_sm_end = drc(pcfuse_edge (area < 0.01))

Executing: erref08_2a = geomButting(pcfuse pcf_anode (keep > 1))
	   errorLayer(erref08_2a "GREF08a: PCFUSE abutting more than 1 anode found!")

Executing: erref08_2c = geomButting(pcfuse pcf_cathode (keep > 1))
	   errorLayer(erref08_2c "GREF08a: PCFUSE abutting more than 1 cathode found!")

Executing: erref08_end = geomAndNot(pcfuse_sm_end geomOverlap(pcfuse_sm_end pc))
	   errorLayer(erref08_end "GREF08: PCFUSE (small end) not abutting a PC shape found!")

Executing: pc_not_fuse = geomAndNot(pc pc_fuse)

Executing: drc(pcfuse pc_not_fuse (sep < 2.5) "GREF08b: PCFUSE to (PC not touching PCFUS...

Executing: m1_out_fuse = geomOutside(m1 pc_fuse)

Executing: drc(pcfuse m1_out_fuse (sep < 2.5) "GREF09: PCFUSE to (M1 not touching (PC to...

Executing: pc_fuse_no_ca = geomOutside(pc_fuse ca)
	   errorLayer(pc_fuse_no_ca "GREF10: (PC touching PCFUSE) not touching any CA's found!")

Executing: pc_fuse_less_ca = geomButtOrOver(pc_fuse ca (keep < 4))
	   errorLayer(pc_fuse_less_ca "GREF10: (PC touching PCFUSE) touching less than 4 CA's found!")

Executing: pc_fuse_more_ca = geomButtOrOver(pc_fuse ca (keep > 4))
	   errorLayer(pc_fuse_more_ca "GREF10: (PC touching PCFUSE) touching more than 4 CA's found!")

Executing: erref11a = geomSize(geomSize(pcf_anode -0.59) 0.59)
	   errorLayer(erref11a "GREF11a: (PC touching PCFUSE) (anode) width == 1.18 um.(error >)")

Executing: drc(pcf_anode (width < 1.18) "GREF11a: (PC touching PCFUSE) (anode) width == ...

Executing: drc(pcf_anode ((1.16 < width) < 1.2) (length < 1.74) "GREF11b: (PC touching P...

Executing: drc(pcf_anode ((1.16 < width) < 1.2) (length > 1.74) "GREF11b: (PC touching P...

Executing: erref12b = geomSize(geomSize(pcf_cathode -0.69) 0.69)
	   errorLayer(erref12b "GREF12b: (PC touching PCFUSE) (cathode) length == 1.38 um.(error >)")

Executing: drc(pcf_cathode ((1.36 < width) < 1.4) (length < 2.46) "GREF12a: (PC touching...

Executing: drc(pcf_cathode ((1.36 < width) < 1.4) (length > 2.46) "GREF12a: (PC touching...

Executing: drc(pcf_cathode (width < 1.38) "GREF12b: (PC touching PCFUSE) (cathode) lengt...

Executing: m1_fuse = geomButtOrOver(m1 pc_fuse)

Executing: m1f_edge = geomSize(geomGetEdge(m1_fuse over bkgnd) 0.02)

Executing: m1f_fuse_side = geomOverlap(m1f_edge drc(pcfuse m1_fuse (sep < 1.26) opposite))

Executing: m1f_fs_anode = geomButtOrOver(m1f_fuse_side pcf_anode)

Executing: drc(m1f_fs_anode ((0.01 < width) < 0.03) (length > 1.2) "GREF13: (M1 touching...

Executing: m1f_fs_cathode = geomButtOrOver(m1f_fuse_side pcf_cathode)

Executing: drc(m1f_fs_cathode ((0.01 < width) < 0.03) (length > 2.5) "GREF14: (M1 touchi...

Executing: drc(pcfuse m1_fuse (sep < 1.0) "GREF15: PCFUSE to (M1 touching (PC touching P...

Executing: pcf_edge = geomSize(geomGetEdge(pc_fuse over bkgnd) 0.02)

Executing: pcf_halo = geomAndNot(geomSize(pc_fuse 0.02) pc_fuse)

Executing: pcf_corner = geomAndNot(pcf_halo pcf_edge)

Executing: fuse_edge = geomOverlap(pcf_edge pcfuse)

Executing: fuse_edge_a = geomButting(fuse_edge pcf_anode)

Executing: fuse_edge_c = geomButting(fuse_edge pcf_cathode)

Executing: fe_corner_a = geomButting(pcf_corner fuse_edge_a)

Executing: fe_corner_c = geomButting(pcf_corner fuse_edge_c)

Executing: pcfuse_end_a = geomAnd(pcfuse fuse_edge_a)

Executing: pcfuse_end_c = geomAnd(pcfuse fuse_edge_c)

Executing: erref16_a = geomEnclose(pcfuse drc(pcfuse_end_a fe_corner_a (sep < 0.5) oppos...
	   errorLayer(erref16_a "GREF16: PCFUSE not centered on PC anode found!")

Executing: erref16_c = geomEnclose(pcfuse drc(pcfuse_end_c fe_corner_c (sep < 1.14) oppo...
	   errorLayer(erref16_c "GREF16: PCFUSE not centered on PC cathode found!")

Executing: drc(bp_pcf (width < 0.72) "GREF18: (BP touching PCFUSE) width >= 0.720 um.")

Executing: erref19_bb = geomButtOrOver(bp_pcf bb)
	   errorLayer(erref19_bb "GREF19: (BP touching PCFUSE) touching BB found!")

Executing: erref19_dg = geomButtOrOver(bp_pcf dg)
	   errorLayer(erref19_dg "GREF19: (BP touching PCFUSE) touching DG found!")

Executing: erref19_msr = geomButtOrOver(bp_pcf mosvar)
	   errorLayer(erref19_msr "GREF19: (BP touching PCFUSE) touching MOSVAR found!")

Executing: erref19_nw = geomButtOrOver(bp_pcf nw)
	   errorLayer(erref19_nw "GREF19: (BP touching PCFUSE) touching NW found!")

Executing: erref19_pcr = geomButtOrOver(bp_pcf pcr_bhgen)
	   errorLayer(erref19_pcr "GREF19: (BP touching PCFUSE) touching (PC over OP)... found!")

Executing: erref19_zvt = geomButtOrOver(bp_pcf zvt_x072)
	   errorLayer(erref19_zvt "GREF19: (BP touching PCFUSE) touching (ZEROVT + 0.72) found!")

Executing: drc(bp_pcf bb ((0 < sep) < 0.44) "GREF19: (BP touching PCFUSE) to BB space >=...

Executing: drc(bp_pcf dg ((0 < sep) < 0.44) "GREF19: (BP touching PCFUSE) to DG space >=...

Executing: drc(bp_pcf mosvar ((0 < sep) < 0.44) "GREF19: (BP touching PCFUSE) to MOSVAR ...

Executing: drc(bp_pcf nw ((0 < sep) < 0.44) "GREF19: (BP touching PCFUSE) to NW space >=...

Executing: drc(bp_pcf pcr_bhgen ((0 < sep) < 0.44) "GREF19: (BP touching PCFUSE) to (PC ...

Executing: drc(bp_pcf zvt_x072 ((0 < sep) < 0.44) "GREF19: (BP touching PCFUSE) to (ZERO...

Executing: lay_ef19a = geomButtOrOver(bp geomSize(pcfuse 0.001))

Executing: drc(lay_ef19a tg (sep < 0.3) "GREF19a: (BP touching PCFUSE) to TG, for minimu...

Executing: erref20_op = geomButtOrOver(bp_pcf geomButtOrOver(bp op))
	   errorLayer(erref20_op "GREF20: (BP touching PCFUSE) touching (BP touching OP) found!")

Executing: erref20_pc = geomButtOrOver(bp_pcf geomButtOrOver(bp geomAvoiding(pc pcfuse)))
	   errorLayer(erref20_pc "GREF20: (BP touch PCFUSE) touch (BP touch (PC no touch PCFUSE)) found!")

Executing: erref20_rx = geomButtOrOver(bp_pcf geomButtOrOver(bp rx))
	   errorLayer(erref20_rx "GREF20: (BP touching PCFUSE) touching (BP touching RX) found!")

Executing: drc(vppcapm1 (width < 1.0) "GRVNCAP1: VNCAPM1 minimum width >= 1.00 um !")

Executing: drc(vppcapm2 (width < 1.0) "GRVNCAP1: VNCAPM2 minimum width >= 1.00 um !")

Executing: drc(vppcapm3 (width < 1.0) "GRVNCAP1: VNCAPM3 minimum width >= 1.00 um !")

Executing: drc(vppcapm4 (width < 1.0) "GRVNCAP1: VNCAPM4 minimum width >= 1.00 um !")

Executing: drc(vppcapm5 (width < 1.0) "GRVNCAP1: VNCAPM5 minimum width >= 1.00 um !")

Executing: drc(vppcapmt (width < 1.0) "GRVNCAP1: VNCAPMT minimum width >= 1.00 um !")

Executing: vncap2_m1 = geomOr(vppcapm1)

Executing: vncap2_m2 = geomOr(vppcapm2)

Executing: vncap2_m3 = geomOr(vppcapm3)

Executing: vncap2_m4 = geomOr(vppcapm4)

Executing: vncap2_m5 = geomOr(vppcapm5)

Executing: vncap2_mt = geomOr(vppcapmt)

Executing: drc(vncap2_m1 (area > 100000) "GRVNCAP2: VNCAP_M1 area must be < 100,000 um2 ...

Executing: drc(vncap2_m2 (area > 100000) "GRVNCAP2: VNCAP_M2 area must be < 100,000 um2 ...

Executing: drc(vncap2_m3 (area > 100000) "GRVNCAP2: VNCAP_M3 area must be < 100,000 um2 ...

Executing: drc(vncap2_m4 (area > 100000) "GRVNCAP2: VNCAP_M4 area must be < 100,000 um2 ...

Executing: drc(vncap2_m5 (area > 100000) "GRVNCAP2: VNCAP_M5 area must be < 100,000 um2 ...

Executing: drc(vncap2_mt (area > 100000) "GRVNCAP2: VNCAP_MT area must be < 100,000 um2 ...

Executing: vppm1_thin = geomAndNot(m1_over_vppcapm1 geomSize(geomSize(m1_over_vppcapm1 -...

Executing: vppm2_thin = geomAndNot(m2_over_vppcapm2 geomSize(geomSize(m2_over_vppcapm2 -...

Executing: vppm3_thin = geomAndNot(m3_over_vppcapm3 geomSize(geomSize(m3_over_vppcapm3 -...

Executing: vppm4_thin = geomAndNot(m4_over_vppcapm4 geomSize(geomSize(m4_over_vppcapm4 -...

Executing: vppm5_thin = geomAndNot(m5_over_vppcapm5 geomSize(geomSize(m5_over_vppcapm5 -...

Executing: vppmt_thin = geomAndNot(mt_over_vppcapmt geomSize(geomSize(mt_over_vppcapmt -...

Executing: drc(m1_over_vppcapm1 (width < 0.36) "GRVNCAP3: (M1 over VNCAP_M1) width == 0....

Executing: drc(m2_over_vppcapm2 (width < 0.36) "GRVNCAP3: (M2 over VNCAP_M2) width == 0....

Executing: drc(m3_over_vppcapm3 (width < 0.36) "GRVNCAP3: (M3 over VNCAP_M3) width == 0....

Executing: drc(m4_over_vppcapm4 (width < 0.36) "GRVNCAP3: (M4 over VNCAP_M4) width == 0....

Executing: drc(m5_over_vppcapm5 (width < 0.36) "GRVNCAP3: (M5 over VNCAP_M5) width == 0....

Executing: drc(mt_over_vppcapmt (width < 0.36) "GRVNCAP3: (MT over VNCAP_MT) width == 0....

Executing: drc(vppm1_thin ((0.36 < width) < 1) "GRVNCAP3: (M1 over VNCAP_M1) width == 0....

Executing: drc(vppm2_thin ((0.36 < width) < 1) "GRVNCAP3: (M2 over VNCAP_M2) width == 0....

Executing: drc(vppm3_thin ((0.36 < width) < 1) "GRVNCAP3: (M3 over VNCAP_M3) width == 0....

Executing: drc(vppm4_thin ((0.36 < width) < 1) "GRVNCAP3: (M4 over VNCAP_M4) width == 0....

Executing: drc(vppm5_thin ((0.36 < width) < 1) "GRVNCAP3: (M5 over VNCAP_M5) width == 0....

Executing: drc(vppmt_thin ((0.36 < width) < 1) "GRVNCAP3: (MT over VNCAP_MT) width == 0....

Executing: errvpp3m1 = geomSize(geomSize(m1_over_vppcapm1 -0.5) 0.5)
	   errorLayer(errvpp3m1 "GRVNCAP3a: (M1 over VNCAPM1) width == 1.0 um.(error >)")

Executing: errvpp3m2 = geomSize(geomSize(m2_over_vppcapm2 -0.5) 0.5)
	   errorLayer(errvpp3m2 "GRVNCAP3a: (M2 over VNCAPM2) width == 1.0 um.(error >)")

Executing: errvpp3m3 = geomSize(geomSize(m3_over_vppcapm3 -0.5) 0.5)
	   errorLayer(errvpp3m3 "GRVNCAP3a: (M3 over VNCAPM3) width == 1.0 um.(error >)")

Executing: errvpp3m4 = geomSize(geomSize(m4_over_vppcapm4 -0.5) 0.5)
	   errorLayer(errvpp3m4 "GRVNCAP3a: (M4 over VNCAPM4) width == 1.0 um.(error >)")

Executing: errvpp3m5 = geomSize(geomSize(m5_over_vppcapm5 -0.5) 0.5)
	   errorLayer(errvpp3m5 "GRVNCAP3a: (M5 over VNCAPM5) width == 1.0 um.(error >)")

Executing: errvpp3mt = geomSize(geomSize(mt_over_vppcapmt -0.5) 0.5)
	   errorLayer(errvpp3mt "GRVNCAP3a: (MT over VNCAPMT) width == 1.0 um.(error >)")

Executing: vppm1_fat = geomAndNot(m1_over_vppcapm1 vppm1_thin)

Executing: vppm2_fat = geomAndNot(m2_over_vppcapm2 vppm2_thin)

Executing: vppm3_fat = geomAndNot(m3_over_vppcapm3 vppm3_thin)

Executing: vppm4_fat = geomAndNot(m4_over_vppcapm4 vppm4_thin)

Executing: vppm5_fat = geomAndNot(m5_over_vppcapm5 vppm5_thin)

Executing: vppmt_fat = geomAndNot(mt_over_vppcapmt vppmt_thin)

Executing: drc(vppm1_fat ((0.36 < width) < 1.0) "GRVNCAP3a: (M1 over VNCAP_M1) width == ...

Executing: drc(vppm2_fat ((0.36 < width) < 1.0) "GRVNCAP3a: (M2 over VNCAP_M2) width == ...

Executing: drc(vppm3_fat ((0.36 < width) < 1.0) "GRVNCAP3a: (M3 over VNCAP_M3) width == ...

Executing: drc(vppm4_fat ((0.36 < width) < 1.0) "GRVNCAP3a: (M4 over VNCAP_M4) width == ...

Executing: drc(vppm5_fat ((0.36 < width) < 1.0) "GRVNCAP3a: (M5 over VNCAP_M5) width == ...

Executing: drc(vppmt_fat ((0.36 < width) < 1.0) "GRVNCAP3a: (MT over VNCAP_MT) width == ...

Executing: errvpp4am1 = drc(vppm1_thin vppm1_fat ((0 < sep) < 0.4) (app <= 0.36))
	   errorLayer(errvpp4am1 "GRVNCAP4a: M1 over VNCAPM1 space (for common run length <= 0.36) == 0.40um (error <)")

Executing: errvpp4am2 = drc(vppm2_thin vppm2_fat ((0 < sep) < 0.4) (app <= 0.36))
	   errorLayer(errvpp4am2 "GRVNCAP4a: M2 over VNCAPM2 space (for common run length <= 0.36) == 0.40um (error <)")

Executing: errvpp4am3 = drc(vppm3_thin vppm3_fat ((0 < sep) < 0.4) (app <= 0.36))
	   errorLayer(errvpp4am3 "GRVNCAP4a: M3 over VNCAPM3 space (for common run length <= 0.36) == 0.40um (error <)")

Executing: errvpp4am4 = drc(vppm4_thin vppm4_fat ((0 < sep) < 0.4) (app <= 0.36))
	   errorLayer(errvpp4am4 "GRVNCAP4a: M4 over VNCAPM4 space (for common run length <= 0.36) == 0.40um (error <)")

Executing: errvpp4am5 = drc(vppm5_thin vppm5_fat ((0 < sep) < 0.4) (app <= 0.36))
	   errorLayer(errvpp4am5 "GRVNCAP4a: M5 over VNCAPM5 space (for common run length <= 0.36) == 0.40um (error <)")

Executing: errvpp4amt = drc(vppmt_thin vppmt_fat ((0 < sep) < 0.4) (app <= 0.36))
	   errorLayer(errvpp4amt "GRVNCAP4a: MT over VNCAPMT space (for common run length <= 0.36) == 0.40um (error <)")

Executing: errvpp4bm1 = drc(vppm1_thin (sep < 0.32) (app > 0.36))
	   errorLayer(errvpp4bm1 "GRVNCAP4b: M1 over VNCAPM1 space (for common run length > 0.36) == 0.32um (error <)")

Executing: errvpp4bm2 = drc(vppm2_thin (sep < 0.32) (app > 0.36))
	   errorLayer(errvpp4bm2 "GRVNCAP4b: M2 over VNCAPM2 space (for common run length > 0.36) == 0.32um (error <)")

Executing: errvpp4bm3 = drc(vppm3_thin (sep < 0.32) (app > 0.36))
	   errorLayer(errvpp4bm3 "GRVNCAP4b: M3 over VNCAPM3 space (for common run length > 0.36) == 0.32um (error <)")

Executing: errvpp4bm4 = drc(vppm4_thin (sep < 0.32) (app > 0.36))
	   errorLayer(errvpp4bm4 "GRVNCAP4b: M4 over VNCAPM4 space (for common run length > 0.36) == 0.32um (error <)")

Executing: errvpp4bm5 = drc(vppm4_thin (sep < 0.32) (app > 0.36))
	   errorLayer(errvpp4bm5 "GRVNCAP4b: M5 over VNCAPM5 space (for common run length > 0.36) == 0.32um (error <)")

Executing: errvpp4bmt = drc(vppmt_thin (sep < 0.32) (app > 0.36))
	   errorLayer(errvpp4bmt "GRVNCAP4b: MT over VNCAPMT space (for common run length > 0.36) == 0.32um (error <)")

Executing: all_err4am1 = geomSize(geomGetLength(vppm1_thin (keep == 0.36)) 0.405)

Executing: errvpp4am1a = geomAndNot(all_err4am1 geomStraddle(all_err4am1 vppcapm1))

Executing: errvpp4am1b = geomAndNot(errvpp4am1a geomOverlap(all_err4am1 vppm1_fat))

Executing: errvpp4am1c = geomAndNot(errvpp4am1b geomOutside(all_err4am1 vppcapm1))
	   errorLayer(errvpp4am1c "GRVNCAP4a: M1 over VNCAPM1 space (for common run length <= 0.36) == 0.40um (error >)")

Executing: all_err4am2 = geomSize(geomGetLength(vppm2_thin (keep == 0.36)) 0.405)

Executing: errvpp4am2a = geomAndNot(all_err4am2 geomStraddle(all_err4am2 vppcapm2))

Executing: errvpp4am2b = geomAndNot(errvpp4am2a geomOverlap(all_err4am2 vppm2_fat))

Executing: errvpp4am2c = geomAndNot(errvpp4am2b geomOutside(all_err4am2 vppcapm2))
	   errorLayer(errvpp4am2c "GRVNCAP4a: M2 over VNCAPM2 space (for common run length <= 0.36) == 0.40um (error >)")

Executing: all_err4am3 = geomSize(geomGetLength(vppm3_thin (keep == 0.36)) 0.405)

Executing: errvpp4am3a = geomAndNot(all_err4am3 geomStraddle(all_err4am3 vppcapm3))

Executing: errvpp4am3b = geomAndNot(errvpp4am3a geomOverlap(all_err4am3 vppm3_fat))

Executing: errvpp4am3c = geomAndNot(errvpp4am3b geomOutside(all_err4am3 vppcapm3))
	   errorLayer(errvpp4am3c "GRVNCAP4a: M3 over VNCAPM3 space (for common run length <= 0.36) == 0.40um (error >)")

Executing: all_err4am4 = geomSize(geomGetLength(vppm4_thin (keep == 0.36)) 0.405)

Executing: errvpp4am4a = geomAndNot(all_err4am4 geomStraddle(all_err4am4 vppcapm4))

Executing: errvpp4am4b = geomAndNot(errvpp4am4a geomOverlap(all_err4am4 vppm4_fat))

Executing: errvpp4am4c = geomAndNot(errvpp4am4b geomOutside(all_err4am4 vppcapm4))
	   errorLayer(errvpp4am4c "GRVNCAP4a: M4 over VNCAPM4 space (for common run length <= 0.36) == 0.40um (error >)")

Executing: all_err4am5 = geomSize(geomGetLength(vppm5_thin (keep == 0.36)) 0.405)

Executing: errvpp4am5a = geomAndNot(all_err4am5 geomStraddle(all_err4am5 vppcapm5))

Executing: errvpp4am5b = geomAndNot(errvpp4am5a geomOverlap(all_err4am5 vppm5_fat))

Executing: errvpp4am5c = geomAndNot(errvpp4am5b geomOutside(all_err4am5 vppcapm5))
	   errorLayer(errvpp4am5c "GRVNCAP4a: M5 over VNCAPM5 space (for common run length <= 0.36) == 0.40um (error >)")

Executing: all_err4amt = geomSize(geomGetLength(vppmt_thin (keep == 0.36)) 0.405)

Executing: errvpp4amta = geomAndNot(all_err4amt geomStraddle(all_err4amt vppcapmt))

Executing: errvpp4amtb = geomAndNot(errvpp4amta geomOverlap(all_err4amt vppmt_fat))

Executing: errvpp4amtc = geomAndNot(errvpp4amtb geomOutside(all_err4amt vppcapmt))
	   errorLayer(errvpp4amtc "GRVNCAP4a: MT over VNCAPMT space (for common run length <= 0.36) == 0.40um (error >)")

Executing: errvpp4bm1b = geomAnd(geomOutside(geomSize(geomGetLength(vppm1_thin (keep > 0...
	   errorLayer(errvpp4bm1b "GRVNCAP4b: M1 over VNCAPM1 space (for common run length > 0.36) == 0.32um (error >)")

Executing: errvpp4bm2b = geomAnd(geomOutside(geomSize(geomGetLength(vppm2_thin (keep > 0...
	   errorLayer(errvpp4bm2b "GRVNCAP4b: M2 over VNCAPM2 space (for common run length > 0.36) == 0.32um (error >)")

Executing: errvpp4bm3b = geomAnd(geomOutside(geomSize(geomGetLength(vppm3_thin (keep > 0...
	   errorLayer(errvpp4bm3b "GRVNCAP4b: M3 over VNCAPM3 space (for common run length > 0.36) == 0.32um (error >)")

Executing: errvpp4bm4b = geomAnd(geomOutside(geomSize(geomGetLength(vppm4_thin (keep > 0...
	   errorLayer(errvpp4bm4b "GRVNCAP4b: M4 over VNCAPM4 space (for common run length > 0.36) == 0.32um (error >)")

Executing: errvpp4bm5b = geomAnd(geomOutside(geomSize(geomGetLength(vppm5_thin (keep > 0...
	   errorLayer(errvpp4bm5b "GRVNCAP4b: M5 over VNCAPM5 space (for common run length > 0.36) == 0.32um (error >)")

Executing: errvpp4bmtb = geomAnd(geomOutside(geomSize(geomGetLength(vppmt_thin (keep > 0...
	   errorLayer(errvpp4bmtb "GRVNCAP4b: MT over VNCAPMT space (for common run length > 0.36) == 0.32um (error >)")

Executing: drc(v1_over_vppcapm1 (sep <= 0.46) diffNet "GRVNCAP6a: (V1 intersect VNCAPM1)...

Executing: drc(v2_over_vppcapm2 (sep <= 0.46) diffNet "GRVNCAP6a: (V2 intersect VNCAPM2)...

Executing: drc(v3_over_vppcapm3 (sep <= 0.46) diffNet "GRVNCAP6a: (V3 intersect VNCAPM3)...

Executing: drc(v4_over_vppcapm4 (sep <= 0.46) diffNet "GRVNCAP6a: (V4 intersect VNCAPM4)...

Executing: drc(v5_over_vppcapm5 (sep <= 0.46) diffNet "GRVNCAP6a: (V5 intersect VNCAPM5)...

Executing: drc(ft_over_vppcapmt (sep <= 0.46) diffNet "GRVNCAP6a: (FT intersect VNCAPMT)...

Executing: errvpp8a = geomButtOrOver(m1_over_vppcapm1 ca_all)
	   errorLayer(errvpp8a "GRVNCAP8a: (M1 intersect VNCAPM1) touching CA/CABAR found !")

Executing: errvpp8bm1 = geomAnd(geomButtOrOver(geomAndNot(m2_over_vppcapm2 vppcapm1) v1)...
	   errorLayer(errvpp8bm1 "GRVNCAP8b: ((M2 intersect VNCAPM2) not over VNCAPM1) touching V1 found !")

Executing: errvpp8bm1b = geomAnd(geomButtOrOver(geomAndNot(mt_over_vppcapmt vppcapm1) v1...
	   errorLayer(errvpp8bm1b "GRVNCAP8b: ((MT intersect VNCAPMT) not over VNCAPM1) touching V1 found !")

Executing: errvpp8bm2 = geomAnd(geomButtOrOver(geomAndNot(m3_over_vppcapm3 vppcapm2) v2)...
	   errorLayer(errvpp8bm2 "GRVNCAP8b: ((M3 intersect VNCAPM3) not over VNCAPM2) touching V2 found !")

Executing: errvpp8bm2b = geomAnd(geomButtOrOver(geomAndNot(mt_over_vppcapmt vppcapm2) v2...
	   errorLayer(errvpp8bm2b "GRVNCAP8b: ((MT intersect VNCAPMT) not over VNCAPM2) touching V2 found !")

Executing: errvpp8bm3 = geomAnd(geomButtOrOver(geomAndNot(m4_over_vppcapm4 vppcapm3) v3)...
	   errorLayer(errvpp8bm3 "GRVNCAP8b: ((M4 intersect VNCAPM4) not over VNCAPM3) touching V3 found !")

Executing: errvpp8bm3b = geomAnd(geomButtOrOver(geomAndNot(mt_over_vppcapmt vppcapm3) v3...
	   errorLayer(errvpp8bm3b "GRVNCAP8b: ((MT intersect VNCAPMT) not over VNCAPM3) touching V3 found !")

Executing: errvpp8bm4 = geomAnd(geomButtOrOver(geomAndNot(m5_over_vppcapm5 vppcapm4) v4)...
	   errorLayer(errvpp8bm4 "GRVNCAP8b: ((M5 intersect VNCAPM5) not over VNCAPM4) touching V4 found !")

Executing: errvpp8bm4b = geomAnd(geomButtOrOver(geomAndNot(mt_over_vppcapmt vppcapm4) v4...
	   errorLayer(errvpp8bm4b "GRVNCAP8b: ((MT intersect VNCAPMT) not over VNCAPM4) touching V4 found !")

Executing: errvpp8bm5 = geomAnd(geomButtOrOver(geomAndNot(mt_over_vppcapmt vppcapm5) v5)...
	   errorLayer(errvpp8bm5 "GRVNCAP8b: ((MT intersect VNCAPMT) not over VNCAPM5) touching V5 found !")

Executing: errvpp9am1 = geomAnd(geomButtOrOver(geomAndNot(m1_over_vppcapm1 vppcapm2) v1)...
	   errorLayer(errvpp9am1 "GRVNCAP9a: ((M1 intersect VNCAPM1) not over VNCAPM2) touching V1 found !")

Executing: errvpp9am1b = geomAnd(geomButtOrOver(geomAndNot(m1_over_vppcapm1 vppcapmt) v1...
	   errorLayer(errvpp9am1b "GRVNCAP9a: ((M1 intersect VNCAPM1) not over VNCAPMT) touching V1 found !")

Executing: errvpp9am2 = geomAnd(geomButtOrOver(geomAndNot(m2_over_vppcapm2 vppcapm3) v2)...
	   errorLayer(errvpp9am2 "GRVNCAP9a: ((M2 intersect VNCAPM2) not over VNCAPM3) touching V2 found !")

Executing: errvpp9am2b = geomAnd(geomButtOrOver(geomAndNot(m2_over_vppcapm2 vppcapmt) v2...
	   errorLayer(errvpp9am2b "GRVNCAP9a: ((M2 intersect VNCAPM2) not over VNCAPMT) touching V2 found !")

Executing: errvpp9am3 = geomAnd(geomButtOrOver(geomAndNot(m3_over_vppcapm3 vppcapm4) v3)...
	   errorLayer(errvpp9am3 "GRVNCAP9a: ((M3 intersect VNCAPM3) not over VNCAPM4) touching V3 found !")

Executing: errvpp9am3b = geomAnd(geomButtOrOver(geomAndNot(m3_over_vppcapm3 vppcapmt) v3...
	   errorLayer(errvpp9am3b "GRVNCAP9a: ((M3 intersect VNCAPM3) not over VNCAPMT) touching V3 found !")

Executing: errvpp9am4 = geomAnd(geomButtOrOver(geomAndNot(m4_over_vppcapm4 vppcapm5) v4)...
	   errorLayer(errvpp9am4 "GRVNCAP9a: ((M4 intersect VNCAPM4) not over VNCAPM5) touching V4 found !")

Executing: errvpp9am4b = geomAnd(geomButtOrOver(geomAndNot(m4_over_vppcapm4 vppcapmt) v4...
	   errorLayer(errvpp9am4b "GRVNCAP9a: ((M4 intersect VNCAPM4) not over VNCAPMT) touching V4 found !")

Executing: errvpp9am5 = geomAnd(geomButtOrOver(geomAndNot(m5_over_vppcapm5 vppcapmt) v5)...
	   errorLayer(errvpp9am5 "GRVNCAP9a: ((M5 intersect VNCAPM5) not over VNCAPMT) touching V5 found !")

Executing: errvncapmt903 = geomAnd(vppcapmt ftbar)
	   errorLayer(errvncapmt903 "GRVNCAP9a: VNCAPMT touching FTBAR not allowed !")

Executing: errvpp9bm2 = geomButtOrOver(m2_over_vppcapm2 errvncap9b)
	   errorLayer(errvpp9bm2 "GRVNCAP9b: ((M2 intersect VNCAPM2) touching {FT, FTBAR}) found !")

Executing: errvpp9bm3 = geomButtOrOver(m3_over_vppcapm3 errvncap9b)
	   errorLayer(errvpp9bm3 "GRVNCAP9b: ((M3 intersect VNCAPM3) touching {FT, FTBAR}) found !")

Executing: errvpp9bm4 = geomButtOrOver(m4_over_vppcapm4 errvncap9b)
	   errorLayer(errvpp9bm4 "GRVNCAP9b: ((M4 intersect VNCAPM4) touching {FT, FTBAR}) found !")

Executing: errvpp9bm5 = geomButtOrOver(m5_over_vppcapm5 errvncap9b)
	   errorLayer(errvpp9bm5 "GRVNCAP9b: ((M5 intersect VNCAPM5) touching {FT, FTBAR}) found !")

Executing: errvpp9bmt = geomButtOrOver(mt_over_vppcapmt errvncap9b)
	   errorLayer(errvpp9bmt "GRVNCAP9b: ((MT intersect VNCAPMT) touching {FT, FTBAR}) found !")

Executing: errvpp10m1a = geomButtOrOver(vppcapm1 pcfuse)
	   errorLayer(errvpp10m1a "GRVNCAP10: VNCAPM1 touching PCFUSE found !")

Executing: errvpp10m2a = geomButtOrOver(vppcapm2 pcfuse)
	   errorLayer(errvpp10m2a "GRVNCAP10: VNCAPM2 touching PCFUSE found !")

Executing: errvpp10m3a = geomButtOrOver(vppcapm3 pcfuse)
	   errorLayer(errvpp10m3a "GRVNCAP10: VNCAPM3 touching PCFUSE found !")

Executing: errvpp10m4a = geomButtOrOver(vppcapm4 pcfuse)
	   errorLayer(errvpp10m4a "GRVNCAP10: VNCAPM4 touching PCFUSE found !")

Executing: errvpp10m5a = geomButtOrOver(vppcapm5 pcfuse)
	   errorLayer(errvpp10m5a "GRVNCAP10: VNCAPM5 touching PCFUSE found !")

Executing: errvpp10mta = geomButtOrOver(vppcapmt pcfuse)
	   errorLayer(errvpp10mta "GRVNCAP10: VNCAPMT touching PCFUSE found !")

Executing: errvpp10m1b = geomButtOrOver(vppcapm1 k1)
	   errorLayer(errvpp10m1b "GRVNCAP10: VNCAPM1 touching K1 found !")

Executing: errvpp10m2b = geomButtOrOver(vppcapm2 k1)
	   errorLayer(errvpp10m2b "GRVNCAP10: VNCAPM2 touching K1 found !")

Executing: errvpp10m3b = geomButtOrOver(vppcapm3 k1)
	   errorLayer(errvpp10m3b "GRVNCAP10: VNCAPM3 touching K1 found !")

Executing: errvpp10m4b = geomButtOrOver(vppcapm4 k1)
	   errorLayer(errvpp10m4b "GRVNCAP10: VNCAPM4 touching K1 found !")

Executing: errvpp10m5b = geomButtOrOver(vppcapm5 k1)
	   errorLayer(errvpp10m5b "GRVNCAP10: VNCAPM5 touching K1 found !")

Executing: errvpp10mtb = geomButtOrOver(vppcapmt k1)
	   errorLayer(errvpp10mtb "GRVNCAP10: VNCAPMT touching K1 found !")

Executing: errvpp10m1c = geomButtOrOver(vppcapm1 tline)
	   errorLayer(errvpp10m1c "GRVNCAP10: VNCAPM1 touching TLINE found !")

Executing: errvpp10m2c = geomButtOrOver(vppcapm2 tline)
	   errorLayer(errvpp10m2c "GRVNCAP10: VNCAPM2 touching TLINE found !")

Executing: errvpp10m3c = geomButtOrOver(vppcapm3 tline)
	   errorLayer(errvpp10m3c "GRVNCAP10: VNCAPM3 touching TLINE found !")

Executing: errvpp10m4c = geomButtOrOver(vppcapm4 tline)
	   errorLayer(errvpp10m4c "GRVNCAP10: VNCAPM4 touching TLINE found !")

Executing: errvpp10m5c = geomButtOrOver(vppcapm5 tline)
	   errorLayer(errvpp10m5c "GRVNCAP10: VNCAPM5 touching TLINE found !")

Executing: errvpp10mtc = geomButtOrOver(vppcapmt tline)
	   errorLayer(errvpp10mtc "GRVNCAP10: VNCAPMT touching TLINE found !")

Executing: errvpp10m1d = geomButtOrOver(vppcapm1 bondpad)
	   errorLayer(errvpp10m1d "GRVNCAP10: VNCAPM1 touching BONDPAD found !")

Executing: errvpp10m2d = geomButtOrOver(vppcapm2 bondpad)
	   errorLayer(errvpp10m2d "GRVNCAP10: VNCAPM2 touching BONDPAD found !")

Executing: errvpp10m3d = geomButtOrOver(vppcapm3 bondpad)
	   errorLayer(errvpp10m3d "GRVNCAP10: VNCAPM3 touching BONDPAD found !")

Executing: errvpp10m4d = geomButtOrOver(vppcapm4 bondpad)
	   errorLayer(errvpp10m4d "GRVNCAP10: VNCAPM4 touching BONDPAD found !")

Executing: errvpp10m5d = geomButtOrOver(vppcapm5 bondpad)
	   errorLayer(errvpp10m5d "GRVNCAP10: VNCAPM5 touching BONDPAD found !")

Executing: errvpp10mtd = geomButtOrOver(vppcapmt bondpad)
	   errorLayer(errvpp10mtd "GRVNCAP10: VNCAPMT touching BONDPAD found !")

Executing: errvpp10m1e = geomButtOrOver(vppcapm1 logobnd)
	   errorLayer(errvpp10m1e "GRVNCAP10: VNCAPM1 touching LOGOBND found !")

Executing: errvpp10m2e = geomButtOrOver(vppcapm2 logobnd)
	   errorLayer(errvpp10m2e "GRVNCAP10: VNCAPM2 touching LOGOBND found !")

Executing: errvpp10m3e = geomButtOrOver(vppcapm3 logobnd)
	   errorLayer(errvpp10m3e "GRVNCAP10: VNCAPM3 touching LOGOBND found !")

Executing: errvpp10m4e = geomButtOrOver(vppcapm4 logobnd)
	   errorLayer(errvpp10m4e "GRVNCAP10: VNCAPM4 touching LOGOBND found !")

Executing: errvpp10m5e = geomButtOrOver(vppcapm5 logobnd)
	   errorLayer(errvpp10m5e "GRVNCAP10: VNCAPM5 touching LOGOBND found !")

Executing: errvpp10mte = geomButtOrOver(vppcapmt logobnd)
	   errorLayer(errvpp10mte "GRVNCAP10: VNCAPMT touching LOGOBND found !")

Executing: errvpp10m1f = geomButtOrOver(vppcapm1 ind_filt)
	   errorLayer(errvpp10m1f "GRVNCAP10: VNCAPM1 touching IND_FILT found !")

Executing: errvpp10m2f = geomButtOrOver(vppcapm2 ind_filt)
	   errorLayer(errvpp10m2f "GRVNCAP10: VNCAPM2 touching IND_FILT found !")

Executing: errvpp10m3f = geomButtOrOver(vppcapm3 ind_filt)
	   errorLayer(errvpp10m3f "GRVNCAP10: VNCAPM3 touching IND_FILT found !")

Executing: errvpp10m4f = geomButtOrOver(vppcapm4 ind_filt)
	   errorLayer(errvpp10m4f "GRVNCAP10: VNCAPM4 touching IND_FILT found !")

Executing: errvpp10m5f = geomButtOrOver(vppcapm5 ind_filt)
	   errorLayer(errvpp10m5f "GRVNCAP10: VNCAPM5 touching IND_FILT found !")

Executing: errvpp10mtf = geomButtOrOver(vppcapmt ind_filt)
	   errorLayer(errvpp10mtf "GRVNCAP10: VNCAPMT touching IND_FILT found !")

Executing: drc(vppcapm1 pcfuse (sep < 5.0) "GRVNCAP10: VNCAPM1 to adj. PCFUSE space >= 5...

Executing: drc(vppcapm2 pcfuse (sep < 5.0) "GRVNCAP10: VNCAPM2 to adj. PCFUSE space >= 5...

Executing: drc(vppcapm3 pcfuse (sep < 5.0) "GRVNCAP10: VNCAPM3 to adj. PCFUSE space >= 5...

Executing: drc(vppcapm4 pcfuse (sep < 5.0) "GRVNCAP10: VNCAPM4 to adj. PCFUSE space >= 5...

Executing: drc(vppcapm5 pcfuse (sep < 5.0) "GRVNCAP10: VNCAPM5 to adj. PCFUSE space >= 5...

Executing: drc(vppcapmt pcfuse (sep < 5.0) "GRVNCAP10: VNCAPMT to adj. PCFUSE space >= 5...

Executing: drc(vppcapm1 k1 (sep < 5.0) "GRVNCAP10: VNCAPM1 to adj. K1 space >= 5.00 um.")

Executing: drc(vppcapm2 k1 (sep < 5.0) "GRVNCAP10: VNCAPM2 to adj. K1 space >= 5.00 um.")

Executing: drc(vppcapm3 k1 (sep < 5.0) "GRVNCAP10: VNCAPM3 to adj. K1 space >= 5.00 um.")

Executing: drc(vppcapm4 k1 (sep < 5.0) "GRVNCAP10: VNCAPM4 to adj. K1 space >= 5.00 um.")

Executing: drc(vppcapm5 k1 (sep < 5.0) "GRVNCAP10: VNCAPM5 to adj. K1 space >= 5.00 um.")

Executing: drc(vppcapmt k1 (sep < 5.0) "GRVNCAP10: VNCAPMT to adj. K1 space >= 5.00 um.")

Executing: drc(vppcapm1 tline (sep < 5.0) "GRVNCAP10: VNCAPM1 to adj. TLINE space >= 5.0...

Executing: drc(vppcapm2 tline (sep < 5.0) "GRVNCAP10: VNCAPM2 to adj. TLINE space >= 5.0...

Executing: drc(vppcapm3 tline (sep < 5.0) "GRVNCAP10: VNCAPM3 to adj. TLINE space >= 5.0...

Executing: drc(vppcapm4 tline (sep < 5.0) "GRVNCAP10: VNCAPM4 to adj. TLINE space >= 5.0...

Executing: drc(vppcapm5 tline (sep < 5.0) "GRVNCAP10: VNCAPM5 to adj. TLINE space >= 5.0...

Executing: drc(vppcapmt tline (sep < 5.0) "GRVNCAP10: VNCAPMT to adj. TLINE space >= 5.0...

Executing: drc(vppcapm1 bondpad (sep < 5.0) "GRVNCAP10: VNCAPM1 to adj. BONDPAD space >=...

Executing: drc(vppcapm2 bondpad (sep < 5.0) "GRVNCAP10: VNCAPM2 to adj. BONDPAD space >=...

Executing: drc(vppcapm3 bondpad (sep < 5.0) "GRVNCAP10: VNCAPM3 to adj. BONDPAD space >=...

Executing: drc(vppcapm4 bondpad (sep < 5.0) "GRVNCAP10: VNCAPM4 to adj. BONDPAD space >=...

Executing: drc(vppcapm5 bondpad (sep < 5.0) "GRVNCAP10: VNCAPM5 to adj. BONDPAD space >=...

Executing: drc(vppcapmt bondpad (sep < 5.0) "GRVNCAP10: VNCAPMT to adj. BONDPAD space >=...

Executing: drc(vppcapm1 logobnd (sep < 5.0) "GRVNCAP10: VNCAPM1 to adj. LOGOBND space >=...

Executing: drc(vppcapm2 logobnd (sep < 5.0) "GRVNCAP10: VNCAPM2 to adj. LOGOBND space >=...

Executing: drc(vppcapm3 logobnd (sep < 5.0) "GRVNCAP10: VNCAPM3 to adj. LOGOBND space >=...

Executing: drc(vppcapm4 logobnd (sep < 5.0) "GRVNCAP10: VNCAPM4 to adj. LOGOBND space >=...

Executing: drc(vppcapm5 logobnd (sep < 5.0) "GRVNCAP10: VNCAPM5 to adj. LOGOBND space >=...

Executing: drc(vppcapmt logobnd (sep < 5.0) "GRVNCAP10: VNCAPMT to adj. LOGOBND space >=...

Executing: drc(vppcapm1 ind_filt (sep < 5.0) "GRVNCAP10: VNCAPM1 to adj. IND_FILT space ...

Executing: drc(vppcapm2 ind_filt (sep < 5.0) "GRVNCAP10: VNCAPM2 to adj. IND_FILT space ...

Executing: drc(vppcapm3 ind_filt (sep < 5.0) "GRVNCAP10: VNCAPM3 to adj. IND_FILT space ...

Executing: drc(vppcapm4 ind_filt (sep < 5.0) "GRVNCAP10: VNCAPM4 to adj. IND_FILT space ...

Executing: drc(vppcapm5 ind_filt (sep < 5.0) "GRVNCAP10: VNCAPM4 to adj. IND_FILT space ...

Executing: drc(vppcapmt ind_filt (sep < 5.0) "GRVNCAP10: VNCAPMT to adj. IND_FILT space ...

Executing: errvpp11bv2 = geomAndNot(geomAnd(v2_over_vppcapm2 vppcapm1) v1_over_vppcapm1)
	   errorLayer(errvpp11bv2 "GRVNCAP11b: (V2 over VNCAPM2) must be coincident with (V1 over VNCAPM1)")

Executing: errvpp11bv3 = geomAndNot(geomAnd(v3_over_vppcapm3 vppcapm2) v2_over_vppcapm2)
	   errorLayer(errvpp11bv3 "GRVNCAP11b: (V3 over VNCAPM3) must be coincident with (V2 over VNCAPM2)")

Executing: errvpp11bv4 = geomAndNot(geomAnd(v4_over_vppcapm4 vppcapm3) v3_over_vppcapm3)
	   errorLayer(errvpp11bv4 "GRVNCAP11b: (V4 over VNCAPM4) must be coincident with (V3 over VNCAPM3)")

Executing: errvpp11bv5 = geomAndNot(geomAnd(v5_over_vppcapm5 vppcapm4) v4_over_vppcapm4)
	   errorLayer(errvpp11bv5 "GRVNCAP11b: (V5 over VNCAPM5) must be coincident with (V4 over VNCAPM4)")

Executing: errvpp11bm2 = geomAndNot(geomAnd(m2_over_vppcapm2 vppcapm1) m1_over_vppcapm1)
	   errorLayer(errvpp11bm2 "GRVNCAP12: (M2 over VNCAPM2) must be coincident with (M1 over VNCAPM1)")

Executing: errvpp11bm3 = geomAndNot(geomAnd(m3_over_vppcapm3 vppcapm2) m2_over_vppcapm2)
	   errorLayer(errvpp11bm3 "GRVNCAP12: (M3 over VNCAPM3) must be coincident with (M2 over VNCAPM2)")

Executing: errvpp11bm4 = geomAndNot(geomAnd(m4_over_vppcapm4 vppcapm3) m3_over_vppcapm3)
	   errorLayer(errvpp11bm4 "GRVNCAP12: (M4 over VNCAPM4) must be coincident with (M3 over VNCAPM3)")

Executing: errvpp11bm5 = geomAndNot(geomAnd(m5_over_vppcapm5 vppcapm4) m4_over_vppcapm4)
	   errorLayer(errvpp11bm5 "GRVNCAP12: (M5 over VNCAPM5) must be coincident with (M4 over VNCAPM4)")

Executing: errvpp11bmt = geomAndNot(geomAnd(mt_over_vppcapmt vppcapm5) m5_over_vppcapm5)
	   errorLayer(errvpp11bmt "GRVNCAP12: (MT over VNCAPMT) must be coincident with (M5 over VNCAPM5)")

Executing: nw13 = geomAvoiding(geomOr(nw bb) geomOr(pc rx))

Executing: drc(nw13 m1_over_vppcapm1 (enc < 5.0) "GRVNCAP13: ((NW or BB) not touching (P...

Executing: drc(nw13 m2_over_vppcapm2 (enc < 5.0) "GRVNCAP13: ((NW or BB) not touching (P...

Executing: drc(nw13 m3_over_vppcapm3 (enc < 5.0) "GRVNCAP13: ((NW or BB) not touching (P...

Executing: drc(nw13 m4_over_vppcapm4 (enc < 5.0) "GRVNCAP13: ((NW or BB) not touching (P...

Executing: drc(nw13 m5_over_vppcapm5 (enc < 5.0) "GRVNCAP13: ((NW or BB) not touching (P...

Executing: drc(nw13 mt_over_vppcapmt (enc < 5.0) "GRVNCAP13: ((NW or BB) not touching (P...

Executing: errvpp15m1 = geomGetAngledEdge(m1_over_vppcapm1 ((0 < keep) < 90) fig)
	   errorLayer(errvpp15m1 "GRVNCAP15: (M1 intersect VNCAPM1) must be rectangular")

Executing: errvpp15m2 = geomGetAngledEdge(m2_over_vppcapm2 ((0 < keep) < 90) fig)
	   errorLayer(errvpp15m2 "GRVNCAP15: (M2 intersect VNCAPM2) must be rectangular")

Executing: errvpp15m3 = geomGetAngledEdge(m3_over_vppcapm3 ((0 < keep) < 90) fig)
	   errorLayer(errvpp15m3 "GRVNCAP15: (M3 intersect VNCAPM3) must be rectangular")

Executing: errvpp15m4 = geomGetAngledEdge(m4_over_vppcapm4 ((0 < keep) < 90) fig)
	   errorLayer(errvpp15m4 "GRVNCAP15: (M4 intersect VNCAPM4) must be rectangular")

Executing: errvpp15m5 = geomGetAngledEdge(m5_over_vppcapm5 ((0 < keep) < 90) fig)
	   errorLayer(errvpp15m5 "GRVNCAP15: (M5 intersect VNCAPM5) must be rectangular")

Executing: errvpp15mt = geomGetAngledEdge(mt_over_vppcapmt ((0 < keep) < 90) fig)
	   errorLayer(errvpp15mt "GRVNCAP15: (MT intersect VNCAPMT) must be rectangular")

Executing: vncpa_all = geomOr(vppcapm1 vppcapm2 vppcapm3 vppcapm4 vppcapm5 vppcapmt)

Executing: errvncapm1 = geomAndNot(vncpa_all geomEnclose(vncpa_all vncapparm))
	   errorLayer(errvncapm1 "GRVNCPM1: Union (VNCAP_Mx (x=1,2,3,4,5,T)) must enclose at least one VNCAP_PARM shape!")

Executing: errvncapm2a = geomAndNot(vppcapm1 geomEnclose(vppcapm1 vncapcount))
	   errorLayer(errvncapm2a "GRVNCPM2: VNCAP_M1 must enclose one VNCAP_COUNT shape!")

Executing: errvncapm2b = geomAndNot(vppcapm2 geomEnclose(vppcapm2 vncapcount))
	   errorLayer(errvncapm2b "GRVNCPM2: VNCAP_M2 must enclose one VNCAP_COUNT shape!")

Executing: errvncapm2c = geomAndNot(vppcapm3 geomEnclose(vppcapm3 vncapcount))
	   errorLayer(errvncapm2c "GRVNCPM2: VNCAP_M3 must enclose one VNCAP_COUNT shape!")

Executing: errvncapm2d = geomAndNot(vppcapm4 geomEnclose(vppcapm4 vncapcount))
	   errorLayer(errvncapm2d "GRVNCPM2: VNCAP_M4 must enclose one VNCAP_COUNT shape!")

Executing: errvncapm2e = geomAndNot(vppcapm5 geomEnclose(vppcapm5 vncapcount))
	   errorLayer(errvncapm2e "GRVNCPM2: VNCAP_M5 must enclose one VNCAP_COUNT shape!")

Executing: errvncapm2f = geomAndNot(vppcapmt geomEnclose(vppcapmt vncapcount))
	   errorLayer(errvncapm2f "GRVNCPM2: VNCAP_MT must enclose one VNCAP_COUNT shape!")

Executing: c4pad = geomOr(lvpad lvdummy)

Executing: c4pad_real = geomAndNot(c4pad lvdummy)

Executing: err900a1 = geomStraddle(c4pad_real c4lv)
	   errorLayer(err900a1 "GR900a: LV(for C4's) must be within C4LV >= 0.000 um.")

Executing: err900a2 = geomOutside(c4pad_real c4lv)
	   errorLayer(err900a2 "GR900a: LV outside of C4LV found! (when C4 checking is selected)")

Executing: c4lv_touch_lv = geomOverlap(c4lv geomAnd(geomSize(lv 0.01) c4lv))

Executing: err900b = geomAndNot(c4lv c4lv_touch_lv)
	   errorLayer(err900b "GR900b: C4LV must touch LV !")

Executing: err900_1 = drc(c4pad (width < 46.9) opposite fig)
	   errorLayer(err900_1 "GR900: LV(terminal via) diameter == 47.000 um.(error <)")

Executing: err900_2 = drc(c4pad (area > 1831.0))
	   errorLayer(err900_2 "GR900: LV(terminal via) diameter == 47.000 um.(error >)")

Executing: lv_touch_c4lv = geomButtOrOver(lv c4lv)

Executing: lvc4_ed_45 = geomSize(geomGetAngledEdge(lv_touch_c4lv (keep == 45)) -0.01)

Executing: lvc4_ed_90 = geomSize(geomGetAngledEdge(lv_touch_c4lv (keep == 90)) -0.01)

Executing: err_lvc4_1 = geomOverlap(lv_touch_c4lv lvc4_ed_45 (keep == 4))

Executing: err_lvc4_2 = geomOverlap(err_lvc4_1 lvc4_ed_90 (keep == 4))

Executing: err900c = geomAndNot(lv_touch_c4lv err_lvc4_2)
	   errorLayer(err900c "GR900c: LV touching C4 must be octogonal !")

Executing: err906 = geomAndNot(c4pad ChipEdge)
	   errorLayer(err906 "GR906: LV(C4 pad) not within {GUARDEDGE,(CHIPEDGE not touching GUARDEDGE)} found!")

Executing: err907 = geomAnd(c4pad logobnd)
	   errorLayer(err907 "GR907: LV(C4 pad) touching Chip Logo & PN (LOGBND) found!")

Executing: drc(c4pad (sep < 153.0) fig "GR901: LV(C4 pad) to LV(C4 pad) space >= 153.000...

Executing: drc(am c4pad_real (enc < 14.5) figb "GR902b: LV within AM >= 14.500 um.")

Executing: drc(ma c4pad_real (enc < 14.5) figb "GR902b: LV within MA >= 14.500 um.")

Executing: drc(ml c4pad_real (enc < 14.5) figb "GR902b: LV within ML >= 14.500 um.")

Executing: drc(mz c4pad_real (enc < 14.5) figb "GR902b: LV within MZ >= 14.500 um.")

Executing: drc(ChipEdge c4pad (enc < 86.0) figb "GR906: LV(C4 pad) within {GUARDEDGE,(CH...

Executing: drc(c4pad logobnd (sep < 64.0) figa "GR907: LV(C4 pad) to Chip Logo & PN (LOG...

Executing: errc4mn = geomEnclose(chipedge lv (keep < 3))
	   errorLayer(errc4mn "GRC4MX: Minimum C4's per chip should be >=3")

Executing: errc4mx = geomEnclose(chipedge lv (keep > 9000))
	   errorLayer(errc4mx "GRC4MN: Maximum C4's per chip should be <=9000")

Executing: err911a = geomOverlap(lvdummy geomSize(lv 0.01))
	   errorLayer(err911a "GR911a: LVDUMMY must not touch LV !")

Executing: lvpad_good = geomAndNot(c4pad geomOr(err900_1 err900_2))

Executing: err927 = geomAndNot(geomOverlap(ChipEdge lvpad_good) geomSize(lvpad_good 1500))
	   errorLayer(err927 "GR927: ({GUARDEDGE,(CHIPEDGE not touching GUARDEDGE)} not within LV or LVDUMMY size by 1500 found!")

Executing: lm_pad = geomOverlap(lastmetal iopad)

Executing: drc(bondpad lm_pad (enc < 0.092) "GRBONDPAD1: BONDPAD overlap past LASTMETAL ...

Executing: lm_pdf = geomAnd(lastmetal bondpad)

Executing: errbndpd3 = geomAndNot(lm_pdf geomOr(bb pc))
	   errorLayer(errbndpd3 "GRBONDPAD3: LASTMETAL(over BONDPAD) not within (BB or PC) found!")

Executing: drc(bb lm_pdf (enc < 4.9) withSingularPoint "GRBONDPAD3: LASTMETAL(over BONDP...

Executing: drc(pc lm_pdf (enc < 4.9) withSingularPoint "GRBONDPAD3: LASTMETAL(over BONDP...

Executing: errbndpd4bp = geomOr(geomButtOrOver(lm_pdf bp) geomOverlap(lm_pdf geomAnd(geo...
	   errorLayer(errbndpd4bp "GRBONDPAD4: LASTMETAL(over BONDPAD) touching BP found!")

Executing: errbndpd4e1 = geomOr(geomButtOrOver(lm_pdf e1) geomOverlap(lm_pdf geomAnd(geo...
	   errorLayer(errbndpd4e1 "GRBONDPAD4: LASTMETAL(over BONDPAD) touching E1 found!")

Executing: errbndpd4k1 = geomOr(geomButtOrOver(lm_pdf k1) geomOverlap(lm_pdf geomAnd(geo...
	   errorLayer(errbndpd4k1 "GRBONDPAD4: LASTMETAL(over BONDPAD) touching K1 found!")

Executing: errbndpd4m1 = geomOr(geomButtOrOver(lm_pdf m1) geomOverlap(lm_pdf geomAnd(geo...
	   errorLayer(errbndpd4m1 "GRBONDPAD4: LASTMETAL(over BONDPAD) touching M1 found!")

Executing: errbndpd4m2 = geomOr(geomButtOrOver(lm_pdf m2) geomOverlap(lm_pdf geomAnd(geo...
	   errorLayer(errbndpd4m2 "GRBONDPAD4: LASTMETAL(over BONDPAD) touching M2 found!")

Executing: errbndpd4m3 = geomOr(geomButtOrOver(lm_pdf m3) geomOverlap(lm_pdf geomAnd(geo...
	   errorLayer(errbndpd4m3 "GRBONDPAD4: LASTMETAL(over BONDPAD) touching M3 found!")

Executing: errbndpd4m4 = geomOr(geomButtOrOver(lm_pdf m4) geomOverlap(lm_pdf geomAnd(geo...
	   errorLayer(errbndpd4m4 "GRBONDPAD4: LASTMETAL(over BONDPAD) touching M4 found!")

Executing: errbndpd4m5 = geomOr(geomButtOrOver(lm_pdf m5) geomOverlap(lm_pdf geomAnd(geo...
	   errorLayer(errbndpd4m5 "GRBONDPAD4: LASTMETAL(over BONDPAD) touching M5 found!")

Executing: errbndpd4mt = geomOr(geomButtOrOver(lm_pdf mt) geomOverlap(lm_pdf geomAnd(geo...
	   errorLayer(errbndpd4mt "GRBONDPAD4: LASTMETAL(over BONDPAD) touching MT found!")

Executing: errbndpd4nw = geomOr(geomButtOrOver(lm_pdf nw) geomOverlap(lm_pdf geomAnd(geo...
	   errorLayer(errbndpd4nw "GRBONDPAD4: LASTMETAL(over BONDPAD) touching NW found!")

Executing: errbndpd4rx = geomOr(geomButtOrOver(lm_pdf rx) geomOverlap(lm_pdf geomAnd(geo...
	   errorLayer(errbndpd4rx "GRBONDPAD4: LASTMETAL(over BONDPAD) touching RX found!")

Executing: errbndpd4ns = geomOr(geomButtOrOver(lm_pdf ns) geomOverlap(lm_pdf geomAnd(geo...
	   errorLayer(errbndpd4ns "GRBONDPAD4: LASTMETAL(over BONDPAD) touching NS found!")

Executing: drc(lm_pdf bp ((0 < sep) < 4.9) "GRBONDPAD4: LASTMETAL(over BONDPAD) to BP sp...

Executing: drc(lm_pdf e1 ((0 < sep) < 4.9) "GRBONDPAD4: LASTMETAL(over BONDPAD) to E1 sp...

Executing: drc(lm_pdf k1 ((0 < sep) < 4.9) "GRBONDPAD4: LASTMETAL(over BONDPAD) to K1 sp...

Executing: drc(lm_pdf m1 ((0 < sep) < 4.9) "GRBONDPAD4: LASTMETAL(over BONDPAD) to M1 sp...

Executing: drc(lm_pdf m2 ((0 < sep) < 4.9) "GRBONDPAD4: LASTMETAL(over BONDPAD) to M2 sp...

Executing: drc(lm_pdf m3 ((0 < sep) < 4.9) "GRBONDPAD4: LASTMETAL(over BONDPAD) to M3 sp...

Executing: drc(lm_pdf m4 ((0 < sep) < 4.9) "GRBONDPAD4: LASTMETAL(over BONDPAD) to M4 sp...

Executing: drc(lm_pdf m5 ((0 < sep) < 4.9) "GRBONDPAD4: LASTMETAL(over BONDPAD) to M5 sp...

Executing: drc(lm_pdf mt ((0 < sep) < 4.9) "GRBONDPAD4: LASTMETAL(over BONDPAD) to MT sp...

Executing: drc(lm_pdf nw ((0 < sep) < 4.9) "GRBONDPAD4: LASTMETAL(over BONDPAD) to NW sp...

Executing: drc(lm_pdf pc ((0 < sep) < 4.9) "GRBONDPAD4: LASTMETAL(over BONDPAD) to PC sp...

Executing: drc(lm_pdf rx ((0 < sep) < 4.9) "GRBONDPAD4: LASTMETAL(over BONDPAD) to RX sp...

Executing: drc(lm_pdf ns ((0 < sep) < 4.9) "GRBONDPAD4: LASTMETAL(over BONDPAD) to NS sp...

Executing: c4_via = geomEnclose(bkgnd geomAnd(iopad c4lv))

Executing: wb_via = geomEnclose(bkgnd geomAndNot(iopad c4lv))

Executing: dual_pad = geomAnd(c4_via wb_via)
	   errorLayer(dual_pad "WARNING: YOU HAVE BOTH C4 AND WIREBOND PADS IN THIS DESIGN")

Executing: noibmcrackstop_exists = geomEnclose(bkgnd noibmcrackstop)
	   errorLayer(noibmcrackstop_exists "GRLEG_NOCS01: UNQUALIFIED_FEATURE: NOIBMCRACKSTOP level found in design. Contact your IBM technical representative.")

Executing: cupillar_exists = geomEnclose(bkgnd cupillar)

Executing: cupillar_tch_mlmz = geomEnclose(cupillar_exists geomOverlap(chipedge geomOr(m...
	   errorLayer(cupillar_tch_mlmz "GRPILLAR00: UNQUALIFIED_FEATURE: CUPILLAR level found in design. Contact your IBM technical representative.")

Executing: err_nocs02 = geomAnd(geomOr(geomAndNot(geomSize(chipedge -0.04) noibmcracksto...
	   errorLayer(err_nocs02 "GRLEG_NOCS02: If NOIBMCRACKSTOP exists, NOIBMCRACKSTOP must be drawn exactly coincident with CHIPEDGE.")

Executing: err_pillar01 = geomAnd(geomOr(geomAndNot(geomSize(ChipEdge -0.04) cupillar) g...
	   errorLayer(err_pillar01 "GRPILLAR01: If CUPILLAR exists, CUPILLAR must be drawn exactly coincident with {GUARDEDGE,(CHIPEDGE not touching GUARDEDGE)}")

Executing: mpw_pad = geomEnclose(geomEnclose(bkgnd c4_via) cupillar)
	   errorLayer(mpw_pad "NOTE: YOU HAVE BOTH C4 AND CUPILLAR PADS IN THIS DESIGN. PLEASE CONTACT IBM TECHNICAL SUPPORT FOR MULTI-PROJECT WAFER DESIGN!")

Executing: m2fill = geomOutside(m2 geomOr(v1_all v2_all logobnd))

Executing: m3fill = geomOutside(m3 geomOr(v2_all v3_all logobnd))

Executing: m4fill = geomOutside(m4 geomOr(v3_all v4_all logobnd))

Executing: m5fill = geomOutside(m5 geomOr(v4_all v5_all logobnd))

Executing: mtfill = geomOutside(mt geomOr(ft_all logobnd geomAnd(v1_all LM1) geomAnd(v2_...

Executing: e1fill = geomOutside(e1 geomOr(ft_all e2 logobnd))

Executing: drc(m2fill (area > 144.0) "GRF20: M2FILL area <= 144.00 sq. um.")

Executing: drc(m3fill (area > 144.0) "GRF20: M3FILL area <= 144.00 sq. um.")

Executing: drc(m4fill (area > 144.0) "GRF20: M4FILL area <= 144.00 sq. um.")

Executing: drc(m5fill (area > 144.0) "GRF20: M5FILL area <= 144.00 sq. um.")

Executing: drc(mtfill (area > 144.0) "GRF20: MTFILL area <= 144.00 sq. um.")

Executing: drc(e1fill (area > 144.0) "GRF20: E1FILL area <= 144.00 sq. um.")

Executing: fivevonly_exists = geomEnclose(bkgnd fivevonly)

Executing: err5vonly01 = geomAnd(geomAndNot(gate tg) fivevonly_exists)
	   errorLayer(err5vonly01 "GR5VONLY01: If 5VONLY shape exists in the layout then all (PC over RX) shapes must be covered by TG")

Executing: err5vonly02 = geomAnd(geomOr(jc as bp2nd dg dgv sbd jd nr pr zerovt geomAndNo...
	   errorLayer(err5vonly02 "GR5VONLY02: 5VONLY cannot exist in the same layout with any of the following levels {JC,AS,BP2ND,DG, DGV, SBD, JD, NR, PR, ZEROVT, (MOSVAR not over TG), SCHKY, BIPOLAR}")

Executing: err_plyon1 = geomAndNot(geomOr(plyoncrk fivevonly) chipedge)
	   errorLayer(err_plyon1 "GRPLYONCRK1: (PLYONCRK,5VONLY) wthin CHIPEDGE >=0.")

Executing: err_plyon2 = geomAvoiding(geomOverlap(chipedge geomSize(plyoncrk 0.01)) fivev...
	   errorLayer(err_plyon2 "GRPLYONCRK2: (CHIPEDGE touching PLYONCRK) must touch 5VONLY shape.")

Executing: drc(js (sepNotch < 0.64) withSingularPoint "GRJS01: JS space >=0.64.")

Executing: drc(js (width < 0.52) "GRJS02: JS width  >=0.52.")

Executing: drc(js (area < 2.6) "GRJS02a: JS min area  >=2.60")

Executing: drc(js rx (sep < 0.14) "GRJS04: JS to adjacent RX >=0.14.")

Executing: drc(js rx (enc < 0.14) "GRJS05: JS overlap past JRX >= 0.14 um.")

Executing: err_js6 = geomAndNot(js jc)
	   errorLayer(err_js6 "GRJS06: JS must be within JC.")

Executing: err_js11 = geomOverlap(js bp)
	   errorLayer(err_js11 "GRJS11: JS cannot overlpa BP.")

Executing: err_jspn001 = geomStraddle(js logobnd)
	   errorLayer(err_jspn001 "GRJSPN001: JS straddling LOGOBND not allowed.")

Executing: drc(as (width < 1.44) "GRAS11: AS minimum width >= 1.44 um !")

Executing: drc(as (sep < 0.5) "GRAS12: AS minimum space >= 0.50 um.")

Executing: drc(as (notch < 0.5) "GRAS12: AS minimum notch >= 0.50 um.")

Executing: as_encl = geomAndNot(geomHoles(as) as)

Executing: drc(as_encl (area < 0.387) "GRAS14: AS enclosed area >= 0.387 sq.um.")

Executing: as_not_ortho = geomGetAngledEdge(as ((0 < keep) < 90) fig)
	   errorLayer(as_not_ortho "GRAS15: Non-orthogonal AS shapes found!")

Executing: pc_rx_as = geomAnd(geomAnd(pc rx) as)

Executing: erras16 = geomGetNonRectangle(pc_rx_as)
	   errorLayer(erras16 "GRAS16: [(PC over RX) over AS] must be rectangular")

Executing: pc_rx_as17 = geomAvoiding(geomAnd(pc rx) geomOr(dg tg nw nr pr zerovt))

Executing: erras17 = geomAndNot(as geomButtOrOver(as pc_rx_as17))
	   errorLayer(erras17 "GRAS17: AS must touch [(PC over RX) not touching {DG,NW,NR,TG,PR ZEROVT}]")

Executing: pc_not_touching_rx = geomAndNot(pc geomButtOrOver(pc rx))

Executing: erras18a = geomButtOrOver(as pc_not_touching_rx)
	   errorLayer(erras18a "GRAS18a: AS touching (PC not touching RX) not allowed.")

Executing: erras18b = geomButtOrOver(as geomOr(pc_res rx_res))
	   errorLayer(erras18b "GRAS18b: AS touching ({RX,PC} touching OP) not allowed.")

Executing: bp_as18c = geomButtOrOver(bp geomOr(op pcfuse rr rp))

Executing: erras18c = geomButtOrOver(as bp_as18c)
	   errorLayer(erras18c "GRAS18c: AS touching (BP touching {OP,PCFUSE,RR,RP}) not allowed.")

Executing: erras18d = geomOverlap(as geomSize(geomOr(bb tg dg mosvar zvt_x072) 0.01))
	   errorLayer(erras18d "GRAS18d: AS touching {BB,DG,TG,MOSVAR,(ZEROVT sized by 0.72)} not allowed.")

Executing: erras18e = geomButtOrOver(as geomOr(pr nr jd rn rr rp pd op tg))
	   errorLayer(erras18e "GRAS18e: AS touching {PR,NR,JD,RN,RR,RP,PD,OP,TG} not allowed.")

Executing: erras18f = geomButtOrOver(as geomOr(bfmoat bondpad bperi di esdummy esdrf ind...
	   errorLayer(erras18f "GRAS18f: AS touching {BFMOAT,BONDPAD,BPERI,DI,ESDUMMY,ESDRF,IND_FILT,SBLK,TLINE} not allowed.")

Executing: erras19a = geomAnd(as nw)
	   errorLayer(erras19a "GRAS19a: AS over NW not allowed.")

Executing: erras19b = geomAnd(as bp)
	   errorLayer(erras19b "GRAS19b: AS over BP not allowed.")

Executing: drc(as nw ((0 < sep) < 0.44) "GRAS20a: AS to NW space >= 0.44 um.")

Executing: nw_x044 = geomSize(nw 0.44)

Executing: as_touch_nw = geomButtOnly(as nw)

Executing: erras20a = geomButtOrOver(as geomAnd(geomAndNot(as geomButtOnly(as nw)) nw_x0...

Executing: erras20b1 = geomAnd(geomAndNot(as as_touch_nw) erras20a)

Executing: as_ext_nw = geomAnd(geomSize(as_touch_nw 0.001) geomSize(nw 0.001))

Executing: ok_as20b2 = geomGetLength(as_ext_nw (keep >= 0.438) fig)

Executing: erras20b2 = geomButtOrOver(as_touch_nw geomAndNot(as_ext_nw ok_as20b2))

Executing: errorLayer(geomOr(erras20b1 erras20b2) "GRAS20b: AS must abut NW (point touching not allowed and the abutting run length must be >= 0.44 mm).")

Executing: erras20_or = geomOr(erras20a erras20b1 erras20b2)
	   errorLayer(erras20_or "GRAS20_or: Either {AS to NW space must be >= 0.44 um} or {AS must abut NW (point touching not allowed)}")

Executing: drc(as bp ((0 < sep) < 0.34) "GRAS21a: AS to BP space >= 0.34 um.")

Executing: bp_x034 = geomSize(bp 0.34)

Executing: as_touch_bp = geomButtOnly(as bp)

Executing: erras21a = geomButtOrOver(as geomAnd(geomAndNot(as geomButtOnly(as bp)) bp_x0...

Executing: erras21b1 = geomAnd(geomAndNot(as as_touch_bp) erras21a)

Executing: as_ext_bp = geomAnd(geomSize(as_touch_bp 0.001) geomSize(bp 0.001))

Executing: ok_as21b2 = geomGetLength(as_ext_bp (keep >= 0.338) fig)

Executing: erras21b2 = geomButtOrOver(as_touch_bp geomAndNot(as_ext_bp ok_as21b2))

Executing: errorLayer(geomOr(erras21b1 erras21b2) "GRAS21b: AS must abut BP (point touching not allowed and the abutting run length must be >= 0.34 mm)")

Executing: erras21_or = geomOr(erras21a erras21b1 erras21b2)
	   errorLayer(erras21_or "GRAS21_or: Either {AS to BP space must be >= 0.34 um} or {AS must abut BP (point touching not allowed)}")

Executing: drc(as tg ((0 < sep) < 0.44) "GRAS22a: AS to TG     space >= 0.44 um.")

Executing: drc(as dg ((0 < sep) < 0.44) "GRAS22a: AS to DG     space >= 0.44 um.")

Executing: drc(as mosvar ((0 < sep) < 0.44) "GRAS22a: AS to MOSVAR space >= 0.44 um.")

Executing: drc(as bp_pcfuse ((0 < sep) < 0.34) "GRAS22b: AS to (BP touching PCFUSE) spac...

Executing: drc(as bb ((0 < sep) < 0.44) "GRAS22c: AS to BB space >= 0.44 um.")

Executing: drc(as zerovt ((0 < sep) < 1.16) "GRAS22d: AS to ZEROVT space >= 1.16 um.")

Executing: drc(as rn ((0 < sep) < 0.34) "GRAS22e: AS to RN space >= 0.34 um.")

Executing: drc(as bh3 ((0 < sep) < 0.44) "GRAS22f: AS to BH3 space >= 0.44 um.")

Executing: pc_over_as = geomAnd(pc as)

Executing: erras104s = drc(pc_over_as (sep < 0.56))
	   errorLayer(erras104s "GRAS104: [(PC to PC) over AS] space >= 0.560 um.")

Executing: erras104n = drc(pc_over_as (notch < 0.56))
	   errorLayer(erras104n "GRAS104: [(PC to PC) over AS] notch >= 0.560 um.")

Executing: rx_strad_as = geomStraddle(rx as)
	   errorLayer(rx_strad_as "GRAS353: RX straddling AS found!")

Executing: drc(as rx (enc < 0.72) "GRAS353: RX within AS >= 0.72 um.")

Executing: drc(as rx ((0 < sep) < 0.72) "GRAS355: AS to RX space >= 0.72 um.")

Executing: drc(bhgen geomButtOrOver(bhgen as) ((0 < sep) < 0.44) "GRAS357: BH to AS spac...

Executing: drc(as pc_over_rx ((0 < sep) < 0.8) "GRAS370: (PC over RX) to AS space >= 0.8...

Executing: pc_over_rx_strad_as = geomStraddle(pc_over_rx as)
	   errorLayer(pc_over_rx_strad_as "GRAS371: (PC over RX) straddling AS found!")

Executing: drc(as pc_over_rx (enc < 0.9) "GRAS371: (PC over RX) within AS >= 0.90 um.")

Executing: drc(dvpad as (sep < 3.0) "GRAS942: DV terminal WB pad to AS >= 3.000 um.")

Executing: drc(tvpad as (sep < 3.0) "GRAS942: TV terminal WB pad to AS >= 3.000 um.")

Executing: erras951_dv = geomAnd(dvpad as)
	   errorLayer(erras951_dv "GRAS951: DV terminal WB pad touching AS not allowed")

Executing: erras951_tv = geomAnd(tvpad as)
	   errorLayer(erras951_tv "GRAS951: TV terminal WB pad touching AS not allowed")

Executing: erras990 = geomButtOrOver(bp_ring as)
	   errorLayer(erras990 "GRAS990: BP in the chip guardring touching AS not allowed")

Executing: errorLayer(geomStraddle(as logobnd) "GRASPN001: AS shape straddling LOGOBND not allowed")

Executing: viaQt = geomAnd(qt chipedge)

Executing: geomConnect((via viaQt qt chipedge) (via viaHt ht chipedge))

Executing: qtSameChip = geomNodeRelate(qt chipedge conn)

Executing: htSameChip = geomNodeRelate(ht chipedge conn)

Executing: geomConnect((via viaQt qtSameChip chipedge) (via viaHt htSameChip chipedge))

Executing: processAntenna(((gate (chipedge qtSameChip)) (antenna qtSameChip) (diffusion ...
running in speedup mode

Executing: ca_via = geomAnd(ca_all m1)

Executing: v1_via = geomAnd(v1_all m2_exists)

Executing: v1_via_mt = geomAnd(v1_all m2_empty)

Executing: v2_via = geomAnd(v2_all m3_exists)

Executing: v2_via_mt = geomAnd(v2_all m3_empty)

Executing: v3_via = geomAnd(v3_all m4_exists)

Executing: v3_via_mt = geomAnd(v3_all m4_empty)

Executing: v4_via = geomAnd(v4_all m5_exists)

Executing: v4_via_mt = geomAnd(v4_all m5_empty)

Executing: v5_via = geomAnd(v5_all mt)

Executing: geomConnect((via ca_via ca m1) (via ca_via cabar m1) (via ca_via rx_net m1) (...

Executing: drc(pi_not_nw (sep < 1) diffNet "GRNW5:  (PI not over NW) space (different ne...

Executing: lay_dg13 = geomAndNot(dg geomButtOrOver(dg geomOr(nw bb bh)))

Executing: errdg13 = geomButtOnly(dg geomOr(nw bb bh))
	   errorLayer(errdg13 "GRDG13: DG touching NW, BB or BH")

Executing: drc(lay_dg13 nw (sep < 0.44) "GRDG13: DG to NW space >= 0.440 um.")

Executing: drc(lay_dg13 bb ((0 < sep) < 0.44) "GRDG13: DG to BB space >= 0.440 um.")

Executing: drc(lay_dg13 bh (sep < 0.44) "GRDG13: DG to BH space >= 0.440 um.")

Executing: via_dg13 = geomOr(dg)

Executing: geomConnect((via via_dg13 dg bhgen))

Executing: drc(dg bhgen (sep < 0.44) diffNet "GRDG13: Layout will cause: DG to BH space ...

Executing: bkgnd3 = geomOr(bkgnd)

Executing: errorLayer(bkgnd3 "# INFO: CMRF-7sf ASSURA DRC DECK (REV DATE 12/18/2013) #")

Finished running rules. Task processor time in main process:
cpu: 2.32  elap: 3  pf: 0  in: 0  out: 4552  virt: 246M  phys: 1141M

Started output post-processing ...

Nothing to postprocess: No grid cells in the design

Finished output post-processing
cpu: 0.61  elap: 0  pf: 0  in: 0  out: 0  virt: 727M  phys: 2316M

Finished building the persistent database.
cpu: 0.01  elap: 1  pf: 0  in: 0  out: 6496  virt: 732M  phys: 2335M


*****  aveng terminated normally  *****


Finished /opt/cadence/ASSURA41//tools/assura/bin/aveng

Starting /opt/cadence/ASSURA41//tools/assura/bin/avrpt /home/DREXEL/jvk27/ECEC472/IBM/SRA_DRC/SRA_DRC.rsf
@(#)$CDS: avrpt_64 version av4.1:Production:dfII6.1.5-64b:IC6.1.5-64b.500.17 01/29/2014 13:16 (sjfdl030) $
sub-version 4.1_USR4_HF6, integ signature 2014-01-29-1246

run on xunil-01 from /opt/cadence/ASSURA41/tools.lnx86/assura/bin/64bit/avrpt on Sat Mar 15 12:56:31 2014


   Creating Error Database 'SRA_DRC'...

   Reading VDB ...
--------------------------------------------------------------------------------
Rule      Message                                    FlatCount     RealCount
--------------------------------------------------------------------------------
(    1)  dataAuditErrors                                     0            0
(    2)  # INFO: I/O PADS = C4(4 on 8) #                     1            1
(    3)  ERROR: CA(net) not covered by CA(drawing            0            0
(    4)  ERROR: CABAR(net) not covered by CABAR(d            0            0
(    5)  ERROR: E2(net) not covered by E2(drawing            0            0
(    6)  ERROR: FT(net) not covered by FT(drawing            0            0
(    7)  ERROR: NS(net) not covered by NS(drawing            0            0
(    8)  ERROR: NW(net) not covered by NW(drawing            0            0
(    9)  ERROR: V1(net) not covered by V1(drawing            0            0
(   10)  ERROR: V1BAR(net) not covered by V1BAR(d            0            0
(   11)  ERROR: V2(net) not covered by V2(drawing            0            0
(   12)  ERROR: V2BAR(net) not covered by V2BAR(d            0            0
(   13)  ERROR: V3(net) not covered by V3(drawing            0            0
(   14)  ERROR: V3BAR(net) not covered by V3BAR(d            0            0
(   15)  ERROR: V4(net) not covered by V4(drawing            0            0
(   16)  ERROR: V4BAR(net) not covered by V4BAR(d            0            0
(   17)  ERROR: V5(net) not covered by V5(drawing            0            0
(   18)  ERROR: V5BAR(net) not covered by V5BAR(d            0            0
(   19)  ERROR: AM(net or pin) not covered by AM(            0            0
(   20)  ERROR: DV(net or pin) not covered by DV(            0            0
(   21)  ERROR: E1(net or pin) not covered by E1(            0            0
(   22)  ERROR: LV(net or pin) not covered by LV(            0            0
(   23)  ERROR: M1(net or pin) not covered by M1(            0            0
(   24)  ERROR: M2(net or pin) not covered by M2(            0            0
(   25)  ERROR: M3(net or pin) not covered by M3(            0            0
(   26)  ERROR: M4(net or pin) not covered by M4(            0            0
(   27)  ERROR: M5(net or pin) not covered by M5(            0            0
(   28)  ERROR: MA(net or pin) not covered by MA(            0            0
(   29)  ERROR: ML(net or pin) not covered by ML(            0            0
(   30)  ERROR: MT(net or pin) not covered by MT(            0            0
(   31)  ERROR: NW(net or pin) not covered by NW(            0            0
(   32)  ERROR: RX(net or pin) not covered by RX(            0            0
(   33)  ERROR: PC(net) not covered by PC(drawing            0            0
(   34)  ERROR: PC(pin) not covered by PC(drawing            0            0
(   35)  ERROR: SHAPE(S) ON A NON-DESIGN LEVEL FO            0            0
(   36)  ERROR: SHAPE(S) ON A NON-DESIGN LEVEL FO            0            0
(   37)  ERROR: SHAPE(S) ON A NON-DESIGN LEVEL FO            0            0
(   38)  ERROR: SHAPE(S) ON A NON-DESIGN LEVEL FO            0            0
(   39)  ERROR: SHAPE(S) ON A NON-DESIGN LEVEL FO            0            0
(   40)  ERROR: SHAPE(S) ON A NON-DESIGN LEVEL FO            0            0
(   41)  ERROR: SHAPE(S) ON AN IBM RESERVED LAYER            0            0
(   42)  ERROR: SHAPE(S) ON AN IBM RESERVED LAYER            0            0
(   43)  ERROR: SHAPE(S) ON AN IBM RESERVED LAYER            0            0
(   44)  ERROR: SHAPE(S) ON AN IBM RESERVED LAYER            0            0
(   45)  ERROR: SHAPE(S) ON AN IBM RESERVED LAYER            0            0
(   46)  ERROR: SHAPE(S) ON AN IBM RESERVED LAYER            0            0
(   47)  ERROR: SHAPE(S) ON AN IBM RESERVED LAYER            0            0
(   48)  ERROR: SHAPE(S) ON AN IBM RESERVED LAYER            0            0
(   49)  ERROR: SHAPE(S) ON AN IBM RESERVED LAYER            0            0
(   50)  ERROR: SHAPE(S) ON AN IBM RESERVED LAYER            0            0
(   51)  ERROR: SHAPE(S) ON AN IBM RESERVED LAYER            0            0
(   52)  ERROR: SHAPE(S) ON AN IBM RESERVED LAYER            0            0
(   53)  GRPN001: Shape straddling LOGOBND found!            0            0
(   54)  GRPN001: Shape straddling LOGOBND found!            0            0
(   55)  GRPN001: Shape straddling LOGOBND found!            0            0
(   56)  GRPN001: Shape straddling LOGOBND found!            0            0
(   57)  GRPN001: Shape straddling LOGOBND found!            0            0
(   58)  GRPN001: Shape straddling LOGOBND found!            0            0
(   59)  GRPN001: Shape straddling LOGOBND found!            0            0
(   60)  GRPN001: Shape straddling LOGOBND found!            0            0
(   61)  GRPN001: Shape straddling LOGOBND found!            0            0
(   62)  GRPN001: Shape straddling LOGOBND found!            0            0
(   63)  GRPN001: Shape straddling LOGOBND found!            0            0
(   64)  GRPN001: Shape straddling LOGOBND found!            0            0
(   65)  GRPN001: Shape straddling LOGOBND found!            0            0
(   66)  GRPN001: Shape straddling LOGOBND found!            0            0
(   67)  GRPN001: Shape straddling LOGOBND found!            0            0
(   68)  GRPN001: Shape straddling LOGOBND found!            0            0
(   69)  GRPN001: Shape straddling LOGOBND found!            0            0
(   70)  GRPN001: Shape straddling LOGOBND found!            0            0
(   71)  GRPN001: Shape straddling LOGOBND found!            0            0
(   72)  GRPN001: Shape straddling LOGOBND found!            0            0
(   73)  WARNING: 5V_FET NOT RUN!                            0            0
(   74)  GRPN001: Shape straddling LOGOBND found!            0            0
(   75)  GRPN001: Shape straddling LOGOBND found!            0            0
(   76)  GRPN001: Shape straddling LOGOBND found!            0            0
(   77)  GRPN001: Shape straddling LOGOBND found!            0            0
(   78)  GRPN001: Shape straddling LOGOBND found!            0            0
(   79)  GRPN001: Shape straddling LOGOBND found!            0            0
(   80)  GRPN001: Shape straddling LOGOBND found!            0            0
(   81)  GRPN001: Shape straddling LOGOBND found!            0            0
(   82)  GRPN001: Shape straddling LOGOBND found!            0            0
(   83)  GRPN001: Shape straddling LOGOBND found!            0            0
(   84)  GRPN001: Shape straddling LOGOBND found!            0            0
(   85)  GRPN001: Shape straddling LOGOBND found!            0            0
(   86)  GRPN001: Shape straddling LOGOBND found!            0            0
(   87)  GRPN001: Shape straddling LOGOBND found!            0            0
(   88)  GRPN001: Shape straddling LOGOBND found!            0            0
(   89)  GRPN001: Shape straddling LOGOBND found!            0            0
(   90)  GRPN001: Shape straddling LOGOBND found!            0            0
(   91)  GRPN001: Shape straddling LOGOBND found!            0            0
(   92)  GRPN001: Shape straddling LOGOBND found!            0            0
(   93)  GRPN001: Shape straddling LOGOBND found!            0            0
(   94)  GRPN001: Shape straddling LOGOBND found!            0            0
(   95)  GRPN001: Shape straddling LOGOBND found!            0            0
(   96)  GRPN001: Shape straddling LOGOBND found!            0            0
(   97)  GRPN001: Shape straddling LOGOBND found!            0            0
(   98)  GRPN001: Shape straddling LOGOBND found!            0            0
(   99)  GRPN001: Shape straddling LOGOBND found!            0            0
(  100)  GRPN001: Shape straddling LOGOBND found!            0            0
(  101)  GRPN001: Shape straddling LOGOBND found!            0            0
(  102)  GRPN001: Shape straddling LOGOBND found!            0            0
(  103)  GRPN001: Shape straddling LOGOBND found!            0            0
(  104)  GRPN001: Shape straddling LOGOBND found!            0            0
(  105)  GRPN001: Shape straddling LOGOBND found!            0            0
(  106)  GRPN001: Shape straddling LOGOBND found!            0            0
(  107)  GRPN001: Shape straddling LOGOBND found!            0            0
(  108)  GRPN001: Shape straddling LOGOBND found!            0            0
(  109)  GRPN001: Shape straddling LOGOBND found!            0            0
(  110)  GRPN001: Shape straddling LOGOBND found!            0            0
(  111)  GRPN001: Shape straddling LOGOBND found!            0            0
(  112)  GRPN001: Shape straddling LOGOBND found!            0            0
(  113)  GRPN001: Shape straddling LOGOBND found!            0            0
(  114)  GRPN001: Shape straddling LOGOBND found!            0            0
(  115)  GRPN001: Shape straddling LOGOBND found!            0            0
(  116)  GRPN001: Shape straddling LOGOBND found!            0            0
(  117)  GRPN001: Shape straddling LOGOBND found!            0            0
(  118)  GRPN001: Shape straddling LOGOBND found!            0            0
(  119)  GRPN001: Shape straddling LOGOBND found!            0            0
(  120)  GRPN001: Shape straddling LOGOBND found!            0            0
(  121)  GRPN001: Shape straddling LOGOBND found!            0            0
(  122)  GRPN001: Shape straddling LOGOBND found!            0            0
(  123)  GRPN001: Shape straddling LOGOBND found!            0            0
(  124)  GRPN001: Shape straddling LOGOBND found!            0            0
(  125)  GRPN001: Shape straddling LOGOBND found!            0            0
(  126)  GRPN001: Shape straddling LOGOBND found!            0            0
(  127)  GRPN001: Shape straddling LOGOBND found!            0            0
(  128)  GRPN001: Shape straddling LOGOBND found!            0            0
(  129)  GRPN001: Shape straddling LOGOBND found!            0            0
(  130)  GRPN001: Shape straddling LOGOBND found!            0            0
(  131)  GRPN001: Shape straddling LOGOBND found!            0            0
(  132)  GRPN001: Shape straddling LOGOBND found!            0            0
(  133)  GRPN001: Shape straddling LOGOBND found!            0            0
(  134)  GRPN001: Shape straddling LOGOBND found!            0            0
(  135)  GRPN001: Shape straddling LOGOBND found!            0            0
(  136)  GRPN001: Shape straddling LOGOBND found!            0            0
(  137)  GRPN001: Shape straddling LOGOBND found!            0            0
(  138)  GRPN001: Shape straddling LOGOBND found!            0            0
(  139)  GRPN001: Shape straddling LOGOBND found!            0            0
(  140)  GRPN001: Shape straddling LOGOBND found!            0            0
(  141)  GRPN001: Shape straddling LOGOBND found!            0            0
(  142)  GRPN001: Shape straddling LOGOBND found!            0            0
(  143)  GRPN001: Shape straddling LOGOBND found!            0            0
(  144)  GRPN001: Shape straddling LOGOBND found!            0            0
(  145)  GRPN001: Shape straddling LOGOBND found!            0            0
(  146)  GRPN001: Shape straddling LOGOBND found!            0            0
(  147)  GRPN203: CA to CA space (logo) >= 0.400             0            0
(  148)  GRPN502: M1 to M1 space (logo) >= 0.400             0            0
(  149)  GRPN553: V1 to V1 space (logo) >= 0.400             0            0
(  150)  GRPN553: V2 to V2 space (logo) >= 0.400             0            0
(  151)  GRPN553: V3 to V3 space (logo) >= 0.400             0            0
(  152)  GRPN553: V4 to V4 space (logo) >= 0.400             0            0
(  153)  GRPN553: V5 to V5 space (logo) >= 0.400             0            0
(  154)  GRPN602: M2 to M2 space (logo) >= 0.400             0            0
(  155)  GRPN602: M3 to M3 space (logo) >= 0.400             0            0
(  156)  GRPN602: M4 to M4 space (logo) >= 0.400             0            0
(  157)  GRPN602: M5 to M5 space (logo) >= 0.400             0            0
(  158)  GRPN602: MT to MT space (logo) >= 0.400             0            0
(  159)  GRPN907: DV over LOGOBND found!                     0            0
(  160)  GRPN907: LV over LOGOBND found!                     0            0
(  161)  GRPN907: TV over LOGOBND found!                     0            0
(  162)  # INFO: 3 Level Metal (M1+MT+AM) #                  0            0
(  163)  # INFO: 4 Level Metal (M1+M2+MT+AM) #               0            0
(  164)  # INFO: 5 Level Metal (M1+M2+M3+MT+AM) #            0            0
(  165)  # INFO: 6 Level Metal (M1+M2+M3+M4+MT+AM            0            0
(  166)  # INFO: 7 Level Metal (M1+M2+M3+M4+M5+MT            0            0
(  167)  # INFO: 4 Level Metal (M1+MT+E1+MA) #               0            0
(  168)  # INFO: 5 Level Metal (M1+M2+MT+E1+MA) #            0            0
(  169)  # INFO: 6 Level Metal (M1+M2+M3+MT+E1+MA            0            0
(  170)  # INFO: 7 Level Metal (M1+M2+M3+M4+MT+E1            0            0
(  171)  # INFO: 8 Level Metal (M1+M2+M3+M4+M5+MT            0            0
(  172)  # INFO: 3 Level Metal (M1+MT+ML) #                  0            0
(  173)  # INFO: 4 Level Metal (M1+M2+MT+ML) #               0            0
(  174)  # INFO: 5 Level Metal (M1+M2+M3+MT+ML) #            0            0
(  175)  # INFO: 6 Level Metal (M1+M2+M3+M4+MT+ML            0            0
(  176)  # INFO: 7 Level Metal (M1+M2+M3+M4+M5+MT            0            0
(  177)  # INFO: 7 Level Metal (M1+M2+M3+M4+M5+MT            0            0
(  178)  WARNING: MULTIPLE LAST METAL LEVELS FOUN            0            0
(  179)  # WARNING: LV and DV are present in same            0            0
(  180)  GRS1: Off-Grid path centerline found!_am            0            0
(  181)  GRS1: Off-Grid path centerline found!_as            0            0
(  182)  GRS1: Off-Grid path centerline found!_bb            0            0
(  183)  GRS1: Off-Grid path centerline found!_bf            0            0
(  184)  GRS1: Off-Grid path centerline found!_bh            0            0
(  185)  GRS1: Off-Grid path centerline found!_bn            0            0
(  186)  GRS1: Off-Grid path centerline found!_bp            0            0
(  187)  GRS1: Off-Grid path centerline found!_bp            0            0
(  188)  GRS1: Off-Grid path centerline found!_bt            0            0
(  189)  GRS1: Off-Grid path centerline found!_ca            0            0
(  190)  GRS1: Off-Grid path centerline found!_ca            0            0
(  191)  GRS1: Off-Grid path centerline found!_de            0            0
(  192)  GRS1: Off-Grid path centerline found!_df            0            0
(  193)  GRS1: Off-Grid path centerline found!_dg            0            0
(  194)  GRS1: Off-Grid path centerline found!_dv            0            0
(  195)  GRS1: Off-Grid path centerline found!_e1            0            0
(  196)  GRS1: Off-Grid path centerline found!_e2            0            0
(  197)  GRS1: Off-Grid path centerline found!_ft            0            0
(  198)  GRS1: Off-Grid path centerline found!_ft            0            0
(  199)  GRS1: Off-Grid path centerline found!_hr            0            0
(  200)  GRS1: Off-Grid path centerline found!_ht            0            0
(  201)  GRS1: Off-Grid path centerline found!_jc            0            0
(  202)  GRS1: Off-Grid path centerline found!_jd            0            0
(  203)  GRS1: Off-Grid path centerline found!_js            0            0
(  204)  GRS1: Off-Grid path centerline found!_k1            0            0
(  205)  GRS1: Off-Grid path centerline found!_lv            0            0
(  206)  GRS1: Off-Grid path centerline found!_m1            0            0
(  207)  GRS1: Off-Grid path centerline found!_m2            0            0
(  208)  GRS1: Off-Grid path centerline found!_m3            0            0
(  209)  GRS1: Off-Grid path centerline found!_m4            0            0
(  210)  GRS1: Off-Grid path centerline found!_m5            0            0
(  211)  GRS1: Off-Grid path centerline found!_ma            0            0
(  212)  GRS1: Off-Grid path centerline found!_ml            0            0
(  213)  GRS1: Off-Grid path centerline found!_mt            0            0
(  214)  GRS1: Off-Grid path centerline found!_mz            0            0
(  215)  GRS1: Off-Grid path centerline found!_nr            0            0
(  216)  GRS1: Off-Grid path centerline found!_ns            0            0
(  217)  GRS1: Off-Grid path centerline found!_nv            0            0
(  218)  GRS1: Off-Grid path centerline found!_nw            0            0
(  219)  GRS1: Off-Grid path centerline found!_op            0            0
(  220)  GRS1: Off-Grid path centerline found!_pv            0            0
(  221)  GRS1: Off-Grid path centerline found!_pc            0            0
(  222)  GRS1: Off-Grid path centerline found!_pc            0            0
(  223)  GRS1: Off-Grid path centerline found!_pc            0            0
(  224)  GRS1: Off-Grid path centerline found!_pd            0            0
(  225)  GRS1: Off-Grid path centerline found!_ph            0            0
(  226)  GRS1: Off-Grid path centerline found!_pi            0            0
(  227)  GRS1: Off-Grid path centerline found!_pr            0            0
(  228)  GRS1: Off-Grid path centerline found!_qt            0            0
(  229)  GRS1: Off-Grid path centerline found!_rn            0            0
(  230)  GRS1: Off-Grid path centerline found!_rp            0            0
(  231)  GRS1: Off-Grid path centerline found!_rr            0            0
(  232)  GRS1: Off-Grid path centerline found!_rx            0            0
(  233)  GRS1: Off-Grid path centerline found!_te            0            0
(  234)  GRS1: Off-Grid path centerline found!_tf            0            0
(  235)  GRS1: Off-Grid path centerline found!_tg            0            0
(  236)  GRS1: Off-Grid path centerline found!_ti            0            0
(  237)  GRS1: Off-Grid path centerline found!_tv            0            0
(  238)  GRS1: Off-Grid path centerline found!_v1            0            0
(  239)  GRS1: Off-Grid path centerline found!_v1            0            0
(  240)  GRS1: Off-Grid path centerline found!_v2            0            0
(  241)  GRS1: Off-Grid path centerline found!_v2            0            0
(  242)  GRS1: Off-Grid path centerline found!_v3            0            0
(  243)  GRS1: Off-Grid path centerline found!_v3            0            0
(  244)  GRS1: Off-Grid path centerline found!_v4            0            0
(  245)  GRS1: Off-Grid path centerline found!_v4            0            0
(  246)  GRS1: Off-Grid path centerline found!_v5            0            0
(  247)  GRS1: Off-Grid path centerline found!_v5            0            0
(  248)  GRS1: Off-Grid path centerline found!_am            0            0
(  249)  GRS1: Off-Grid path centerline found!_bf            0            0
(  250)  GRS1: Off-Grid path centerline found!_bf            0            0
(  251)  GRS1: Off-Grid path centerline found!_bi            0            0
(  252)  GRS1: Off-Grid path centerline found!_bo            0            0
(  253)  GRS1: Off-Grid path centerline found!_bp            0            0
(  254)  GRS1: Off-Grid path centerline found!_bt            0            0
(  255)  GRS1: Off-Grid path centerline found!_c4            0            0
(  256)  GRS1: Off-Grid path centerline found!_ca            0            0
(  257)  GRS1: Off-Grid path centerline found!_ch            0            0
(  258)  GRS1: Off-Grid path centerline found!_cr            0            0
(  259)  GRS1: Off-Grid path centerline found!_cu            0            0
(  260)  GRS1: Off-Grid path centerline found!_dc            0            0
(  261)  GRS1: Off-Grid path centerline found!_dg            0            0
(  262)  GRS1: Off-Grid path centerline found!_di            0            0
(  263)  GRS1: Off-Grid path centerline found!_di            0            0
(  264)  GRS1: Off-Grid path centerline found!_dn            0            0
(  265)  GRS1: Off-Grid path centerline found!_ds            0            0
(  266)  GRS1: Off-Grid path centerline found!_e1            0            0
(  267)  GRS1: Off-Grid path centerline found!_e1            0            0
(  268)  GRS1: Off-Grid path centerline found!_es            0            0
(  269)  GRS1: Off-Grid path centerline found!_es            0            0
(  270)  GRS1: Off-Grid path centerline found!_es            0            0
(  271)  GRS1: Off-Grid path centerline found!_fi            0            0
(  272)  GRS1: Off-Grid path centerline found!_fl            0            0
(  273)  GRS1: Off-Grid path centerline found!_gr            0            0
(  274)  GRS1: Off-Grid path centerline found!_gu            0            0
(  275)  GRS1: Off-Grid path centerline found!_gu            0            0
(  276)  GRS1: Off-Grid path centerline found!_hr            0            0
(  277)  GRS1: Off-Grid path centerline found!_in            0            0
(  278)  GRS1: Off-Grid path centerline found!_lo            0            0
(  279)  GRS1: Off-Grid path centerline found!_lo            0            0
(  280)  GRS1: Off-Grid path centerline found!_lv            0            0
(  281)  GRS1: Off-Grid path centerline found!_m1            0            0
(  282)  GRS1: Off-Grid path centerline found!_m1            0            0
(  283)  GRS1: Off-Grid path centerline found!_m2            0            0
(  284)  GRS1: Off-Grid path centerline found!_m3            0            0
(  285)  GRS1: Off-Grid path centerline found!_m3            0            0
(  286)  GRS1: Off-Grid path centerline found!_m4            0            0
(  287)  GRS1: Off-Grid path centerline found!_m4            0            0
(  288)  GRS1: Off-Grid path centerline found!_m5            0            0
(  289)  GRS1: Off-Grid path centerline found!_m5            0            0
(  290)  GRS1: Off-Grid path centerline found!_ma            0            0
(  291)  GRS1: Off-Grid path centerline found!_mi            0            0
(  292)  GRS1: Off-Grid path centerline found!_mi            0            0
(  293)  GRS1: Off-Grid path centerline found!_ml            0            0
(  294)  GRS1: Off-Grid path centerline found!_mo            0            0
(  295)  GRS1: Off-Grid path centerline found!_mp            0            0
(  296)  GRS1: Off-Grid path centerline found!_mt            0            0
(  297)  GRS1: Off-Grid path centerline found!_mt            0            0
(  298)  GRS1: Off-Grid path centerline found!_mz            0            0
(  299)  GRS1: Off-Grid path centerline found!_ni            0            0
(  300)  GRS1: Off-Grid path centerline found!_ni            0            0
(  301)  GRS1: Off-Grid path centerline found!_ni            0            0
(  302)  GRS1: Off-Grid path centerline found!_no            0            0
(  303)  GRS1: Off-Grid path centerline found!_no            0            0
(  304)  GRS1: Off-Grid path centerline found!_no            0            0
(  305)  GRS1: Off-Grid path centerline found!_nw            0            0
(  306)  GRS1: Off-Grid path centerline found!_ou            0            0
(  307)  GRS1: Off-Grid path centerline found!_pa            0            0
(  308)  GRS1: Off-Grid path centerline found!_pc            0            0
(  309)  GRS1: Off-Grid path centerline found!_pl            0            0
(  310)  GRS1: Off-Grid path centerline found!_re            0            0
(  311)  GRS1: Off-Grid path centerline found!_rf            0            0
(  312)  GRS1: Off-Grid path centerline found!_rx            0            0
(  313)  GRS1: Off-Grid path centerline found!_rx            0            0
(  314)  GRS1: Off-Grid path centerline found!_sb            0            0
(  315)  GRS1: Off-Grid path centerline found!_sc            0            0
(  316)  GRS1: Off-Grid path centerline found!_sc            0            0
(  317)  GRS1: Off-Grid path centerline found!_se            0            0
(  318)  GRS1: Off-Grid path centerline found!_tl            0            0
(  319)  GRS1: Off-Grid path centerline found!_tl            0            0
(  320)  GRS1: Off-Grid path centerline found!_tl            0            0
(  321)  GRS1: Off-Grid path centerline found!_tr            0            0
(  322)  GRS1: Off-Grid path centerline found!_vn            0            0
(  323)  GRS1: Off-Grid path centerline found!_vn            0            0
(  324)  GRS1: Off-Grid path centerline found!_vn            0            0
(  325)  GRS1: Off-Grid path centerline found!_vn            0            0
(  326)  GRS1: Off-Grid path centerline found!_vn            0            0
(  327)  GRS1: Off-Grid path centerline found!_vn            0            0
(  328)  GRS1: Off-Grid path centerline found!_vn            0            0
(  329)  GRS1: Off-Grid path centerline found!_vn            0            0
(  330)  GRS1: Off-Grid path centerline found!_vt            0            0
(  331)  GRS1: Off-Grid path centerline found!_we            0            0
(  332)  GRS1: Off-Grid path centerline found!_wv            0            0
(  333)  GRS1: Off-Grid path centerline found!_ze            0            0
(  334)  GRS1: Off-Grid path centerline found!_ca            0            0
(  335)  GRS1: Off-Grid path centerline found!_ca            0            0
(  336)  GRS1: Off-Grid path centerline found!_e2            0            0
(  337)  GRS1: Off-Grid path centerline found!_ft            0            0
(  338)  GRS1: Off-Grid path centerline found!_ns            0            0
(  339)  GRS1: Off-Grid path centerline found!_nw            0            0
(  340)  GRS1: Off-Grid path centerline found!_pc            0            0
(  341)  GRS1: Off-Grid path centerline found!_v1            0            0
(  342)  GRS1: Off-Grid path centerline found!_v1            0            0
(  343)  GRS1: Off-Grid path centerline found!_v2            0            0
(  344)  GRS1: Off-Grid path centerline found!_v2            0            0
(  345)  GRS1: Off-Grid path centerline found!_v3            0            0
(  346)  GRS1: Off-Grid path centerline found!_v3            0            0
(  347)  GRS1: Off-Grid path centerline found!_v4            0            0
(  348)  GRS1: Off-Grid path centerline found!_v4            0            0
(  349)  GRS1: Off-Grid path centerline found!_v5            0            0
(  350)  GRS1: Off-Grid path centerline found!_v5            0            0
(  351)  GRS1: Off-Grid path centerline found!_tv            0            0
(  352)  GRS1: Off-Grid path centerline found!_am            0            0
(  353)  GRS1: Off-Grid path centerline found!_dv            0            0
(  354)  GRS1: Off-Grid path centerline found!_e1            0            0
(  355)  GRS1: Off-Grid path centerline found!_lv            0            0
(  356)  GRS1: Off-Grid path centerline found!_m1            0            0
(  357)  GRS1: Off-Grid path centerline found!_m2            0            0
(  358)  GRS1: Off-Grid path centerline found!_m3            0            0
(  359)  GRS1: Off-Grid path centerline found!_m4            0            0
(  360)  GRS1: Off-Grid path centerline found!_m5            0            0
(  361)  GRS1: Off-Grid path centerline found!_ma            0            0
(  362)  GRS1: Off-Grid path centerline found!_ml            0            0
(  363)  GRS1: Off-Grid path centerline found!_mt            0            0
(  364)  GRS1: Off-Grid path centerline found!_nw            0            0
(  365)  GRS1: Off-Grid path centerline found!_rx            0            0
(  366)  GRS1: Off-Grid path centerline found!_pc            0            0
(  367)  GRS1: Off-Grid path centerline found!_am            0            0
(  368)  GRS1: Off-Grid path centerline found!_e1            0            0
(  369)  GRS1: Off-Grid path centerline found!_m1            0            0
(  370)  GRS1: Off-Grid path centerline found!_m2            0            0
(  371)  GRS1: Off-Grid path centerline found!_m3            0            0
(  372)  GRS1: Off-Grid path centerline found!_m4            0            0
(  373)  GRS1: Off-Grid path centerline found!_m5            0            0
(  374)  GRS1: Off-Grid path centerline found!_ma            0            0
(  375)  GRS1: Off-Grid path centerline found!_ml            0            0
(  376)  GRS1: Off-Grid path centerline found!_mt            0            0
(  377)  GRS1: Off-Grid path centerline found!_pc            0            0
(  378)  GRS1: Off-Grid path centerline found!_rx            0            0
(  379)  GRS1: Off-Grid path centerline found!_m1            0            0
(  380)  GRS1: Off-Grid path centerline found!_m2            0            0
(  381)  GRS1: Off-Grid path centerline found!_m3            0            0
(  382)  GRS1: Off-Grid path centerline found!_m4            0            0
(  383)  GRS1: Off-Grid path centerline found!_m5            0            0
(  384)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  385)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  386)  GRS2: Shape with acute angles found! (AM            0            0
(  387)  GRS2: Shape with acute angles found! (AM            0            0
(  388)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  389)  GRS10: Text data on mask build layer fou            0            0
(  390)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  391)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  392)  GRS2: Shape with acute angles found! (AS            0            0
(  393)  GRS2: Shape with acute angles found! (AS            0            0
(  394)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  395)  GRS10: Text data on mask build layer fou            0            0
(  396)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  397)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  398)  GRS2: Shape with acute angles found! (BB            0            0
(  399)  GRS2: Shape with acute angles found! (BB            0            0
(  400)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  401)  GRS10: Text data on mask build layer fou            0            0
(  402)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  403)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  404)  GRS2: Shape with acute angles found! (BF            0            0
(  405)  GRS2: Shape with acute angles found! (BF            0            0
(  406)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  407)  GRS10: Text data on mask build layer fou            0            0
(  408)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  409)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  410)  GRS2: Shape with acute angles found! (BO            0            0
(  411)  GRS2: Shape with acute angles found! (BO            0            0
(  412)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  413)  GRS10: Text data on mask build layer fou            0            0
(  414)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  415)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  416)  GRS2: Shape with acute angles found! (BP            0            0
(  417)  GRS2: Shape with acute angles found! (BP            0            0
(  418)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  419)  GRS10: Text data on mask build layer fou            0            0
(  420)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  421)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  422)  GRS2: Shape with acute angles found! (BP            0            0
(  423)  GRS2: Shape with acute angles found! (BP            0            0
(  424)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  425)  GRS10: Text data on mask build layer fou            0            0
(  426)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  427)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  428)  GRS2: Shape with acute angles found! (BP            0            0
(  429)  GRS2: Shape with acute angles found! (BP            0            0
(  430)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  431)  GRS10: Text data on mask build layer fou            0            0
(  432)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  433)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  434)  GRS2: Shape with acute angles found! (CA            0            0
(  435)  GRS2: Shape with acute angles found! (CA            0            0
(  436)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  437)  GRS10: Text data on mask build layer fou            0            0
(  438)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  439)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  440)  GRS2: Shape with acute angles found! (CA            0            0
(  441)  GRS2: Shape with acute angles found! (CA            0            0
(  442)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  443)  GRS10: Text data on mask build layer fou            0            0
(  444)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  445)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  446)  GRS2: Shape with acute angles found! (CA            0            0
(  447)  GRS2: Shape with acute angles found! (CA            0            0
(  448)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  449)  GRS10: Text data on mask build layer fou            0            0
(  450)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  451)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  452)  GRS2: Shape with acute angles found! (CH            0            0
(  453)  GRS2: Shape with acute angles found! (CH            0            0
(  454)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  455)  GRS10: Text data on mask build layer fou            0            0
(  456)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  457)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  458)  GRS2: Shape with acute angles found! (TG            0            0
(  459)  GRS2: Shape with acute angles found! (TG            0            0
(  460)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  461)  GRS10: Text data on mask build layer fou            0            0
(  462)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  463)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  464)  GRS2: Shape with acute angles found! (DG            0            0
(  465)  GRS2: Shape with acute angles found! (DG            0            0
(  466)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  467)  GRS10: Text data on mask build layer fou            0            0
(  468)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  469)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  470)  GRS2: Shape with acute angles found! (DV            0            0
(  471)  GRS2: Shape with acute angles found! (DV            0            0
(  472)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  473)  GRS10: Text data on mask build layer fou            0            0
(  474)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  475)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  476)  GRS2: Shape with acute angles found! (E1            0            0
(  477)  GRS2: Shape with acute angles found! (E1            0            0
(  478)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  479)  GRS10: Text data on mask build layer fou            0            0
(  480)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  481)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  482)  GRS2: Shape with acute angles found! (E2            0            0
(  483)  GRS2: Shape with acute angles found! (E2            0            0
(  484)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  485)  GRS10: Text data on mask build layer fou            0            0
(  486)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  487)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  488)  GRS2: Shape with acute angles found! (FT            0            0
(  489)  GRS2: Shape with acute angles found! (FT            0            0
(  490)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  491)  GRS10: Text data on mask build layer fou            0            0
(  492)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  493)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  494)  GRS2: Shape with acute angles found! (FT            0            0
(  495)  GRS2: Shape with acute angles found! (FT            0            0
(  496)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  497)  GRS10: Text data on mask build layer fou            0            0
(  498)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  499)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  500)  GRS2: Shape with acute angles found! (HT            0            0
(  501)  GRS2: Shape with acute angles found! (HT            0            0
(  502)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  503)  GRS10: Text data on mask build layer fou            0            0
(  504)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  505)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  506)  GRS2: Shape with acute angles found! (IN            0            0
(  507)  GRS2: Shape with acute angles found! (IN            0            0
(  508)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  509)  GRS10: Text data on mask build layer fou            0            0
(  510)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  511)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  512)  GRS2: Shape with acute angles found! (K1            0            0
(  513)  GRS2: Shape with acute angles found! (K1            0            0
(  514)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  515)  GRS10: Text data on mask build layer fou            0            0
(  516)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  517)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  518)  GRS2: Shape with acute angles found! (LO            0            0
(  519)  GRS2: Shape with acute angles found! (LO            0            0
(  520)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  521)  GRS10: Text data on mask build layer fou            0            0
(  522)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  523)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  524)  GRS2: Shape with acute angles found! (LV            0            0
(  525)  GRS2: Shape with acute angles found! (LV            0            0
(  526)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  527)  GRS10: Text data on mask build layer fou            0            0
(  528)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  529)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  530)  GRS2: Shape with acute angles found! (LV            0            0
(  531)  GRS2: Shape with acute angles found! (LV            0            0
(  532)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  533)  GRS10: Text data on mask build layer fou            0            0
(  534)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  535)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  536)  GRS2: Shape with acute angles found! (M1            0            0
(  537)  GRS2: Shape with acute angles found! (M1            0            0
(  538)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  539)  GRS10: Text data on mask build layer fou            0            0
(  540)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  541)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  542)  GRS2: Shape with acute angles found! (M2            0            0
(  543)  GRS2: Shape with acute angles found! (M2            0            0
(  544)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  545)  GRS10: Text data on mask build layer fou            0            0
(  546)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  547)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  548)  GRS2: Shape with acute angles found! (M3            0            0
(  549)  GRS2: Shape with acute angles found! (M3            0            0
(  550)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  551)  GRS10: Text data on mask build layer fou            0            0
(  552)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  553)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  554)  GRS2: Shape with acute angles found! (M4            0            0
(  555)  GRS2: Shape with acute angles found! (M4            0            0
(  556)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  557)  GRS10: Text data on mask build layer fou            0            0
(  558)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  559)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  560)  GRS2: Shape with acute angles found! (M5            0            0
(  561)  GRS2: Shape with acute angles found! (M5            0            0
(  562)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  563)  GRS10: Text data on mask build layer fou            0            0
(  564)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  565)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  566)  GRS2: Shape with acute angles found! (MA            0            0
(  567)  GRS2: Shape with acute angles found! (MA            0            0
(  568)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  569)  GRS10: Text data on mask build layer fou            0            0
(  570)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  571)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  572)  GRS2: Shape with acute angles found! (ML            0            0
(  573)  GRS2: Shape with acute angles found! (ML            0            0
(  574)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  575)  GRS10: Text data on mask build layer fou            0            0
(  576)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  577)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  578)  GRS2: Shape with acute angles found! (MO            0            0
(  579)  GRS2: Shape with acute angles found! (MO            0            0
(  580)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  581)  GRS10: Text data on mask build layer fou            0            0
(  582)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  583)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  584)  GRS2: Shape with acute angles found! (MT            0            0
(  585)  GRS2: Shape with acute angles found! (MT            0            0
(  586)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  587)  GRS10: Text data on mask build layer fou            0            0
(  588)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  589)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  590)  GRS2: Shape with acute angles found! (NS            0            0
(  591)  GRS2: Shape with acute angles found! (NS            0            0
(  592)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  593)  GRS10: Text data on mask build layer fou            0            0
(  594)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  595)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  596)  GRS2: Shape with acute angles found! (NW            0            0
(  597)  GRS2: Shape with acute angles found! (NW            0            0
(  598)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  599)  GRS10: Text data on mask build layer fou            0            0
(  600)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  601)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  602)  GRS2: Shape with acute angles found! (NW            0            0
(  603)  GRS2: Shape with acute angles found! (NW            0            0
(  604)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  605)  GRS10: Text data on mask build layer fou            0            0
(  606)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  607)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  608)  GRS2: Shape with acute angles found! (OP            0            0
(  609)  GRS2: Shape with acute angles found! (OP            0            0
(  610)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  611)  GRS10: Text data on mask build layer fou            0            0
(  612)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  613)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  614)  GRS2: Shape with acute angles found! (PI            0            0
(  615)  GRS2: Shape with acute angles found! (PI            0            0
(  616)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  617)  GRS10: Text data on mask build layer fou            0            0
(  618)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  619)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  620)  GRS2: Shape with acute angles found! (PC            0            0
(  621)  GRS2: Shape with acute angles found! (PC            0            0
(  622)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  623)  GRS10: Text data on mask build layer fou            0            0
(  624)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  625)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  626)  GRS2: Shape with acute angles found! (PC            0            0
(  627)  GRS2: Shape with acute angles found! (PC            0            0
(  628)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  629)  GRS10: Text data on mask build layer fou            0            0
(  630)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  631)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  632)  GRS2: Shape with acute angles found! (PC            0            0
(  633)  GRS2: Shape with acute angles found! (PC            0            0
(  634)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  635)  GRS10: Text data on mask build layer fou            0            0
(  636)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  637)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  638)  GRS2: Shape with acute angles found! (PD            0            0
(  639)  GRS2: Shape with acute angles found! (PD            0            0
(  640)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  641)  GRS10: Text data on mask build layer fou            0            0
(  642)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  643)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  644)  GRS2: Shape with acute angles found! (QT            0            0
(  645)  GRS2: Shape with acute angles found! (QT            0            0
(  646)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  647)  GRS10: Text data on mask build layer fou            0            0
(  648)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  649)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  650)  GRS2: Shape with acute angles found! (RN            0            0
(  651)  GRS2: Shape with acute angles found! (RN            0            0
(  652)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  653)  GRS10: Text data on mask build layer fou            0            0
(  654)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  655)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  656)  GRS2: Shape with acute angles found! (RP            0            0
(  657)  GRS2: Shape with acute angles found! (RP            0            0
(  658)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  659)  GRS10: Text data on mask build layer fou            0            0
(  660)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  661)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  662)  GRS2: Shape with acute angles found! (RR            0            0
(  663)  GRS2: Shape with acute angles found! (RR            0            0
(  664)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  665)  GRS10: Text data on mask build layer fou            0            0
(  666)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  667)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  668)  GRS2: Shape with acute angles found! (RX            0            0
(  669)  GRS2: Shape with acute angles found! (RX            0            0
(  670)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  671)  GRS10: Text data on mask build layer fou            0            0
(  672)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  673)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  674)  GRS2: Shape with acute angles found! (RX            0            0
(  675)  GRS2: Shape with acute angles found! (RX            0            0
(  676)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  677)  GRS10: Text data on mask build layer fou            0            0
(  678)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  679)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  680)  GRS2: Shape with acute angles found! (TL            0            0
(  681)  GRS2: Shape with acute angles found! (TL            0            0
(  682)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  683)  GRS10: Text data on mask build layer fou            0            0
(  684)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  685)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  686)  GRS2: Shape with acute angles found! (TL            0            0
(  687)  GRS2: Shape with acute angles found! (TL            0            0
(  688)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  689)  GRS10: Text data on mask build layer fou            0            0
(  690)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  691)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  692)  GRS2: Shape with acute angles found! (TL            0            0
(  693)  GRS2: Shape with acute angles found! (TL            0            0
(  694)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  695)  GRS10: Text data on mask build layer fou            0            0
(  696)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  697)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  698)  GRS2: Shape with acute angles found! (V1            0            0
(  699)  GRS2: Shape with acute angles found! (V1            0            0
(  700)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  701)  GRS10: Text data on mask build layer fou            0            0
(  702)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  703)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  704)  GRS2: Shape with acute angles found! (V1            0            0
(  705)  GRS2: Shape with acute angles found! (V1            0            0
(  706)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  707)  GRS10: Text data on mask build layer fou            0            0
(  708)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  709)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  710)  GRS2: Shape with acute angles found! (V2            0            0
(  711)  GRS2: Shape with acute angles found! (V2            0            0
(  712)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  713)  GRS10: Text data on mask build layer fou            0            0
(  714)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  715)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  716)  GRS2: Shape with acute angles found! (V2            0            0
(  717)  GRS2: Shape with acute angles found! (V2            0            0
(  718)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  719)  GRS10: Text data on mask build layer fou            0            0
(  720)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  721)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  722)  GRS2: Shape with acute angles found! (V3            0            0
(  723)  GRS2: Shape with acute angles found! (V3            0            0
(  724)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  725)  GRS10: Text data on mask build layer fou            0            0
(  726)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  727)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  728)  GRS2: Shape with acute angles found! (V3            0            0
(  729)  GRS2: Shape with acute angles found! (V3            0            0
(  730)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  731)  GRS10: Text data on mask build layer fou            0            0
(  732)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  733)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  734)  GRS2: Shape with acute angles found! (V4            0            0
(  735)  GRS2: Shape with acute angles found! (V4            0            0
(  736)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  737)  GRS10: Text data on mask build layer fou            0            0
(  738)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  739)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  740)  GRS2: Shape with acute angles found! (V4            0            0
(  741)  GRS2: Shape with acute angles found! (V4            0            0
(  742)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  743)  GRS10: Text data on mask build layer fou            0            0
(  744)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  745)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  746)  GRS2: Shape with acute angles found! (V5            0            0
(  747)  GRS2: Shape with acute angles found! (V5            0            0
(  748)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  749)  GRS10: Text data on mask build layer fou            0            0
(  750)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  751)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  752)  GRS2: Shape with acute angles found! (V5            0            0
(  753)  GRS2: Shape with acute angles found! (V5            0            0
(  754)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  755)  GRS10: Text data on mask build layer fou            0            0
(  756)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  757)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  758)  GRS2: Shape with acute angles found! (ZE            0            0
(  759)  GRS2: Shape with acute angles found! (ZE            0            0
(  760)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  761)  GRS10: Text data on mask build layer fou            0            0
(  762)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  763)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  764)  GRS2: Shape with acute angles found! (JC            0            0
(  765)  GRS2: Shape with acute angles found! (JC            0            0
(  766)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  767)  GRS10: Text data on mask build layer fou            0            0
(  768)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  769)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  770)  GRS2: Shape with acute angles found! (JD            0            0
(  771)  GRS2: Shape with acute angles found! (JD            0            0
(  772)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  773)  GRS10: Text data on mask build layer fou            0            0
(  774)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  775)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  776)  GRS2: Shape with acute angles found! (MZ            0            0
(  777)  GRS2: Shape with acute angles found! (MZ            0            0
(  778)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  779)  GRS10: Text data on mask build layer fou            0            0
(  780)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  781)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  782)  GRS2: Shape with acute angles found! (TV            0            0
(  783)  GRS2: Shape with acute angles found! (TV            0            0
(  784)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  785)  GRS10: Text data on mask build layer fou            0            0
(  786)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  787)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  788)  GRS2: Shape with acute angles found! (DI            0            0
(  789)  GRS2: Shape with acute angles found! (DI            0            0
(  790)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  791)  GRS10: Text data on mask build layer fou            0            0
(  792)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  793)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  794)  GRS2: Shape with acute angles found! (ES            0            0
(  795)  GRS2: Shape with acute angles found! (ES            0            0
(  796)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  797)  GRS10: Text data on mask build layer fou            0            0
(  798)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  799)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  800)  GRS2: Shape with acute angles found! (ES            0            0
(  801)  GRS2: Shape with acute angles found! (ES            0            0
(  802)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  803)  GRS10: Text data on mask build layer fou            0            0
(  804)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  805)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  806)  GRS2: Shape with acute angles found! (WV            0            0
(  807)  GRS2: Shape with acute angles found! (WV            0            0
(  808)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  809)  GRS10: Text data on mask build layer fou            0            0
(  810)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  811)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  812)  GRS2: Shape with acute angles found! (FI            0            0
(  813)  GRS2: Shape with acute angles found! (FI            0            0
(  814)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  815)  GRS10: Text data on mask build layer fou            0            0
(  816)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  817)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  818)  GRS2: Shape with acute angles found! (SC            0            0
(  819)  GRS2: Shape with acute angles found! (SC            0            0
(  820)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  821)  GRS10: Text data on mask build layer fou            0            0
(  822)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  823)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  824)  GRS2: Shape with acute angles found! (SC            0            0
(  825)  GRS2: Shape with acute angles found! (SC            0            0
(  826)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  827)  GRS10: Text data on mask build layer fou            0            0
(  828)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  829)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  830)  GRS2: Shape with acute angles found! (BI            0            0
(  831)  GRS2: Shape with acute angles found! (BI            0            0
(  832)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  833)  GRS10: Text data on mask build layer fou            0            0
(  834)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  835)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  836)  GRS2: Shape with acute angles found! (DS            0            0
(  837)  GRS2: Shape with acute angles found! (DS            0            0
(  838)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  839)  GRS10: Text data on mask build layer fou            0            0
(  840)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  841)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  842)  GRS2: Shape with acute angles found! (RF            0            0
(  843)  GRS2: Shape with acute angles found! (RF            0            0
(  844)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  845)  GRS10: Text data on mask build layer fou            0            0
(  846)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  847)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  848)  GRS2: Shape with acute angles found! (VT            0            0
(  849)  GRS2: Shape with acute angles found! (VT            0            0
(  850)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  851)  GRS10: Text data on mask build layer fou            0            0
(  852)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  853)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  854)  GRS2: Shape with acute angles found! (WE            0            0
(  855)  GRS2: Shape with acute angles found! (WE            0            0
(  856)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  857)  GRS10: Text data on mask build layer fou            0            0
(  858)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  859)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  860)  GRS2: Shape with acute angles found! (DG            0            0
(  861)  GRS2: Shape with acute angles found! (DG            0            0
(  862)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  863)  GRS10: Text data on mask build layer fou            0            0
(  864)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  865)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  866)  GRS2: Shape with acute angles found! (DI            0            0
(  867)  GRS2: Shape with acute angles found! (DI            0            0
(  868)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  869)  GRS10: Text data on mask build layer fou            0            0
(  870)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  871)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  872)  GRS2: Shape with acute angles found! (GR            0            0
(  873)  GRS2: Shape with acute angles found! (GR            0            0
(  874)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  875)  GRS10: Text data on mask build layer fou            0            0
(  876)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  877)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  878)  GRS2: Shape with acute angles found! (FL            0            0
(  879)  GRS2: Shape with acute angles found! (FL            0            0
(  880)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  881)  GRS10: Text data on mask build layer fou            0            0
(  882)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  883)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  884)  GRS2: Shape with acute angles found! (SB            0            0
(  885)  GRS2: Shape with acute angles found! (SB            0            0
(  886)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  887)  GRS10: Text data on mask build layer fou            0            0
(  888)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  889)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  890)  GRS2: Shape with acute angles found! (VN            0            0
(  891)  GRS2: Shape with acute angles found! (VN            0            0
(  892)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  893)  GRS10: Text data on mask build layer fou            0            0
(  894)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  895)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  896)  GRS2: Shape with acute angles found! (VN            0            0
(  897)  GRS2: Shape with acute angles found! (VN            0            0
(  898)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  899)  GRS10: Text data on mask build layer fou            0            0
(  900)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  901)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  902)  GRS2: Shape with acute angles found! (VN            0            0
(  903)  GRS2: Shape with acute angles found! (VN            0            0
(  904)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  905)  GRS10: Text data on mask build layer fou            0            0
(  906)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  907)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  908)  GRS2: Shape with acute angles found! (VN            0            0
(  909)  GRS2: Shape with acute angles found! (VN            0            0
(  910)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  911)  GRS10: Text data on mask build layer fou            0            0
(  912)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  913)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  914)  GRS2: Shape with acute angles found! (VN            0            0
(  915)  GRS2: Shape with acute angles found! (VN            0            0
(  916)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  917)  GRS10: Text data on mask build layer fou            0            0
(  918)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  919)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  920)  GRS2: Shape with acute angles found! (VN            0            0
(  921)  GRS2: Shape with acute angles found! (VN            0            0
(  922)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  923)  GRS10: Text data on mask build layer fou            0            0
(  924)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  925)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  926)  GRS2: Shape with acute angles found! (MI            0            0
(  927)  GRS2: Shape with acute angles found! (MI            0            0
(  928)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  929)  GRS10: Text data on mask build layer fou            0            0
(  930)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  931)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  932)  GRS2: Shape with acute angles found! (MI            0            0
(  933)  GRS2: Shape with acute angles found! (MI            0            0
(  934)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  935)  GRS10: Text data on mask build layer fou            0            0
(  936)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  937)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  938)  GRS2: Shape with acute angles found! (RE            0            0
(  939)  GRS2: Shape with acute angles found! (RE            0            0
(  940)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  941)  GRS10: Text data on mask build layer fou            0            0
(  942)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  943)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  944)  GRS2: Shape with acute angles found! (E1            0            0
(  945)  GRS2: Shape with acute angles found! (E1            0            0
(  946)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  947)  GRS10: Text data on mask build layer fou            0            0
(  948)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  949)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  950)  GRS2: Shape with acute angles found! (MT            0            0
(  951)  GRS2: Shape with acute angles found! (MT            0            0
(  952)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  953)  GRS10: Text data on mask build layer fou            0            0
(  954)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  955)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  956)  GRS2: Shape with acute angles found! (M5            0            0
(  957)  GRS2: Shape with acute angles found! (M5            0            0
(  958)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  959)  GRS10: Text data on mask build layer fou            0            0
(  960)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  961)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  962)  GRS2: Shape with acute angles found! (M4            0            0
(  963)  GRS2: Shape with acute angles found! (M4            0            0
(  964)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  965)  GRS10: Text data on mask build layer fou            0            0
(  966)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  967)  offGridShapeErrors: GRS1: Off-Grid verte            0            0
(  968)  GRS2: Shape with acute angles found! (M3            0            0
(  969)  GRS2: Shape with acute angles found! (M3            0            0
(  970)  GRS6: Shape with Non-Orthogonal or Non-4            0            0
(  971)  GRS10: Text data on mask build layer fou            0            0
(  972)  offGridShapeErrors: GRCE001: CHIPEDGE no            0            0
(  973)  offGridShapeErrors: GRCE001b: Union(CHIP            0            0
(  974)  GRPHHOLE7: (PHHOLE1 over NW) enclosed ar            0            0
(  975)  GRPHHOLE8: ((PC over RX) over NW) touchi            0            0
(  976)  GRPHHOLE8: ((PC over RX) over NW) to PHH            0            0
(  977)  GRRL01: (JS touching DATA_EXTENT) not al            0            0
(  978)  GRRL03: (M1EXCLUD touching DATA_EXTENT)             0            0
(  979)  GRLEG_990a: RX(chipring) width >= 1.08 u            0            0
(  980)  GRLEG_990a: RX(chipring) width >= 1.08 u            0            0
(  981)  GRLEG_990b: BP(chipring) width >= 1.52 u            0            0
(  982)  GRLEG_990b: BP(chipring) width >= 1.52 u            0            0
(  983)  GRLEG_990c: BP(chipring) touching BB fou            0            0
(  984)  GRLEG_990f: M1(chipring) width >= 1.08 u            0            0
(  985)  GRLEG_990f: M1(chipring) width >= 1.08 u            0            0
(  986)  GRLEG_990f: M2(chipring) width >= 1.08 u            0            0
(  987)  GRLEG_990f: M2(chipring) width >= 1.08 u            0            0
(  988)  GRLEG_990f: M3(chipring) width >= 1.08 u            0            0
(  989)  GRLEG_990f: M3(chipring) width >= 1.08 u            0            0
(  990)  GRLEG_990f: M4(chipring) width >= 1.08 u            0            0
(  991)  GRLEG_990f: M4(chipring) width >= 1.08 u            0            0
(  992)  GRLEG_990f: M5(chipring) width >= 1.08 u            0            0
(  993)  GRLEG_990f: M5(chipring) width >= 1.08 u            0            0
(  994)  GRLEG_990g: MT(chipring) width >= 3.24 u            0            0
(  995)  GRLEG_990g: MT(chipring) width >= 3.24 u            0            0
(  996)  GRLEG_990h: E2(chipring) width >= 2.00 u            0            0
(  997)  GRLEG_990h: E2(chipring) width >= 2.00 u            0            0
(  998)  GRLEG_990i: E1(chipring) width >= 3.24 u            0            0
(  999)  GRLEG_990i: E1(chipring) width >= 3.24 u            0            0
( 1000)  GRLEG_990k: AM(chipring) width >= 2.00 u            0            0
( 1001)  GRLEG_990k: AM(chipring) width >= 2.00 u            0            0
( 1002)  GRLEG_990k: MA(chipring) width >= 2.00 u            0            0
( 1003)  GRLEG_990k: MA(chipring) width >= 2.00 u            0            0
( 1004)  GRLEG_990k: ML(chipring) width >= 2.00 u            0            0
( 1005)  GRLEG_990k: ML(chipring) width >= 2.00 u            0            0
( 1006)  GRLEG_990k: MZ(chipring) width >= 2.00 u            0            0
( 1007)  GRLEG_990k: MZ(chipring) width >= 2.00 u            0            0
( 1008)  GRLEG_990d: CABAR(chipring) width == 0.2            0            0
( 1009)  GRLEG_990d: CABAR(chipring) width == 0.2            0            0
( 1010)  GRLEG_990d: CABAR(chipring) width == 0.2            0            0
( 1011)  GRLEG_990d: CABAR(chipring) width == 0.2            0            0
( 1012)  GRLEG_990e: V1B_RING width == 0.28 um.(4            0            0
( 1013)  GRLEG_990e: V1B_RING width == 0.28 um.(9            0            0
( 1014)  GRLEG_990e: V1B_RING width == 0.28 um.(4            0            0
( 1015)  GRLEG_990e: V1B_RING width == 0.28 um.(9            0            0
( 1016)  GRLEG_990e: V2B_RING width == 0.28 um.(4            0            0
( 1017)  GRLEG_990e: V2B_RING width == 0.28 um.(9            0            0
( 1018)  GRLEG_990e: V2B_RING width == 0.28 um.(4            0            0
( 1019)  GRLEG_990e: V2B_RING width == 0.28 um.(9            0            0
( 1020)  GRLEG_990e: V3B_RING width == 0.28 um.(4            0            0
( 1021)  GRLEG_990e: V3B_RING width == 0.28 um.(9            0            0
( 1022)  GRLEG_990e: V3B_RING width == 0.28 um.(4            0            0
( 1023)  GRLEG_990e: V3B_RING width == 0.28 um.(9            0            0
( 1024)  GRLEG_990e: V4B_RING width == 0.28 um.(4            0            0
( 1025)  GRLEG_990e: V4B_RING width == 0.28 um.(9            0            0
( 1026)  GRLEG_990e: V4B_RING width == 0.28 um.(4            0            0
( 1027)  GRLEG_990e: V4B_RING width == 0.28 um.(9            0            0
( 1028)  GRLEG_990e: V5B_RING width == 0.28 um.(4            0            0
( 1029)  GRLEG_990e: V5B_RING width == 0.28 um.(9            0            0
( 1030)  GRLEG_990e: V5B_RING width == 0.28 um.(4            0            0
( 1031)  GRLEG_990e: V5B_RING width == 0.28 um.(9            0            0
( 1032)  GRLEG_990j: FTBAR(chipring) width == 1.2            0            0
( 1033)  GRLEG_990j: FTBAR(chipring) width == 1.2            0            0
( 1034)  GRLEG_990j: FTBAR(chipring) width == 1.2            0            0
( 1035)  GRLEG_990j: FTBAR(chipring) width == 1.2            0            0
( 1036)  GRLEG_991: RX not within BP(chipring) fo            0            0
( 1037)  GRLEG_991: RX must be within BP(chipring            0            0
( 1038)  GRLEG_991: RX must be within BP(chipring            0            0
( 1039)  GRLEG_992: CABAR not within RX(chipring)            0            0
( 1040)  GRLEG_992: CABAR must be within RX(chipr            0            0
( 1041)  GRLEG_992: CABAR must be within RX(chipr            0            0
( 1042)  GRLEG_993: CABAR not within M1(chipring)            0            0
( 1043)  GRLEG_993: CABAR must be within M1(chipr            0            0
( 1044)  GRLEG_993: CABAR must be within M1(chipr            0            0
( 1045)  GRLEG_994a: V1BAR not within M1(chipring            0            0
( 1046)  GRLEG_994a: V1BAR must be within M1(chip            0            0
( 1047)  GRLEG_994a: V1BAR must be within M1(chip            0            0
( 1048)  GRLEG_994b: V2BAR not within M2(chipring            0            0
( 1049)  GRLEG_994b: V2BAR must be within M2(chip            0            0
( 1050)  GRLEG_994b: V2BAR must be within M2(chip            0            0
( 1051)  GRLEG_994c: V3BAR not within M3(chipring            0            0
( 1052)  GRLEG_994c: V3BAR must be within M3(chip            0            0
( 1053)  GRLEG_994c: V3BAR must be within M3(chip            0            0
( 1054)  GRLEG_994d: V4BAR not within M4(chipring            0            0
( 1055)  GRLEG_994d: V4BAR must be within M4(chip            0            0
( 1056)  GRLEG_994d: V4BAR must be within M4(chip            0            0
( 1057)  GRLEG_994d1: V5BAR not within M5(chiprin            0            0
( 1058)  GRLEG_994d1: V5BAR must be within M5(chi            0            0
( 1059)  GRLEG_994d1: V5BAR must be within M5(chi            0            0
( 1060)  GRLEG_994e: FTBAR not within MT(chipring            0            0
( 1061)  GRLEG_994e: FTBAR must be within MT(chip            0            0
( 1062)  GRLEG_994e: FTBAR must be within MT(chip            0            0
( 1063)  GRLEG_994f: FTBAR not within AM(chipring            0            0
( 1064)  GRLEG_994f: FTBAR must be within AM(chip            0            0
( 1065)  GRLEG_994f: FTBAR must be within AM(chip            0            0
( 1066)  GRLEG_994f: FTBAR not within E1(chipring            0            0
( 1067)  GRLEG_994f: FTBAR must be within E1(chip            0            0
( 1068)  GRLEG_994f: FTBAR must be within E1(chip            0            0
( 1069)  GRLEG_994f: FTBAR not within ML(chipring            0            0
( 1070)  GRLEG_994f: FTBAR must be within ML(chip            0            0
( 1071)  GRLEG_994f: FTBAR must be within ML(chip            0            0
( 1072)  GRLEG_994f: FTBAR not within MZ(chipring            0            0
( 1073)  GRLEG_994f: FTBAR must be within MZ(chip            0            0
( 1074)  GRLEG_994f: FTBAR must be within MZ(chip            0            0
( 1075)  GRLEG_995a: V1BAR not within M2(chipring            0            0
( 1076)  GRLEG_995a: V1BAR must be within M2(chip            0            0
( 1077)  GRLEG_995a: V1BAR must be within M2(chip            0            0
( 1078)  GRLEG_995b: V1BAR not within MT(chipring            0            0
( 1079)  GRLEG_995b: V1BAR must be within MT(chip            0            0
( 1080)  GRLEG_995b: V1BAR must be within MT(chip            0            0
( 1081)  GRLEG_996a: V2BAR not within M3(chipring            0            0
( 1082)  GRLEG_996a: V2BAR must be within M3(chip            0            0
( 1083)  GRLEG_996a: V2BAR must be within M3(chip            0            0
( 1084)  GRLEG_996b: V2BAR not within MT(chipring            0            0
( 1085)  GRLEG_996b: V2BAR must be within M3(chip            0            0
( 1086)  GRLEG_996b: V2BAR must be within M3(chip            0            0
( 1087)  GRLEG_996c: V3BAR not within M4(chipring            0            0
( 1088)  GRLEG_996c: V3BAR must be within M4(chip            0            0
( 1089)  GRLEG_996c: V3BAR must be within M4(chip            0            0
( 1090)  GRLEG_996d: V3BAR not within MT(chipring            0            0
( 1091)  GRLEG_996d: V4BAR must be within MT(chip            0            0
( 1092)  GRLEG_996d: V4BAR must be within MT(chip            0            0
( 1093)  GRLEG_996e: V4BAR not within MT(chipring            0            0
( 1094)  GRLEG_996e: V4BAR must be within MT(chip            0            0
( 1095)  GRLEG_996e: V4BAR must be within MT(chip            0            0
( 1096)  GRLEG_996f: V4BAR not within M5(chipring            0            0
( 1097)  GRLEG_996f: V5BAR must be within M5(chip            0            0
( 1098)  GRLEG_996f: V5BAR must be within M5(chip            0            0
( 1099)  GRLEG_996g: V5BAR not within MT(chipring            0            0
( 1100)  GRLEG_996g: V5BAR must be within MT(chip            0            0
( 1101)  GRLEG_996g: V5BAR must be within MT(chip            0            0
( 1102)  GRLEG_996h: E2 not within E1(chipring) f            0            0
( 1103)  GRLEG_996h: E2 must be within E1(chiprin            0            0
( 1104)  GRLEG_996h: E2 must be within E1(chiprin            0            0
( 1105)  GRLEG_996j: E2 not within MA(chipring) f            0            0
( 1106)  GRLEG_996j: E2 must be within MA(chiprin            0            0
( 1107)  GRLEG_996j: E2 must be within MA(chiprin            0            0
( 1108)  GRLEG_999: RX(chipring) must be within C            0            0
( 1109)  GRLEG_999: RX(chipring) must be within C            0            0
( 1110)  GRLEG_999: M1(chipring) must be within C            0            0
( 1111)  GRLEG_999: M1(chipring) must be within C            0            0
( 1112)  GRLEG_999: M2(chipring) must be within C            0            0
( 1113)  GRLEG_999: M2(chipring) must be within C            0            0
( 1114)  GRLEG_999: M3(chipring) must be within C            0            0
( 1115)  GRLEG_999: M3(chipring) must be within C            0            0
( 1116)  GRLEG_999: M4(chipring) must be within C            0            0
( 1117)  GRLEG_999: M4(chipring) must be within C            0            0
( 1118)  GRLEG_999: M5(chipring) must be within C            0            0
( 1119)  GRLEG_999: M5(chipring) must be within C            0            0
( 1120)  GRLEG_999: RX(chipring) must be within C            0            0
( 1121)  GRLEG_999: RX(chipring) must be within C            0            0
( 1122)  GRLEG_999: M1(chipring) must be within C            0            0
( 1123)  GRLEG_999: M1(chipring) must be within C            0            0
( 1124)  GRLEG_999: M2(chipring) must be within C            0            0
( 1125)  GRLEG_999: M2(chipring) must be within C            0            0
( 1126)  GRLEG_999: M3(chipring) must be within C            0            0
( 1127)  GRLEG_999: M3(chipring) must be within C            0            0
( 1128)  GRLEG_999: M4(chipring) must be within C            0            0
( 1129)  GRLEG_999: M4(chipring) must be within C            0            0
( 1130)  GRLEG_999: M5(chipring) must be within C            0            0
( 1131)  GRLEG_999: M5(chipring) must be within C            0            0
( 1132)  GRLEG_999a: CHIPEDGE is not bounded at X            0            0
( 1133)  ERROR: CHIPEDGE maximum x dimension (mm)            0            0
( 1134)  ERROR: CHIPEDGE maximum y dimension (mm)            0            0
( 1135)  GRLEG_999a: OP must be within CHIPEDGE >            0            0
( 1136)  GRLEG_999a: PI must be within CHIPEDGE >            0            0
( 1137)  GRLEG_999a: NW must be within CHIPEDGE >            0            0
( 1138)  GRLEG_999a: NS must be within CHIPEDGE >            0            0
( 1139)  GRLEG_999a: PC must be within CHIPEDGE >            0            0
( 1140)  GRLEG_999a: RX must be within CHIPEDGE >            0            0
( 1141)  GRLEG_999a: CA must be within CHIPEDGE >            0            0
( 1142)  GRLEG_999a: CABAR must be within CHIPEDG            0            0
( 1143)  GRLEG_999a: RN must be within CHIPEDGE >            0            0
( 1144)  GRLEG_999a: PR must be within CHIPEDGE >            0            0
( 1145)  GRLEG_999a: NR must be within CHIPEDGE >            0            0
( 1146)  GRLEG_999a: BB must be within CHIPEDGE >            0            0
( 1147)  GRLEG_999a: JD must be within CHIPEDGE >            0            0
( 1148)  GRLEG_999a: RR must be within CHIPEDGE >            0            0
( 1149)  GRLEG_999a: RP must be within CHIPEDGE >            0            0
( 1150)  GRLEG_999a: DG must be within CHIPEDGE >            0            0
( 1151)  GRLEG_999a: TG must be within CHIPEDGE >            0            0
( 1152)  GRLEG_999a: M1 must be within CHIPEDGE >            0            0
( 1153)  GRLEG_999a: K1 must be within CHIPEDGE >            0            0
( 1154)  GRLEG_999a: V1 must be within CHIPEDGE >            0            0
( 1155)  GRLEG_999a: V1BAR must be within CHIPEDG            0            0
( 1156)  GRLEG_999a: M2 must be within CHIPEDGE >            0            0
( 1157)  GRLEG_999a: V2 must be within CHIPEDGE >            0            0
( 1158)  GRLEG_999a: V2BAR must be within CHIPEDG            0            0
( 1159)  GRLEG_999a: M3 must be within CHIPEDGE >            0            0
( 1160)  GRLEG_999a: V3 must be within CHIPEDGE >            0            0
( 1161)  GRLEG_999a: V3BAR must be within CHIPEDG            0            0
( 1162)  GRLEG_999a: M4 must be within CHIPEDGE >            0            0
( 1163)  GRLEG_999a: V4 must be within CHIPEDGE >            0            0
( 1164)  GRLEG_999a: V4BAR must be within CHIPEDG            0            0
( 1165)  GRLEG_999a: M5 must be within CHIPEDGE >            0            0
( 1166)  GRLEG_999a: V5 must be within CHIPEDGE >            0            0
( 1167)  GRLEG_999a: V5BAR must be within CHIPEDG            0            0
( 1168)  GRLEG_999a: QT must be within CHIPEDGE >            0            0
( 1169)  GRLEG_999a: HT must be within CHIPEDGE >            0            0
( 1170)  GRLEG_999a: FT must be within CHIPEDGE >            0            0
( 1171)  GRLEG_999a: FTBAR must be within CHIPEDG            0            0
( 1172)  GRLEG_999a: E2 must be within CHIPEDGE >            0            0
( 1173)  GRLEG_999a: DV must be within CHIPEDGE >            0            0
( 1174)  GRLEG_999a: LV must be within CHIPEDGE >            0            0
( 1175)  GRLEG_999a: TV must be within CHIPEDGE >            0            0
( 1176)  GRLEG_999a: JS must be within CHIPEDGE >            0            0
( 1177)  GRLEG_999a: DEGEN must be within CHIPEDG            0            0
( 1178)  GRLEG_999a: PHGEN must be within CHIPEDG            0            0
( 1179)  GRLEG_999a: DFGEN must be within CHIPEDG            0            0
( 1180)  GRLEG_999a: Background enclosing a pad m            0            0
( 1181)  GRLEG_999b: BP must be within CHIPEDGE >            0            0
( 1182)  GRLEG_999c: AM(ring) must be within CHIP            0            0
( 1183)  GRLEG_999c: AM(ring) must be within CHIP            0            0
( 1184)  GRLEG_999c: E1(ring) must be within CHIP            0            0
( 1185)  GRLEG_999c: E1(ring) must be within CHIP            0            0
( 1186)  GRLEG_999c: MA(ring) must be within CHIP            0            0
( 1187)  GRLEG_999c: MA(ring) must be within CHIP            0            0
( 1188)  GRLEG_999c: ML(ring) must be within CHIP            0            0
( 1189)  GRLEG_999c: ML(ring) must be within CHIP            0            0
( 1190)  GRLEG_999c: MT(ring) must be within CHIP            0            0
( 1191)  GRLEG_999c: MT(ring) must be within CHIP            0            0
( 1192)  GRLEG_999c: MZ(ring) must be within CHIP            0            0
( 1193)  GRLEG_999c: MZ(ring) must be within CHIP            0            0
( 1194)  GRLEG_999c: AM(ring) must be within CHIP            0            0
( 1195)  GRLEG_999c: E1(ring) must be within CHIP            0            0
( 1196)  GRLEG_999c: MA(ring) must be within CHIP            0            0
( 1197)  GRLEG_999c: ML(ring) must be within CHIP            0            0
( 1198)  GRLEG_999c: MT(ring) must be within CHIP            0            0
( 1199)  GRLEG_999c: MZ(ring) must be within CHIP            0            0
( 1200)  GRLEG_999e: NW not allowed in chip Chip             0            0
( 1201)  GRLEG_999e: OP not allowed in chip Chip             0            0
( 1202)  GRLEG_999e: PC not allowed in chip Chip             0            0
( 1203)  GRLEG_999e: DI not allowed in chip Chip             0            0
( 1204)  GRLEG_999e: NS not allowed in chip Chip             0            0
( 1205)  GRLEG_999e: PI not allowed in chip Chip             0            0
( 1206)  GRLEG_999e: BP must be within chipring              0            0
( 1207)  GRLEG_999e: CABAR must be within chiprin            0            0
( 1208)  GRLEG_999e: M1 must be within chipring              0            0
( 1209)  GRLEG_999e: V1BAR must be within chiprin            0            0
( 1210)  GRLEG_999e: RX must be within chipring              0            0
( 1211)  GRLEG_999e: M2 must be within chipring              0            0
( 1212)  GRLEG_999e: V2BAR must be within chiprin            0            0
( 1213)  GRLEG_999e: M3 must be within chipring              0            0
( 1214)  GRLEG_999e: V3BAR must be within chiprin            0            0
( 1215)  GRLEG_999e: M4 must be within chipring              0            0
( 1216)  GRLEG_999e: V4BAR must be within chiprin            0            0
( 1217)  GRLEG_999e: M5 must be within chipring              0            0
( 1218)  GRLEG_999e: V5BAR must be within chiprin            0            0
( 1219)  GRLEG_999e: MT must be within chipring              0            0
( 1220)  GRLEG_999e: FT/FTBAR must be within chip            0            0
( 1221)  GRLEG_999e: E1 must be within chipring              0            0
( 1222)  GRLEG_999e: E2 must be within chipring              0            0
( 1223)  GRLEG_999e: MA must be within chipring              0            0
( 1224)  GRLEG_999e: ML must be within chipring              0            0
( 1225)  GRLEG_999e: AM must be within chipring              0            0
( 1226)  GRLEG_999e: MZ must be within chipring              0            0
( 1227)  GRLEG_1000: GUARDRING IS NOT CONNECTED T            0            0
( 1228)  GRLEG_1000: GUARDRING IS NOT CONNECTED T            0            0
( 1229)  GRLEG_1000: GUARDRING IS NOT CONNECTED T            0            0
( 1230)  GRLEG_1000: GUARDRING IS NOT CONNECTED T            0            0
( 1231)  GRLEG_1001: DATA_EXTENT touching (MPW_ED            0            0
( 1232)  GR1: (PC over RX)(NFET) width >= 0.180 u            0            0
( 1233)  GR2: (PC over RX)(PFET) width >= 0.180 u            0            0
( 1234)  GR3: (PC over RX)(NFET) width for 45 deg            0            0
( 1235)  GR4: (PC over RX)(PFET) width for 45 deg            0            0
( 1236)  GR10: RX width under PC for NFET device             0            0
( 1237)  GR40b: RX space if both RX shapes are wi            0            0
( 1238)  GR40b: RX space if both RX shapes are wi            0            0
( 1239)  GR11: RX width under PC for PFET device             0            0
( 1240)  GR50b: RX width (max) <= 200.000 um.                0            0
( 1241)  GR50: RX width (min) >= 0.220 um.                   0            0
( 1242)  GR51: RX area >= 0.160 sq.um.                       0            0
( 1243)  GR52: RX space >= 0.260 um.                         0            0
( 1244)  GR52: RX notch >= 0.260 um.                         0            0
( 1245)  GRCPRX4: RX straddling NS found!                    0            0
( 1246)  GRCPRX4: RX within NS >= 0.500 um.                  0            0
( 1247)  GRRX8b: (BF not touching NW) to adjacent            0            0
( 1248)  GRRX8d: ((BF touch NW) touch NWASP) to a            0            0
( 1249)  GRRX23: (RX(over BB), not over IND_FILT,            0            0
( 1250)  GR100: PC width >= 0.180 um.                        0            0
( 1251)  GR101a: PC area >= 0.203 sq. um.                    0            0
( 1252)  GR101b: PC enclosed area >= 0.291 sq. um            0            0
( 1253)  GR102a: (PC(NOT END) to PC(NOT END) spac            0            0
( 1254)  GR102a: (PC(NOT END) to PC(NOT END) notc            0            0
( 1255)  GR102b: (PCEND to PC space) (not over RX            0            0
( 1256)  GR102b: (PCEND to PCEND space) (not over            0            0
( 1257)  GR104a: PC(over RX) space >= 0.240 um.              0            0
( 1258)  GR104b: PC(over RX) space >= 0.240 um.              0            0
( 1259)  GR110: RX overlap past PC >= 0.280 um.              0            0
( 1260)  GR110: RX overlap past PC >= 0.280 um.(c            0            0
( 1261)  GR110: RX overlap past PC >= 0.280 um.(4            0            0
( 1262)  GR111: PC overlap past RX >= 0.240 um.              0            0
( 1263)  GR111: PC overlap past RX >= 0.240 um.(c            0            0
( 1264)  GR112: PC overlap past RX (within 0.08 o            0            0
( 1265)  GR114: PC to RX corner >= 0.060 um.                 0            0
( 1266)  GR114: PC abutting RX corner found!                 0            0
( 1267)  GR115: PC corner to RX >= 0.080 um.                 0            0
( 1268)  GR115: RX abutting PC corner found!                 0            0
( 1269)  GR119: PC Vertex within RX >= 0.280 um.             0            0
( 1270)  GR120a: Non 45 degree PC vertices over R            0            0
( 1271)  GR120a: Non 45 degree PC vertices over R            0            0
( 1272)  GR120b: Dist between inside corners of 4            0            0
( 1273)  GR120c: (PC over RX) notch >= 0.460 um.             0            0
( 1274)  GR121: PC intersecting RX at other than             0            0
( 1275)  GR123a: 45 degree outside (RX not covere            0            0
( 1276)  GR123a: 90 degree inside (RX not covered            0            0
( 1277)  GR123a: 90 degree outside (RX not covere            0            0
( 1278)  GR123b: Dist between inside corners of (            0            0
( 1279)  GR125: (PC over RX) dividing RX into les            0            0
( 1280)  GR130b: (PC not intersecting RX) to RX >            0            0
( 1281)  GRBB131: ((NW not over MOSVAR ) touching            0            0
( 1282)  GR132: (PC that intersects RX) area <= 3            0            0
( 1283)  GR200: CA width and length == 0.200 um.(            0            0
( 1284)  GR200: CA width and length == 0.200 um.(            0            0
( 1285)  GR201: Non-rectangular CA found!                    0            0
( 1286)  GR201: 45 degree CA or CABAR found                  0            0
( 1287)  GR203a: CA space >= 0.240 um.                       0            0
( 1288)  GR204: CA within RX >= 0.100 um.                    0            0
( 1289)  GR204a: CABAR within RX >= 0.200 um.                0            0
( 1290)  GR207: CA(over RX) to adjacent PC >= 0.1            0            0
( 1291)  GR208: CA(over PC) to adjacent RX >= 0.1            0            0
( 1292)  GR208a: CABAR(over PC) to adjacent RX >=            0            0
( 1293)  GR209: CA within PC >= 0.060 um.                    0            0
( 1294)  GR209a: CABAR within PC >= 0.160 um.                0            0
( 1295)  GR211: {CA,CABAR} over (PC over RX) foun            0            0
( 1296)  GR212: {CA,CABAR} not over {RX or PC} fo            0            0
( 1297)  GR220: CABAR width == 0.200 um.(error >)            0            0
( 1298)  GR220: CABAR width == 0.200 um.(error <)            0            0
( 1299)  GRLEG_221: Non-rectangular CABAR found!             0            0
( 1300)  GRLEG_221: CABAR length (min) >= 0.600 u            0            0
( 1301)  GRLEG_222: CABAR length (max) <= 5.000 u            0            0
( 1302)  GR223c: CA touching CABAR found!                    0            0
( 1303)  GR223a: CABAR space >= 0.360 um.                    0            0
( 1304)  GR223b: CABAR space (run > 2.5) >= 0.520            0            0
( 1305)  GR223c: CABAR to adjacent CA >= 0.280 um            0            0
( 1306)  GR225: CABAR(over RX) to adjacent PC >=             0            0
( 1307)  GRLEG_228: CABAR outside of (Resistors o            0            0
( 1308)  GR250a: Non-orthagonal NW shapes found!             0            0
( 1309)  GR250: NW(drawn or generated) width >= 0            0            0
( 1310)  GR252c: RX shape between (NW shapes < 1.            0            0
( 1311)  GRNWASP1: NW straddling NWASP found!                0            0
( 1312)  GR252a: NW(not over NWASP) space >= 1.28            0            0
( 1313)  GR252a: NW(not over NWASP) to NW(over NW            0            0
( 1314)  GR252b: NW(over NWASP) space (run  < 0.7            0            0
( 1315)  GR252b: NW(over NWASP) space (run >= 0.7            0            0
( 1316)  GR252b: NW notch (run  < 0.70) >= 1.280             0            0
( 1317)  GR252b: NW notch (run >= 0.70) >= 0.840             0            0
( 1318)  GR260: (RX within BP) straddling NW foun            0            0
( 1319)  GR260: (RX within BP) within NW >= 0.420            0            0
( 1320)  GR260a: (RX within BP) within NW(>=40.0)            0            0
( 1321)  GRCP260: (RX(P+) not touching NW) must b            0            0
( 1322)  GRCP260c: RX N contact (RX not over (BP             0            0
( 1323)  GRCP260d: RX N contact ((RX over SCHKY)             0            0
( 1324)  GR261f: RX(NWcont) overlap of NW >= 0.28            0            0
( 1325)  GR262: RX(NWcont) overlap area with NW >            0            0
( 1326)  GR262b: (RX within RN) intersect area wi            0            0
( 1327)  GR262f: RX(NWcont) overlap area with NW             0            0
( 1328)  GR261: RX(NWcont) overlap of NW >= 0.460            0            0
( 1329)  GR265: RX(outside BP) to adjacent NW (di            0            0
( 1330)  GR265a: RX(outside BP) to adjacent NW(>=            0            0
( 1331)  GR265b: RX(outside BP) to adjacent NS (d            0            0
( 1332)  GRCP265b: ((RX outside BP) not over PD)             0            0
( 1333)  GR266: (RX(in BP) outside NW) to adjacen            0            0
( 1334)  GRCP266c: (RX(in BP) no NW) to BB space             0            0
( 1335)  GR268: RX(in BP) to RX(not BP) (in same             0            0
( 1336)  GR268b: RX(N+ Jct) to Substrate Contact             0            0
( 1337)  GRBB268: (RX over PD) to RX(not PD) (sam            0            0
( 1338)  GR268g: NW(hole) without a substrate con            0            0
( 1339)  GR268g: BB(hole) without a substrate con            0            0
( 1340)  GR268g: BF(hole) without a substrate con            0            0
( 1341)  GR268g: BFMOAT(hole) without a substrate            0            0
( 1342)  GR269: (PC over RX (where RX Straddles N            0            0
( 1343)  GR269: (PC over RX (where RX Straddles N            0            0
( 1344)  GR269a: RX(NWcont) overlap past (NW not             0            0
( 1345)  GRNW4: (NW not over SCHKY) overlapping B            0            0
( 1346)  GRNW4: NW to adjacent BB >= 1.760 um.               0            0
( 1347)  GRVTSENS00: (PC over RX) straddling VTSE            0            0
( 1348)  GRVTSENS01: ((PC over RX) over VTSENS) t            0            0
( 1349)  GRVTSENS01: ((PC over RX) over VTSENS) t            0            0
( 1350)  GRVTSENS01: ((PC over RX) over VTSENS) t            0            0
( 1351)  GRVTSENS01: ((PC over RX) over VTSENS) t            0            0
( 1352)  GRVTSENS01: ((PC over RX) over VTSENS) t            0            0
( 1353)  GRVTSENS02: (((PC over RX) over BP) over            0            0
( 1354)  GRVTSENS02: (((PC over RX) over BP) over            0            0
( 1355)  GRVTSENS02: (((PC over RX) over BP) over            0            0
( 1356)  GR290: NR width >= 0.640 um.                        0            0
( 1357)  GR291: Non-orthogonal NR shape found!               0            0
( 1358)  GR292: NR to NR  space >= 0.540 um.                 0            0
( 1359)  GR292: NR to NR  notch >= 0.540 um.                 0            0
( 1360)  GR294a: [(PC intersect RX) not within NW            0            0
( 1361)  GR294b: [(PC intersect RX) not within NW            0            0
( 1362)  GR294b: [(PC intersect RX) not within NW            0            0
( 1363)  GR299b: NR overlap past NW >= 1.400 um.             0            0
( 1364)  GRNR10: NR touching (BB, MOSVAR, PD, DI)            0            0
( 1365)  GRNR11 : NR to ZEROVT >= 1.400 um.                  0            0
( 1366)  GRNR11: NR touching ZEROVT found!                   0            0
( 1367)  GRNR12 : NR to PCFUSE >= 1.400 um.                  0            0
( 1368)  GRNR12: NR touching PCFUSE found!                   0            0
( 1369)  GRNR13: NR not touching (PC over RX) fou            0            0
( 1370)  GRLW00: PR width >= 0.640 um.                       0            0
( 1371)  GRLW01: Non-orthogonal PR shape found!              0            0
( 1372)  GRLW02: PR to PR  space >= 0.540 um.                0            0
( 1373)  GRLW04a: [(PC intersect RX) within NW] t            0            0
( 1374)  GRLW04b: [(PC intersect RX) within NW] s            0            0
( 1375)  GRLW04b: [(PC intersect RX) within NW] w            0            0
( 1376)  GRLW09: PR overlap past NW >= 0.860 um.             0            0
( 1377)  GRLW10: PR touching (BB, MOSVAR, PD, DI)            0            0
( 1378)  GRLW11 : PR to ZEROVT >= 1.400 um.                  0            0
( 1379)  GRLW11: PR touching ZEROVT found!                   0            0
( 1380)  GRLW12 : PR to PCFUSE >= 1.400 um.                  0            0
( 1381)  GRLW12: PR touching PCFUSE found!                   0            0
( 1382)  GRLW13: PR not touching (PC over RX) fou            0            0
( 1383)  GR350: BP width >= 0.340 um.                        0            0
( 1384)  GR351a: BP area >= 0.387 sq.um.                     0            0
( 1385)  GR351b: BP enclosed area >= 0.387 sq.um.            0            0
( 1386)  GR352: BP space >= 0.340 um.                        0            0
( 1387)  GR353: ((RX over BP) over NW) within BP             0            0
( 1388)  GR353: ((RX over BP) over NW) within BP             0            0
( 1389)  GR354a: ((RX(sub cont) not GRLOGIC) not             0            0
( 1390)  GR354b: (RX(sub cont) over (NW +0.42)) w            0            0
( 1391)  GR355: (RX(not over BP)not over NW) to B            0            0
( 1392)  GR356b: (RX(nw cont) not over (NW -0.42)            0            0
( 1393)  GR357: Layout will cause: BH to NW space            0            0
( 1394)  GR357: Layout will cause: BH to BB space            0            0
( 1395)  GR357: Layout will cause: BH to MOSVAR s            0            0
( 1396)  GR357a: Layout will cause: BH width >= 0            0            0
( 1397)  GR357b: Layout will cause: BH space >= 0            0            0
( 1398)  GR358b: BP to PD space >= 0.340 um.                 0            0
( 1399)  GR358c: Layout will cause: BN to PD spac            0            0
( 1400)  GR358d: Layout will cause: PH width >= 0            0            0
( 1401)  GR358e: Layout will cause: BN width >= 0            0            0
( 1402)  GR358f: Layout will cause: BN space >= 0            0            0
( 1403)  GR358g: Layout will cause: BF width >= 0            0            0
( 1404)  GR358g: Layout will cause: BF width >= 0            0            0
( 1405)  GR358h: Layout will cause: BF space (not            0            0
( 1406)  GR358h: Layout will cause: BF space (not            0            0
( 1407)  GR358i: Layout will cause: PH space >= 0            0            0
( 1408)  GR358j: Layout will cause: DE width >= 0            0            0
( 1409)  GR358k: Layout will cause: DE space >= 0            0            0
( 1410)  GR358m: Layout will cause: DF width >= 0            0            0
( 1411)  GR358n: Layout will cause: DF space >= 0            0            0
( 1412)  GR370: (PC over RX) to BP space >= 0.360            0            0
( 1413)  GR370: (PC over RX) to BP space (gate en            0            0
( 1414)  GR370b: (PC over RX) touching PD found!             0            0
( 1415)  GR370a: (PC over RX) to BB space >= 0.50            0            0
( 1416)  GR370b: (PC over RX) to PD >= 0.500 um.             0            0
( 1417)  GR371: (PC over RX) straddling BP found!            0            0
( 1418)  GR371: (PC over RX) within BP >= 0.360 u            0            0
( 1419)  GRBP3: BP touching BB found!                        0            0
( 1420)  GR372: (BP overlap of RX) not over NW >=            0            0
( 1421)  GR372a: Substrate contact area >= 0.147             0            0
( 1422)  GR373: (RX overlap past BP) over NW  >=             0            0
( 1423)  GR373a: Well contact area >= 0.147 sq.um            0            0
( 1424)  GR374: RX straddling NW (butted n-well c            0            0
( 1425)  GR374: RX within NW (butted n-well cont)            0            0
( 1426)  GR378: (BP inter RX) to adj ((PC interse            0            0
( 1427)  GR379: (BP inter RX) overlap past ((PC i            0            0
( 1428)  GR380: DI must be within BP == 0.040 um.            0            0
( 1429)  GR380: DI outside of BP found.                      0            0
( 1430)  GR380a: NW(touching DI) touching JD foun            0            0
( 1431)  GR380c: NW(touching DI) touching BB foun            0            0
( 1432)  GR380c: NW(touching DI) touching PI foun            0            0
( 1433)  GR380d: NW(touching DI) touching RP foun            0            0
( 1434)  GR380d: NW(touching DI) touching RR foun            0            0
( 1435)  GR380e: NW(touching DI) touching DG foun            0            0
( 1436)  GR380e: NW(touching DI) touching OP foun            0            0
( 1437)  GR380e: NW(touching DI) touching PC foun            0            0
( 1438)  GR380g: BP(touching DI) touching PD foun            0            0
( 1439)  GR380: DI must be within BP == 0.040 um.            0            0
( 1440)  GR380a: NW(touching DI) to JD space >= 5            0            0
( 1441)  GR380d: NW(touching DI) to RP space >= 2            0            0
( 1442)  GR380d: NW(touching DI) to RR space >= 2            0            0
( 1443)  GR381: RX straddling DI found!                      0            0
( 1444)  GR381b: RX within DI <= 0.340 um.                   0            0
( 1445)  GR381: RX within DI >= 0.100 um.                    0            0
( 1446)  GR382b: RX(NWcont) to DI space <= 0.540             0            0
( 1447)  GR382b: DI not within an RX(NWcont) hole            0            0
( 1448)  GR383: DI not enclosing an RX shape foun            0            0
( 1449)  GR385a: RX(not GRLOGIC) width (max) (whe            0            0
( 1450)  GR385: RX width (min) (when RX touches D            0            0
( 1451)  GR387: RX(touching DI) not within NW fou            0            0
( 1452)  GR387b: ((NW(touching DI) expanded by 0.            0            0
( 1453)  GR388: (RX(NWcont) over NW(touching DI))            0            0
( 1454)  GR389: (RX(sxcont) over (NW(touch DI) +1            0            0
( 1455)  GRDIPI00: DIPI must be exact space to BP            0            0
( 1456)  GRDIPI00a: (PI touching DIPI) to JD (((P            0            0
( 1457)  GRDIPI00c: DIPI must be covered by PI               0            0
( 1458)  GRDIPI00d: (PI touching DIPI) minimum sp            0            0
( 1459)  GRDIPI00e: DIPI touching {NW, BP,PC, OP,            0            0
( 1460)  GRDIPI00f: (PI touching DIPI) touching (            0            0
( 1461)  GRDIPI00g: (BP touching (PI touching DIP            0            0
( 1462)  GRDIPI01: RX minimum within DIPI >= 0.10            0            0
( 1463)  GRDIPI01b: RX maximum within DIPI <= 0.3            0            0
( 1464)  GRDIPI02b: RX isolated p-well contact ma            0            0
( 1465)  GRDIPI02c: RX isolated p-well contact to            0            0
( 1466)  GRDIPI03: DIPI must enclose RX.                     0            0
( 1467)  GRDIPI05: RX minimum width (when RX is w            0            0
( 1468)  GRDIPI5a: (RX not over GRLOGIC) maximum             0            0
( 1469)  GRDIPI07: (RX within DIPI) must be withi            0            0
( 1470)  GRDIPI07b: [(NW not over PI) touching (P            0            0
( 1471)  GRDIPI08: [RX p-well contact over (PI to            0            0
( 1472)  GRDIPI09: {RX substrate contact over [((            0            0
( 1473)  GR710: (OP intersect RX) length >= 0.480            0            0
( 1474)  GR711: (OP intersect RX) width >= 0.280             0            0
( 1475)  GR712: (OP intersect PC) length >= 1.060            0            0
( 1476)  GR713a: (OP intersect PC) not over (RR i            0            0
( 1477)  GR713b: (OP intersect PC) over (RR inter            0            0
( 1478)  GR713c: (OP intersect PC) over (RR inter            0            0
( 1479)  GR715a: ((RX touching OP) outside BP) to            0            0
( 1480)  GR715b: ((RX touching OP) inside BP) not            0            0
( 1481)  GR715f: RX(over OP) touching BB found!              0            0
( 1482)  GR715a: ((RX touching OP) outside BP) to            0            0
( 1483)  GR715b: ((RX touching OP) inside BP) wit            0            0
( 1484)  GR716a: (RX touching OP) straddling NW f            0            0
( 1485)  GR716a: (RX touching OP) straddling BB f            0            0
( 1486)  GR716b: ((OP intersect RX) touching NW )            0            0
( 1487)  GR716c: ((OP intersect RX) not touching             0            0
( 1488)  GR717b: (PC intersect OP) straddling NW             0            0
( 1489)  GR717a: (PC intersect OP) to NW space >=            0            0
( 1490)  GR717b: (PC intersect OP) within NW >= 0            0            0
( 1491)  GR725: OP width >= 0.480 um.                        0            0
( 1492)  GR726: OP space >= 0.480 um.                        0            0
( 1493)  GR726: OP notch >= 0.480 um.                        0            0
( 1494)  GR729a: OP area >= 0.720 sq.um.                     0            0
( 1495)  GR729b: OP enclosed area >= 0.720 sq.um.            0            0
( 1496)  GR727: OP overlap past RX >= 0.180 um.              0            0
( 1497)  GR728: OP to RX space >= 0.160 um.                  0            0
( 1498)  GR730: OP overlap past PC >= 0.200 um.              0            0
( 1499)  GR731: OP to PC space>= 0.260 um.                   0            0
( 1500)  GROP9a: (OP over RP) overlap of PD == 0.            0            0
( 1501)  GROP9a: (OP over RR) overlap of PD == 0.            0            0
( 1502)  GROP9: OP to adjacent PD >= 0.440 um.               0            0
( 1503)  GROP9a: (OP over RP) overlap of PD == 0.            0            0
( 1504)  GROP9a: (OP over RR) overlap of PD == 0.            0            0
( 1505)  GR732: CA/CABAR over OP found!                      0            0
( 1506)  GR733: CA to OP space >= 0.180 um.                  0            0
( 1507)  GR733a: CABAR to OP space >= 0.360 um.              0            0
( 1508)  GR734a: (RX touching OP) straddling BP f            0            0
( 1509)  GR734a: (RX touching OP) within BP >= 0.            0            0
( 1510)  GR734b: (RX touching OP) to BP space >=             0            0
( 1511)  GR735a2: (PC touching OP) not within {BP            0            0
( 1512)  GR735a2: (PC touching OP) within BP >= 0            0            0
( 1513)  GR735a2: (PC touching OP) within BB >= 0            0            0
( 1514)  GR735b: (PC touching OP) to BP space >=             0            0
( 1515)  GR736: (OP not over (ESDUMMy , ESD_CDM))            0            0
( 1516)  GR736a: RX(touching OP) touching PC foun            0            0
( 1517)  GR736a1: (RX(touching OP) not touching P            0            0
( 1518)  GR736a2: PC(touching OP) touching SBLK f            0            0
( 1519)  GR736a3: SBLK must touch OP                         0            0
( 1520)  GR737:  OP touching (DG not over (ESDUMM            0            0
( 1521)  GR737a: PC(touching OP) touching DG foun            0            0
( 1522)  GR738a: Non-rectangular (OP intersect RX            0            0
( 1523)  GR738b: Non-rectangular (OP intersect (P            0            0
( 1524)  GR738c_TF: Non-orthogonal  (OP intersect            0            0
( 1525)  GR739a: RX overlap past OP >= 0.620 um.             0            0
( 1526)  GR739b: PC overlap past OP >= 0.580 um.             0            0
( 1527)  GROP20: OP to adjacent RN >= 0.600 um.              0            0
( 1528)  GROP24: OP touching RX(over RN) found!              0            0
( 1529)  GROP29: PC(touching OP) touching RX foun            0            0
( 1530)  GROP30: ((PC over OP) over NW) to RX spa            0            0
( 1531)  GROP31: (PC touching OP) to RN must be>=            0            0
( 1532)  GROP31: (PC touching OP) cannot touch RN            0            0
( 1533)  GROP32: ((RX over OP) not over GRLOGIC)             0            0
( 1534)  GROP32: ((RX over OP) not over GRLOGIC)             0            0
( 1535)  GRPCR20a: (PCtouching OP) touching NS fo            0            0
( 1536)  GRSBLK4: SBLK not covered by (ESDUMMY or            0            0
( 1537)  GRPBR19: More than ONE set of contacts f            0            0
( 1538)  GRPBR19: More than ONE set of contacts f            0            0
( 1539)  GRPBR29: PC(touching OP, not GRLOGIC) wi            0            0
( 1540)  GRPBR31: PC(touching OP, touching BB) wi            0            0
( 1541)  GRPBR33: PC(touch OP, no touch NW, not G            0            0
( 1542)  GRPBR35: PC(touching OP, not touching BB            0            0
( 1543)  GRRR1: RR width >= 0.800 um.                        0            0
( 1544)  GRRR2: RR space >= 0.800 um.                        0            0
( 1545)  GRRR2: RR notch >= 0.800 um.                        0            0
( 1546)  GRRR3: RR touching RP found!                        0            0
( 1547)  GRRR3: RR to RP space >= 0.800 um.                  0            0
( 1548)  GRRR4: PC straddling RR found!                      0            0
( 1549)  GRRR4: PC within RR >= 0.260 um.                    0            0
( 1550)  GRRR5: RR to adjacent PC >= 0.280 um.               0            0
( 1551)  GRRR6: RR to (PC over RX) space >= 0.500            0            0
( 1552)  GRRR7: RR touching RX found!                        0            0
( 1553)  GRRR7: RR to adjacent RX >= 0.280 um.               0            0
( 1554)  GRRR8: BP within RR >= 0.000 um.                    0            0
( 1555)  GRRR9: BP(touching RR) touching BB found            0            0
( 1556)  GRRR9: BP(touching RR) touching PC(not t            0            0
( 1557)  GRRR10: PC(not touching OP) touching RR             0            0
( 1558)  GRRR11: (CA/CABAR over RR) not covered b            0            0
( 1559)  GRRP1: RP width >= 0.800 um.                        0            0
( 1560)  GRRP2: RP space >= 0.800 um.                        0            0
( 1561)  GRRP2: RP notch >= 0.800 um.                        0            0
( 1562)  GRRP4: PC straddling RP found!                      0            0
( 1563)  GRRP4: PC within RP >= 0.260 um.                    0            0
( 1564)  GRRP5: RP to adjacent PC >= 0.280 um.               0            0
( 1565)  GRRP6: RP to (PC over RX) space >= 0.500            0            0
( 1566)  GRRP7: RP touching RX found!                        0            0
( 1567)  GRRP7: RP to adjacent RX >= 0.280 um.               0            0
( 1568)  GRRP8: BP within RP >= 0.000 um.                    0            0
( 1569)  GRRP9: BP(touching RP) touching BB found            0            0
( 1570)  GRRP9: BP(touching RP) touching PC(not t            0            0
( 1571)  GRRP10: PC(not touching OP) touching RP             0            0
( 1572)  GRRP11: (CA/CABAR over RP) not covered b            0            0
( 1573)  GRSERP1: (Non rectangular (PC intersect             0            0
( 1574)  GRSERP7: (((PC over OP) over RR) over (N            0            0
( 1575)  GRSERP10: (CA touching (PC touching (Non            0            0
( 1576)  GRSERP11: (CA touching (PC touching (Non            0            0
( 1577)  GRSERP12: (CA touching (PC touching (Non            0            0
( 1578)  GRSERP13: (PD touching (PC touching (Non            0            0
( 1579)  GRSERP13: (PD touching (PC touching (Non            0            0
( 1580)  GRSERP15: (CA touching (PC touching (Non            0            0
( 1581)  GRSERP16: (RR touching (Non rectangular             0            0
( 1582)  GRKX1: K1 width (min) >= 5.000 um.                  0            0
( 1583)  GRKX2: V1 straddling K1 found!                      0            0
( 1584)  GRKX2: V1 within K1 >= 0.5000 um.                   0            0
( 1585)  GRKX3: K1 space >= 5.500 um.                        0            0
( 1586)  GRKX4: K1 touching M1 found!                        0            0
( 1587)  GRKX4: K1 to M1 space >= 1.000 um.                  0            0
( 1588)  GRKX5: More than ONE set of contacts fou            0            0
( 1589)  GRKX6: K1 width (max) <= 30.000 um.                 0            0
( 1590)  GRKX8: Non-rectangular K1 found!                    0            0
( 1591)  GRKX8: 45 degree K1 found!                          0            0
( 1592)  GRKX9: V1(touching K1) space == 0.28 um.            0            0
( 1593)  GRKX10: K1/M2 intersection only enclosin            0            0
( 1594)  GRKX10: K1/MT intersection only enclosin            0            0
( 1595)  GRKX11: K1 touching OP found!                       0            0
( 1596)  GRDG0: DGV must be within DG == 0.000 um            0            0
( 1597)  GRDG1: Non-orthagonal DG found!                     0            0
( 1598)  GRDG2b: Non-rectangular ((PC over RX) ov            0            0
( 1599)  GRDG2b: 45 degree ((PC over RX) over DG)            0            0
( 1600)  GRDG3: (PC touching DG) to RX space >= 0            0            0
( 1601)  GRDG4: (PC over RX) straddling DG found!            0            0
( 1602)  GRDG4: (PC over RX) within DG >= 0.500 u            0            0
( 1603)  GRDG5: (PC over RX) to DG space >= 0.500            0            0
( 1604)  GRDG6: DG width >= 0.440 um.                        0            0
( 1605)  GRDG7: DG space >= 0.440 um.                        0            0
( 1606)  GRDG7: DG notch >= 0.440 um.                        0            0
( 1607)  GRDG8a: (((PC over RX) over DG) not over            0            0
( 1608)  GRDG8b: (((PC over RX) over DG) not over            0            0
( 1609)  GRDGV8a: (((PC over RX) over DG) over DG            0            0
( 1610)  GRDGV8b: (((PC over RX) over DG) over DG            0            0
( 1611)  GRDG8c: ((PC over RX) over DG) space >=             0            0
( 1612)  GRDG8d: (CA over RX) to adj ((PC over RX            0            0
( 1613)  GRDG9: DG overlap past NW >= 0.440 um.              0            0
( 1614)  GRDG10 : DG to NR >= 0.700 um.                      0            0
( 1615)  GRDG10: DG touching NR found!                       0            0
( 1616)  GRDG11 : DG to PR >= 0.700 um.                      0            0
( 1617)  GRDG11: DG touching PR found!                       0            0
( 1618)  GRDG14: DG overlap of NW >= 0.440 um.               0            0
( 1619)  GRDG15: DG to (OP intersect PC) space >=            0            0
( 1620)  GRDG16: NW overlap past DG >= 0.440 um.             0            0
( 1621)  GRDG21: DG touching BB found!                       0            0
( 1622)  GRDG50: ((RX over PC) over DG) width >=             0            0
( 1623)  GRDG52: (RX touching DG) to RX space >=             0            0
( 1624)  GRDG110: (RX over DG) overlap past PC >=            0            0
( 1625)  GRDG260: (RX(P+) touching DG) within NW             0            0
( 1626)  GRDG265a: (RX(N+) touching DG) to adjace            0            0
( 1627)  GRDG265a1: (RX(N+) touching DG) to adjac            0            0
( 1628)  GRDG265b: RX(N+) to adjacent (NW touchin            0            0
( 1629)  GRDG268a: (RX(in BP)touch DG) to RX(not             0            0
( 1630)  GRDG268b: (RX(no BP)touch DG) to Substra            0            0
( 1631)  GRPD1: PD width >= 0.340 um.                        0            0
( 1632)  GRPD2a: PD space >= 0.340 um.                       0            0
( 1633)  GRPD2a: PD notch >= 0.340 um.                       0            0
( 1634)  GRPD3: PDHOLE width (for SBD anode) >= 0            0            0
( 1635)  GRPD4: PD to adj RX >= 0.360 um.                    0            0
( 1636)  GRPD5: RX intersect PD (SBD guardring) >            0            0
( 1637)  GRPD6: RX(not over (SBD or BP2ND)) strad            0            0
( 1638)  GRPD6: RX(not over (SBD or BP2ND)) withi            0            0
( 1639)  GRPD6a: PD overlap past RX(SBD guardring            0            0
( 1640)  GRPD6b: RX(not over SBD) within PD >= 0.            0            0
( 1641)  GRPD7: PD overlap past PC >= 0.280 um.              0            0
( 1642)  GRPD9b: Non-orthogonal PD shape found!              0            0
( 1643)  GRPD10a: PD to adjacent PC >= 0.280 um.             0            0
( 1644)  GRPD10b: (PD over RR) to  PC >= 0.280 um            0            0
( 1645)  GRPD11: PD enclosed area >= 0.320 sq.um.            0            0
( 1646)  GRPD14: CA(not over RN) not within PD(SB            0            0
( 1647)  GRPD14: CA(not over RN) must be within P            0            0
( 1648)  GRPD15: (RX touching PD(touching SBD)) t            0            0
( 1649)  GRPD16: PD(touching SBD) touching {PC or            0            0
( 1650)  GRRN1: RN width >= 0.800 um.                        0            0
( 1651)  GRRN2: RN space >= 1.280 um.                        0            0
( 1652)  GRRN2: RN notch >= 1.280 um.                        0            0
( 1653)  GRRN3: RN to adjacent RX >= 0.420 um.               0            0
( 1654)  GRRN4: RX straddling RN found!                      0            0
( 1655)  GRRN4: RX within RN >= 0.140 um.                    0            0
( 1656)  GRRN5a: (RX within RN) touching BP found            0            0
( 1657)  GRRN6: RN touching a P+ Junction found!             0            0
( 1658)  GRRN7: RN touching a Substrate Contact f            0            0
( 1659)  GRRN10: (RN over RX) touching PD found!             0            0
( 1660)  GRRN11: RN not within NS found!                     0            0
( 1661)  GRRN12: RN to NW space >= 1.280 um.                 0            0
( 1662)  GRRN13: (RN union NW) width >= 0.700 um.            0            0
( 1663)  GRNS1: NS width >= 4.500 um.                        0            0
( 1664)  GRNS2: NS space >= 3.680 um.                        0            0
( 1665)  GRNS2: NS notch >= 3.680 um.                        0            0
( 1666)  GRNS4b: NS touching NW found!                       0            0
( 1667)  GRNS5: NS to adjacent NW space >= 3.680             0            0
( 1668)  GRCPNS7: NS within BB == 2.100 um.(error            0            0
( 1669)  GRCPNS7: NS within BB == 2.100 um.(error            0            0
( 1670)  GRNS9: NS not covered by BB found!                  0            0
( 1671)  GRNS10: NS to adjacent BB >= 5.200 um.              0            0
( 1672)  GRNS15a: More than one (RX union NS) sha            0            0
( 1673)  GRNS16: NS not enclosing RX(over RN) fou            0            0
( 1674)  GRNS21b: NS touching ((RX touching PD) n            0            0
( 1675)  GRNS21b: NS touching ((RX touching BP) n            0            0
( 1676)  GRNS21b: NS to (RX touching PD) space >=            0            0
( 1677)  GRNS21b: NS to (RX touching BP) space >=            0            0
( 1678)  GRNS26: NS not touching (JD (HAVAR) or P            0            0
( 1679)  GRBB1: ((BB not over SCHY) not abutting             0            0
( 1680)  GRBB1b: BB(touching SCHKY) width >= 0.98            0            0
( 1681)  GRBB1a: BB(abutting NW) width == 1.000 u            0            0
( 1682)  GRBB1a: BB(abutting NW) width == 1.000 u            0            0
( 1683)  GRBB2: (BB to BB space) not over NW (inc            0            0
( 1684)  GRBB2a: (BB to BB space) over NW (includ            0            0
( 1685)  GRBB6: (BB not over SCHKY) area >= 9.600            0            0
( 1686)  GRBB6a: SCHKY must be covered by NW                 0            0
( 1687)  GRBB7: BB enclosed area >= 4.000 sq.um.             0            0
( 1688)  GRBB34: BB over NW found!                           0            0
( 1689)  GRBB34: BB touching(singular) NW found!             0            0
( 1690)  GRBB34a: BB touching more than one (unio            0            0
( 1691)  GRBB35a: BB touching BP found!                      0            0
( 1692)  GRBB35: BB to adjacent BP >= 0.440 um.              0            0
( 1693)  GRBB37: PD not within {[BB touch IND_FLT            0            0
( 1694)  GRBB38: (((RX not over SCHKY) touching B            0            0
( 1695)  GRBB41: PC straddling BB found!                     0            0
( 1696)  GRBB41: PC within BB >= 0.500 um.                   0            0
( 1697)  GRPBN10: PC(touching PD) not within {BP             0            0
( 1698)  GRPBN10: PC(touching RR) not within {BP             0            0
( 1699)  GRPBN10: PC(touching RP) not within {BP             0            0
( 1700)  GRPBN10: PC(touch PD) must be within {BP            0            0
( 1701)  GRPBN10: PC(touch RR) must be within {BP            0            0
( 1702)  GRPBN10: PC(touch RP) must be within {BP            0            0
( 1703)  GRPBN11: (PC(touching CA/CABAR) intersec            0            0
( 1704)  GRPBN12: PC to adjacent BB space >= 0.32            0            0
( 1705)  GRTW01a: Non-orthagonal PI found!                   0            0
( 1706)  GRTW01: PI width >= 3.20 um.                        0            0
( 1707)  GRTW02: PI space (PI shapes touching the            0            0
( 1708)  GRTW02: PI notch (PI shapes touching the            0            0
( 1709)  GRTW02: PI space >= 4.30 um.                        0            0
( 1710)  GRTW03: PI touching RN found!                       0            0
( 1711)  GRTW03: PI touching NR found!                       0            0
( 1712)  GRTW03: PI touching PR found!                       0            0
( 1713)  GRTW03: PI touching DI found!                       0            0
( 1714)  GRTW03a: PI touching  (PD not over BP2ND            0            0
( 1715)  GRTW04: PI(edge) not covered by NW found            0            0
( 1716)  GRTW05: PI overlap of NW >= 1.00 um.                0            0
( 1717)  GRTW06: NW overlap past PI >= 1.10 um.              0            0
( 1718)  GRTW10a: PI touching NS found!                      0            0
( 1719)  GRTW10: (PI to adjacent BB) not over NW             0            0
( 1720)  GRTW10a: PI to adjacent NS >= 5.52 um.              0            0
( 1721)  GRTW10b: all (BB over PI) edges must abu            0            0
( 1722)  GRTW10a1: (PI to adjacent BB) over NW >=            0            0
( 1723)  GRTW10a1: (PI over NW) overlapping BB fo            0            0
( 1724)  GRTW10a1: All (((PI touching BB) over NW            0            0
( 1725)  GRTW17a: (((RX over BP) over VTSENS) ove            0            0
( 1726)  GRTW18: PI to NW space >= 3.200 um.                 0            0
( 1727)  GRTW19: PI(not over NW) not touching a P            0            0
( 1728)  GRTW260: ((RX over BP) over NW) to (PI n            0            0
( 1729)  GRTW265: (RX(not over BP) over PI) to ad            0            0
( 1730)  GRTW265a: ((RX(not over BP) touch DG) ov            0            0
( 1731)  GRTW266: (RX(over BP) not over PI) to (N            0            0
( 1732)  GR1a: (Gate over ZEROVT) width >= 0.70 u            0            0
( 1733)  GR1b: ((Gate over ZEROVT) over DG) width            0            0
( 1734)  GR10a: ((RX under PC) touching ZEROVT) w            0            0
( 1735)  GR122a: Polygonal (PC over RX) (bent gat            0            0
( 1736)  GR280a: Non-orthagonal ZEROVT shapes fou            0            0
( 1737)  GR280: ZEROVT width >= 2.40 um.                     0            0
( 1738)  GR282: ZEROVT space >= 1.88 um.                     0            0
( 1739)  GR282: ZEROVT notch >= 1.88 um.                     0            0
( 1740)  GR283: ZEROVT touching more than one RX             0            0
( 1741)  GR284: ZEROVT not within RX found!                  0            0
( 1742)  GR284: ZEROVT must be within RX == 0.30             0            0
( 1743)  GR284: ZEROVT must be within RX == 0.30             0            0
( 1744)  GR286: BP touching ZEROVT found!                    0            0
( 1745)  GR288: ZEROVT to adjacent RX >= 1.30 um.            0            0
( 1746)  GR289: ZEROVT touching NW found!                    0            0
( 1747)  GR289: ZEROVT to NW space >= 1.66 um.               0            0
( 1748)  GR289a: ZEROVT to BB space >= 1.90 um.              0            0
( 1749)  GR289a: ZEROVT touching BB found!                   0            0
( 1750)  GRZT1: ZEROVT overlap past (PC over RX)             0            0
( 1751)  GRZT2: ZEROVT vertices over (PC over RX)            0            0
( 1752)  GRZT3: ZEROVT to adjacent DG >= 1.20 um.            0            0
( 1753)  GRZT4: ZEROVT to adjacent (PC under OP)             0            0
( 1754)  GRZT5: ZEROVT touching JD found!                    0            0
( 1755)  GRZT5: ZEROVT touching RP found!                    0            0
( 1756)  GRZT5: ZEROVT touching RR found!                    0            0
( 1757)  GRZT5: ZEROVT to JD space >= 1.66 um.               0            0
( 1758)  GRZT5: ZEROVT to RP space >= 1.66 um.               0            0
( 1759)  GRZT5: ZEROVT to RR space >= 1.66 um.               0            0
( 1760)  GRZT6: ZEROVT touching PI found!                    0            0
( 1761)  GRZT6: ZEROVT to PI space >= 3.00 um.               0            0
( 1762)  GRZT9: ZEROVT touching OP found!                    0            0
( 1763)  GR790: BFMOAT width >= 10.000 um.                   0            0
( 1764)  GR792: BB to adjacent BFMOAT space >= 10            0            0
( 1765)  GR792: BFMOAT space >= 10.000 um.                   0            0
( 1766)  GR792: BFMOAT notch >= 10.000 um.                   0            0
( 1767)  GR793: BFMOAT to adjacent NW space >= 2.            0            0
( 1768)  GR795: BFMOAT to adjacent RX space >= 1.            0            0
( 1769)  GR796: BFMOAT to adjacent ZEROVT space >            0            0
( 1770)  GR799: BB touching BFMOAT found!                    0            0
( 1771)  GR799: NW touching BFMOAT found!                    0            0
( 1772)  GR799: PC touching BFMOAT found!                    0            0
( 1773)  GR799: RX touching BFMOAT found!                    0            0
( 1774)  GR799: NS touching BFMOAT found!                    0            0
( 1775)  GR799: NR touching BFMOAT found!                    0            0
( 1776)  GR799: PR touching BFMOAT found!                    0            0
( 1777)  GR799: PI touching BFMOAT found!                    0            0
( 1778)  GR500b: M1 width (max) <= 35.000 um.                0            0
( 1779)  GR500: M1 width (min) >= 0.240 um.                  0            0
( 1780)  GR501a: M1 area >= 0.172 sq.um.                     0            0
( 1781)  GR501b: M1 enclosed area >= 0.705 sq. um            0            0
( 1782)  GR502: M1 space >= 0.200 um.                        0            0
( 1783)  GR502: M1 notch >= 0.200 um.                        0            0
( 1784)  GR504:   M1(>1.48) to M1 (run >0) space             0            0
( 1785)  GR504b:  M1(>4.00) to M1 (run >0) space             0            0
( 1786)  GR504a:  M1(>1.60) to M1 (run >0) space             0            0
( 1787)  GR505a: CA not within M1 found!                     0            0
( 1788)  GR505b: CABAR not within M1 found!                  0            0
( 1789)  GR505a: CA must be within M1 >= 0.020 um            0            0
( 1790)  GR505b: CABAR must be within M1 >= 0.040            0            0
( 1791)  GR550: V1 width and length == 0.280 um.             0            0
( 1792)  GR550: V2 width and length == 0.280 um.             0            0
( 1793)  GR550: V3 width and length == 0.280 um.             0            0
( 1794)  GR550: V4 width and length == 0.280 um.             0            0
( 1795)  GR550: V5 width and length == 0.280 um.             0            0
( 1796)  GR550: V1 width and length == 0.280 um.             0            0
( 1797)  GR550: V2 width and length == 0.280 um.             0            0
( 1798)  GR550: V3 width and length == 0.280 um.             0            0
( 1799)  GR550: V4 width and length == 0.280 um.             0            0
( 1800)  GR550: V5 width and length == 0.280 um.             0            0
( 1801)  GR553a: V1 to V1 space >= 0.280 um.                 0            0
( 1802)  GR553a: V2 to V2 space >= 0.280 um.                 0            0
( 1803)  GR553a: V3 to V3 space >= 0.280 um.                 0            0
( 1804)  GR553a: V4 to V4 space >= 0.280 um.                 0            0
( 1805)  GR553a: V5 to V5 space >= 0.280 um.                 0            0
( 1806)  GR557: Non-rectangular V1 found!                    0            0
( 1807)  GR557: 45 degree V1 found!                          0            0
( 1808)  GR557: Non-rectangular V2 found!                    0            0
( 1809)  GR557: 45 degree V2 found!                          0            0
( 1810)  GR557: Non-rectangular V3 found!                    0            0
( 1811)  GR557: 45 degree V3 found!                          0            0
( 1812)  GR557: Non-rectangular V4 found!                    0            0
( 1813)  GR557: 45 degree V4 found!                          0            0
( 1814)  GR557: Non-rectangular V5 found!                    0            0
( 1815)  GR557: 45 degree V5 found!                          0            0
( 1816)  GRLEG_558: V1BAR outside of Chipring fou            0            0
( 1817)  GRLEG_558: V2BAR outside of Chipring fou            0            0
( 1818)  GRLEG_558: V3BAR outside of Chipring fou            0            0
( 1819)  GRLEG_558: V4BAR outside of Chipring fou            0            0
( 1820)  GRLEG_558: V5BAR outside of Chipring fou            0            0
( 1821)  GR560: V1BAR width == 0.20 um. (error >)            0            0
( 1822)  GR560: V1BAR width == 0.20 um. (error <)            0            0
( 1823)  GR560: V2BAR width == 0.20 um. (error >)            0            0
( 1824)  GR560: V2BAR width == 0.20 um. (error <)            0            0
( 1825)  GR560: V3BAR width == 0.20 um. (error >)            0            0
( 1826)  GR560: V3BAR width == 0.20 um. (error <)            0            0
( 1827)  GR560: V4BAR width == 0.20 um. (error >)            0            0
( 1828)  GR560: V4BAR width == 0.20 um. (error <)            0            0
( 1829)  GR560: V5BAR width == 0.20 um. (error >)            0            0
( 1830)  GR560: V5BAR width == 0.20 um. (error <)            0            0
( 1831)  GR566: V1 overlapping V1BAR found!                  0            0
( 1832)  GR566: V2 overlapping V2BAR found!                  0            0
( 1833)  GR566: V3 overlapping V3BAR found!                  0            0
( 1834)  GR566: V4 overlapping V4BAR found!                  0            0
( 1835)  GR566: V5 overlapping V5BAR found!                  0            0
( 1836)  GR566: V1BAR to V1 space >= 0.560 um.               0            0
( 1837)  GR566: V2BAR to V2 space >= 0.560 um.               0            0
( 1838)  GR566: V3BAR to V3 space >= 0.560 um.               0            0
( 1839)  GR566: V4BAR to V4 space >= 0.560 um.               0            0
( 1840)  GR566: V5BAR to V5 space >= 0.560 um.               0            0
( 1841)  GR567: V1BAR to adjacent V1BAR >= 3.60 u            0            0
( 1842)  GR567: V2BAR to adjacent V2BAR >= 3.60 u            0            0
( 1843)  GR567: V3BAR to adjacent V3BAR >= 3.60 u            0            0
( 1844)  GR567: V4BAR to adjacent V4BAR >= 3.60 u            0            0
( 1845)  GR567: V5BAR to adjacent V5BAR >= 3.60 u            0            0
( 1846)  GR567b: V1BAR notch >= 1.80 um.                     0            0
( 1847)  GR567b: V2BAR notch >= 1.80 um.                     0            0
( 1848)  GR567b: V3BAR notch >= 1.80 um.                     0            0
( 1849)  GR567b: V4BAR notch >= 1.80 um.                     0            0
( 1850)  GR567b: V5BAR notch >= 1.80 um.                     0            0
( 1851)  GR570: V1(not over K1) must be within M1            0            0
( 1852)  GR570c: V1BAR must be within M1 >= 0.08             0            0
( 1853)  GR570c: V1BAR not within M1 found!                  0            0
( 1854)  GR575a: V1 not within M2 found!                     0            0
( 1855)  GR575a1: V1 not within MT found!                    0            0
( 1856)  GR575ab: V1BAR not within M2 found!                 0            0
( 1857)  GR575ab: V1BAR must be within M2 >= 0.40            0            0
( 1858)  GR575a2: V1BAR must be within MT >= 0.40            0            0
( 1859)  GR575a2: V1BAR not within MT found!                 0            0
( 1860)  GR601b:  M2 enclosed area >= 0.705 sq.um            0            0
( 1861)  GR600:   M2 width >= 0.28 um.                       0            0
( 1862)  GR601a:  M2 area >= 0.3136 sq.um.                   0            0
( 1863)  GR602:   M2 space >= 0.28 um.                       0            0
( 1864)  GR604a: M2(>5.00) to M2 space  >= 0.60 u            0            0
( 1865)  GR604: M2(>1.60) to M2(>1.60) space >= 0            0            0
( 1866)  GR601b:  M3 enclosed area >= 0.705 sq.um            0            0
( 1867)  GR600:   M3 width >= 0.28 um.                       0            0
( 1868)  GR601a:  M3 area >= 0.3136 sq.um.                   0            0
( 1869)  GR602:   M3 space >= 0.28 um.                       0            0
( 1870)  GR604a: M3(>5.00) to M3 space  >= 0.60 u            0            0
( 1871)  GR604: M3(>1.60) to M3(>1.60) space >= 0            0            0
( 1872)  GR601b:  M4 enclosed area >= 0.705 sq.um            0            0
( 1873)  GR600:   M4 width >= 0.28 um.                       0            0
( 1874)  GR601a:  M4 area >= 0.3136 sq.um.                   0            0
( 1875)  GR602:   M4 space >= 0.28 um.                       0            0
( 1876)  GR604a: M4(>5.00) to M4 space  >= 0.60 u            0            0
( 1877)  GR604: M4(>1.60) to M4(>1.60) space >= 0            0            0
( 1878)  GR601b:  M5 enclosed area >= 0.705 sq.um            0            0
( 1879)  GR600:   M5 width >= 0.28 um.                       0            0
( 1880)  GR601a:  M5 area >= 0.3136 sq.um.                   0            0
( 1881)  GR602:   M5 space >= 0.28 um.                       0            0
( 1882)  GR604a: M5(>5.00) to M5 space  >= 0.60 u            0            0
( 1883)  GR604: M5(>1.60) to M5(>1.60) space >= 0            0            0
( 1884)  GR610: V2 not within M2 found!                      0            0
( 1885)  GR610: V3 not within M3 found!                      0            0
( 1886)  GR610: V4 not within M4 found!                      0            0
( 1887)  GR610: V5 not within M5 found!                      0            0
( 1888)  GR610c: V2BAR must be within M2 >= 0.40             0            0
( 1889)  GR610c: V2BAR not within M2 found!                  0            0
( 1890)  GR610c: V3BAR must be within M3 >= 0.40             0            0
( 1891)  GR610c: V3BAR not within M3 found!                  0            0
( 1892)  GR610c: V4BAR must be within M4 >= 0.40             0            0
( 1893)  GR610c: V4BAR not within M4 found!                  0            0
( 1894)  GR610c: V5BAR must be within M5 >= 0.40             0            0
( 1895)  GR610c: V5BAR not within M5 found!                  0            0
( 1896)  GR611: V2 not within M3 found!                      0            0
( 1897)  GR611: V2 not within MT found!                      0            0
( 1898)  GR611: V3 not within M4 found!                      0            0
( 1899)  GR611: V3 not within MT found!                      0            0
( 1900)  GR611: V4 not within M5 found!                      0            0
( 1901)  GR611: V4 not within MT found!                      0            0
( 1902)  GR611: V5 not within MT found!                      0            0
( 1903)  GR611a: V2BAR not within M3 found!                  0            0
( 1904)  GR611a: V2BAR must be within M3 >= 0.40             0            0
( 1905)  GR611a: V2BAR must be within MT >= 0.40             0            0
( 1906)  GR611a: V2BAR not within MT found!                  0            0
( 1907)  GR611a: V3BAR not within M4 found!                  0            0
( 1908)  GR611a: V3BAR must be within M4 >= 0.40             0            0
( 1909)  GR611a: V3BAR must be within MT >= 0.40             0            0
( 1910)  GR611a: V3BAR not within MT found!                  0            0
( 1911)  GR611a: V4BAR not within M5 found!                  0            0
( 1912)  GR611a: V4BAR must be within M5 >= 0.40             0            0
( 1913)  GR611a: V4BAR must be within MT >= 0.40             0            0
( 1914)  GR611a: V4BAR not within MT found!                  0            0
( 1915)  GR611a: V5BAR must be within MT >= 0.40             0            0
( 1916)  GR611a: V5BAR not within MT found!                  0            0
( 1917)  GR612: M1/M2 intersection only enclosing            0            0
( 1918)  GR612: M1/MT intersection only enclosing            0            0
( 1919)  GR640: MT width >= 0.280 um.                        0            0
( 1920)  GR641a: MT area > 0.548 sq.um.                      0            0
( 1921)  GR641b: MT enclosed area >= 0.705 sq.um.            0            0
( 1922)  GR642: MT space >= 0.280 um.                        0            0
( 1923)  GR642: MT notch >= 0.280 um.                        0            0
( 1924)  GR644:   MT(>1.60) to MT space >= 0.40 u            0            0
( 1925)  GR644a:  MT(>5.00) to MT space >= 0.60 u            0            0
( 1926)  GR644b:  MT(>35.00) to MT space >= 2.00             0            0
( 1927)  GR650a1: (LV not over (CRACKSTOP touchin            0            0
( 1928)  GR650a2: (LV over (CRACKSTOP touching GU            0            0
( 1929)  GR650b1: (DV not over (CRACKSTOP touchin            0            0
( 1930)  GR650b2: (DV over (CRACKSTOP touching GU            0            0
( 1931)  GR651a: LV area >= 550.000 sq.um.                   0            0
( 1932)  GR651b: DV area >= 480.000 sq.um.                   0            0
( 1933)  GR653b: DV space >= 11.000 um.                      0            0
( 1934)  GR653c: LV space >= 29.000 um.                      0            0
( 1935)  GR655b: (TV covered by (PADFILTR,CRACKST            0            0
( 1936)  GR655c: (TV not covered by (PADFILTR,CRA            0            0
( 1937)  GR656b: (TV covered by PADFILTR) area >=            0            0
( 1938)  GR656c: (TV not covered by PADFILTR) are            0            0
( 1939)  GR657b: (TV covered by PADFILTR) space >            0            0
( 1940)  GR657c: (TV not covered by PADFILTR) spa            0            0
( 1941)  GR658ab: TV within {GUARDEDGE,(CHIPEDGE             0            0
( 1942)  GR658c: DV within {GUARDEDGE,(CHIPEDGE n            0            0
( 1943)  GR658c1: DV within {GUARDEDGE,(CHIPEDGE             0            0
( 1944)  GR658d: LV within {GUARDEDGE,(CHIPEDGE n            0            0
( 1945)  GR658d1: LV within {GUARDEDGE,(CHIPEDGE             0            0
( 1946)  GRBEOL1: DV found in C4 design!                     0            0
( 1947)  GRBEOL2: (MPW_EDGE touching DV) touching            0            0
( 1948)  GRA500b: M1(over M1CHEXCL) width (max) <            0            0
( 1949)  GRA504d: M1(over M1CHEXCL) (>11.50 wide)            0            0
( 1950)  GRA504a: M1(over M1CHEXCL) (>2.40 and <=            0            0
( 1951)  GRA504b: M1(over M1CHEXCL) (>5.30 and <=            0            0
( 1952)  GRA504c: M1(over M1CHEXCL) (>8.40 and <=            0            0
( 1953)  GRJD1: JD width >= 1.000 um.                        0            0
( 1954)  GRJD2: JD space >= 1.000 um.                        0            0
( 1955)  GRJD2: JD notch >= 1.000 um.                        0            0
( 1956)  GRJD3: RX straddling JD found!                      0            0
( 1957)  GRJD3: RX within JD >= 0.320 um.                    0            0
( 1958)  GRJD4: JD to PC space >= 1.040 um.                  0            0
( 1959)  GRJD4a: JD to RX space >= 0.580 um.                 0            0
( 1960)  GRJD5: JD touching OP found!                        0            0
( 1961)  GRJD5: JD touching PC found!                        0            0
( 1962)  GRJD5: JD touching RN found!                        0            0
( 1963)  GRJD5: JD touching RP found!                        0            0
( 1964)  GRJD5: JD touching RR found!                        0            0
( 1965)  GRJD6: JD touching (RX not touching NS)             0            0
( 1966)  GRMOSVAR1: MOSVAR width >= 0.440 um.                0            0
( 1967)  GRMOSVAR2: MOSVAR space >= 0.440 um.                0            0
( 1968)  GRMOSVAR2: MOSVAR notch >= 0.440 um.                0            0
( 1969)  GRMOSVAR3: MOSVAR touching DG found!                0            0
( 1970)  GRMOSVAR3: MOSVAR touching NS found!                0            0
( 1971)  GRMOSVAR3: MOSVAR touching RP found!                0            0
( 1972)  GRMOSVAR3: MOSVAR touching RR found!                0            0
( 1973)  GRMOSVAR3: MOSVAR touching (ZEROVT sized            0            0
( 1974)  GRMOSVAR3a: (MOSVAR over NW) touching BP            0            0
( 1975)  GRMOSVAR4: MOSVAR to BB space >= 0.440 u            0            0
( 1976)  GRMOSVAR4: MOSVAR to DG space >= 0.440 u            0            0
( 1977)  GRMOSVAR4: MOSVAR to NW space >= 0.440 u            0            0
( 1978)  GRMOSVAR4: MOSVAR to (ZEROVT sized by +0            0            0
( 1979)  GRMOSVAR5: MOSVAR to RX space >= 0.340 u            0            0
( 1980)  GRMOSVAR5a: MOSVAR to (PC over RX) space            0            0
( 1981)  GRMOSVAR6: ((RX not over BIPOLAR) touch             0            0
( 1982)  GRMOSVAR6: ((RX not over BIPOLAR) touch             0            0
( 1983)  GRMOSVAR6a: ((RX over BIPOLAR)touch MOSV            0            0
( 1984)  GRMOSVAR6a: ((RX over BIPOLAR)touch MOSV            0            0
( 1985)  GRMOSVAR8: (MOSVAR over PI) touching TG             0            0
( 1986)  GRNCAP1: { NW touching [ (PC over RX) NO            0            0
( 1987)  GRPCAP1: (PC over RX) must be within BP             0            0
( 1988)  GRPCAP1: (PC over RX ) within BP >= 0.36            0            0
( 1989)  GRPCAP2: { ( PI  NOT over NW ) touching             0            0
( 1990)  GRVLNPN01: BIPOLAR cannot touch GRLOGIC             0            0
( 1991)  GRVLNPN02: (((PC over RX) touching BIPOL            0            0
( 1992)  GRVLNPN03: BIPOLAR must touch (MOSVAR ov            0            0
( 1993)  GRVLNPN04: BIPOLAR within (PI not over N            0            0
( 1994)  GRVLNPN04: BIPOLAR within (PI not over N            0            0
( 1995)  GRVLNPN04b: (Union( NW,PI) touching BIPO            0            0
( 1996)  GRVLNPN04b: (Union( NW,PI) touching BIPO            0            0
( 1997)  GRVLNPN05: (PC over RX) width under BIPO            0            0
( 1998)  GRVLNPN05: (PC over RX) width under BIPO            0            0
( 1999)  GRVLNPN06: ((NW or PI) touching BIPOLAR)            0            0
( 2000)  GRVLNPN06: ((NW or PI) touching BIPOLAR)            0            0
( 2001)  GRJC1: JC space >= 0.900 um.                        0            0
( 2002)  GRJC1: JC notch >= 0.900 um.                        0            0
( 2003)  GRJC2: JC width >= 1.380 um.                        0            0
( 2004)  GRJC2a: JC minimum area >= 6.000 um.                0            0
( 2005)  GRJC3: JC not within PI found!                      0            0
( 2006)  GRJC3: JC must be within PI >= 1.940 um.            0            0
( 2007)  GRJC4: JC to NW space >= 0.940 um.                  0            0
( 2008)  GRJC5: (RX not over BP) must be within J            0            0
( 2009)  GRJC6: JC to (AS DG JD RR RP RN BB  NR P            0            0
( 2010)  GRJC6: JC touch (AS DG JD RR RP RN BB  N            0            0
( 2011)  GRJC7: ((JC not over (RX over BP)) touch            0            0
( 2012)  GRJC12: All JC Edges must abut or be cov            0            0
( 2013)  GRJC8: (RX over BP) over JC) minimum  wi            0            0
( 2014)  GRJC9: (RX over BP) over JC) maximum  wi            0            0
( 2015)  GRJC10: ((RX not over BP) to (RX over BP            0            0
( 2016)  GRJC10: ((RX not over BP) to (RX over BP            0            0
( 2017)  GRJC11: (RX over BP) overlap past JC >=             0            0
( 2018)  GRJC13: Non-rectangular JC found!                   0            0
( 2019)  GRJC13: 45 degree JC found!                         0            0
( 2020)  GRJC14: Non-rectangular ((RX over BP) ov            0            0
( 2021)  GRJC14: 45 degree ((RX over BP) over JC)            0            0
( 2022)  GRJC15: ((PI not over NW) touching JC) t            0            0
( 2023)  GRJC16: ((PI not over NW) touching JC) c            0            0
( 2024)  GRJC942: DV terminal Pad to JC space >=             0            0
( 2025)  GRJC942: TV terminal Pad to JC space >=             0            0
( 2026)  GRJC951: DV terminal Pad touching JC fou            0            0
( 2027)  GRJC951: LV terminal Pad touching JC fou            0            0
( 2028)  GRJC990: BP in chip guard ring touching             0            0
( 2029)  GRJCPN001: JC shape straddling LOGOBND n            0            0
( 2030)  GRBP2ND1: All BP2ND edges must abut (BB             0            0
( 2031)  GRBP2ND2: BP2ND to (AS NS NW DG TG JD RR            0            0
( 2032)  GRBP2ND2: BP2ND touch (AS NS NW DG TG JD            0            0
( 2033)  GRBP2ND3: (RX not over PD) touching BP2N            0            0
( 2034)  GRBP2ND350: BP2ND width (min) >= 0.340 u            0            0
( 2035)  GRBP2ND351a: BP2ND minimum area >= 0.387            0            0
( 2036)  GRBP2ND351b: BP2ND enclosed area >= 0.38            0            0
( 2037)  GRBP2ND352a: BP2ND space >= 0.340 um.               0            0
( 2038)  GRBP2ND352a: BP2ND notch >= 0.340 um.               0            0
( 2039)  GRBP2ND352b: BP2ND touching BP is prohib            0            0
( 2040)  GRBP2ND352b: BP2ND to BP space >= 0.340             0            0
( 2041)  GRE1aa: E1(not under IND_FLT) width (max            0            0
( 2042)  GRE1ab: E1(under (IND_FLT sized by 25 pe            0            0
( 2043)  GRE1a: E1 width (min) >= 1.500 um.                  0            0
( 2044)  GRE1b: E1 (not IND) space >= 2.000 um.              0            0
( 2045)  GRE1b: E1 (IND) space >= 2.000 um.                  0            0
( 2046)  GRE1b: E1 (IND) to E1 (not IND) space >=            0            0
( 2047)  GRE1e: FT not within E1 found!                      0            0
( 2048)  GRE1e: FT must be within E1 >= 1.000 um.            0            0
( 2049)  GRE1f: FTBAR not within E1 found!                   0            0
( 2050)  GRE1f: FTBAR must be within E1 >= 1.000             0            0
( 2051)  GRE1g: E1 area >= 9.000 sq.um.                      0            0
( 2052)  GRE1S2: E1(>11.50) space >=  3.50 um.               0            0
( 2053)  GRE1S1: E1(> 8.00 and <=11.50) space >=             0            0
( 2054)  GRE1A7: E1 enclosed area touching (E1 wi            0            0
( 2055)  GRE1A1: E1 enclosed area touching (E1 wi            0            0
( 2056)  GRE1A2: E1 enclosed area touching (E1 wi            0            0
( 2057)  GRE1A3: E1 enclosed area touching (E1 wi            0            0
( 2058)  GRE1A4: E1 enclosed area touching (E1 wi            0            0
( 2059)  GRE1A5: E1 enclosed area touching (E1 wi            0            0
( 2060)  GRE1A6: E1 enclosed area touching (E1 wi            0            0
( 2061)  GRE2a: E2 width (min) >= 2.000 um.                  0            0
( 2062)  GRE2b: E2 space >= 2.000 um.                        0            0
( 2063)  GRE2b: E2 notch >= 2.000 um.                        0            0
( 2064)  GRE2c: E2 area (min) >= 4.000 sq.um.                0            0
( 2065)  GRE2d: E2 not within E1 found!                      0            0
( 2066)  GRE2d: E2 must be within E1 >= 0.600 um.            0            0
( 2067)  GRE2e: E2 not within MA found!                      0            0
( 2068)  GRE2e: E2(not under IND) must be within             0            0
( 2069)  GRE2e: E2(under IND) must be within MA >            0            0
( 2070)  GRE2f: E1/MA intersection only enclosing            0            0
( 2071)  GRE2f: E1/MA intersection with two small            0            0
( 2072)  GRFT1: FT width == 1.24 um.(error <)                0            0
( 2073)  GRFT1: FT width == 1.24 um.(error >)                0            0
( 2074)  GRFT2: FT space >= 2.000 um.                        0            0
( 2075)  GRFT3: FTBAR(outside IND_FLT) width == 1            0            0
( 2076)  GRFT3: FTBAR(over IND_FLT) width == 1.24            0            0
( 2077)  GRFT3: FTBAR(outside IND_FLT) width == 1            0            0
( 2078)  GRFT3: FTBAR(over IND_FLT) width == 1.24            0            0
( 2079)  GRFT4: FTBAR length (min) <= 1.260 um.              0            0
( 2080)  GRLEG_FT5: FTBAR length (max) <= 20.000             0            0
( 2081)  GRFT6: FT touching FTBAR found!                     0            0
( 2082)  GRFT6: FT to FTBAR space >= 2.000 um.               0            0
( 2083)  GRFT7: FTBAR space (run length <= 5.0) >            0            0
( 2084)  GRFT8: FTBAR space (run length > 5.0) >=            0            0
( 2085)  GRFT9: FT not within MT found!                      0            0
( 2086)  GRFT9: FT must be within MT >= 1.000 um.            0            0
( 2087)  GRFT10: FTBAR not within MT found!                  0            0
( 2088)  GRFT10: FTBAR must be within MT >= 1.000            0            0
( 2089)  GRLEG_FT11: Non-retangular FT found!                0            0
( 2090)  GRLEG_FT11: Non-retangular FTBAR found!             0            0
( 2091)  GRLEG_FT12: 45 degree FT found!                     0            0
( 2092)  GRLEG_FT12: 45 degree FTBAR found!                  0            0
( 2093)  GRAM1: AM width >= 2.000 um.                        0            0
( 2094)  GRAM1a: AM area >= 10.000 sq.um.                    0            0
( 2095)  GRAM2: AM to AM space >= 2.800 um.                  0            0
( 2096)  GRAM2a: AM space for AM edges over the s            0            0
( 2097)  GRAM2aa: AM space for AM edges (within (            0            0
( 2098)  GRAM2b: (AM not over IND_FILT)(>10.00) t            0            0
( 2099)  GRAM2c:  AM(>50.00) to AM space >= 5.00             0            0
( 2100)  GRAM2ba: AM over (IND_FILT +25.0)(>10.00            0            0
( 2101)  GRAM2b2: AM over (IND_FILT +50.0)(>25.00            0            0
( 2102)  GRAM3: FT not within AM found!                      0            0
( 2103)  GRAM3: FTBAR not within AM found!                   0            0
( 2104)  GRAM3: FT must be within AM >= 1.000 um.            0            0
( 2105)  GRAM3: FTBAR must be within AM >= 1.000             0            0
( 2106)  GRAM4: DV(within {GUARDEDGE,(CHIPEDGE no            0            0
( 2107)  GRAM4: LV(within {GUARDEDGE,(CHIPEDGE no            0            0
( 2108)  GRMA1: MA width >= 2.000 um.                        0            0
( 2109)  GRMA1a: MA minimum area >= 10.00 sq.um.             0            0
( 2110)  GRMA2: MA space >= 2.800 um.                        0            0
( 2111)  GRMA2a: MA space (within (E2 not over (L            0            0
( 2112)  GRMA2aa: MA space for MA edges (within (            0            0
( 2113)  GRMA2b: (MA not over IND_FILT)(>10.00) t            0            0
( 2114)  GRMA2c:  MA(>50.00) to MA space >= 5.00             0            0
( 2115)  GRMA2ba: MA over (IND_FILT +25.0)(>10.00            0            0
( 2116)  GRMA2b2: MA over (IND_FILT +50.0)(>25.00            0            0
( 2117)  GRMA4: DV(within {GUARDEDGE,(CHIPEDGE no            0            0
( 2118)  GRMA4: LV(within {GUARDEDGE,(CHIPEDGE no            0            0
( 2119)  GRML1: ML width >= 2.400 um.                        0            0
( 2120)  GRML2: ML space >= 2.400 um.                        0            0
( 2121)  GRML3: FT not within ML found!                      0            0
( 2122)  GRML3: FTBAR not within ML found!                   0            0
( 2123)  GRML3: FT must be within ML >= 0.600 um.            0            0
( 2124)  GRML3: FTBAR must be within ML >= 0.600             0            0
( 2125)  GRML4: DV(within {GUARDEDGE,(CHIPEDGE no            0            0
( 2126)  GRML4: LV(within {GUARDEDGE,(CHIPEDGE no            0            0
( 2127)  GRMZ1: MZ width >= 2.00 um.                         0            0
( 2128)  GRMZ1a: MZ area >= 10.00 um.                        0            0
( 2129)  GRMZ2: MZ space >= 2.80 um.                         0            0
( 2130)  GRMZ2a: MZ space for MZ edges within ((F            0            0
( 2131)  GRMZ2aa: mz space for mz edges within ((            0            0
( 2132)  GRMZ2b: (MZ not over IND_FILT)(>10.00) t            0            0
( 2133)  GRMZ2c:  MZ(>50.00) to MZ space >= 5.00             0            0
( 2134)  GRMZ2ba: MA over (IND_FILT +25.0)(>10.00            0            0
( 2135)  GRMZ2b2: MA over (IND_FILT +50.0)(>25.00            0            0
( 2136)  GRMZ3: FT not within MZ found!                      0            0
( 2137)  GRMZ3: FTBAR not within MZ found!                   0            0
( 2138)  GRMZ3: FT must be within MZ >= 1.000 um.            0            0
( 2139)  GRMZ3: FTBAR must be within MZ >= 1.000             0            0
( 2140)  GRMZ4: (TV within {GUARDEDGE,(CHIPEDGE n            0            0
( 2141)  GRMZ5: MZ touching (CHIPEDGE touching DV            0            0
( 2142)  GRQCAP1d: QT width (max) <= 1,000.0 um.             0            0
( 2143)  GRQCAP1d: HT width (max) <= 1,000.0 um.             0            0
( 2144)  GRQCAP1: QT width >= 4.000 um.                      0            0
( 2145)  GRQCAP1a: HT width >= 4.000 um.                     0            0
( 2146)  GRQCAP1b: QT area (max per shape) <= 100            0            0
( 2147)  GRQCAP1b: HT area (max per shape) <= 100            0            0
( 2148)  GRQCAP2a: Non-rectangular QT shapes foun            0            0
( 2149)  GRQCAP2a: Non-rectangular HT shapes foun            0            0
( 2150)  GRQCAP2b: QT MIM aspect ratio > 3.0 foun            0            0
( 2151)  GRQCAP2b: HT MIM aspect ratio > 3.0 foun            0            0
( 2152)  GRQCAP2: QT space >= 2.200 um.                      0            0
( 2153)  GRQCAP2a1: HT space >= 3.600 um.                    0            0
( 2154)  GRQCAP3: QT not within MT found!                    0            0
( 2155)  GRQCAP3a: HT not within QT found!                   0            0
( 2156)  GRQCAP3: QT must be within MT >= 0.700 u            0            0
( 2157)  GRQCAP3a: HT must be within QT >= 0.700             0            0
( 2158)  GRQCAP4: QT(touching HT) not touching FT            0            0
( 2159)  GRQCAP4: FT straddling QT found!                    0            0
( 2160)  GRQCAP4b: FT straddling HT found!                   0            0
( 2161)  GRQCAP4a: (MT touching QT) touching V1 f            0            0
( 2162)  GRQCAP4a: (MT touching QT) touching V2 f            0            0
( 2163)  GRQCAP4a: (MT touching QT) touching V3 f            0            0
( 2164)  GRQCAP4a: (MT touching QT) touching V4 f            0            0
( 2165)  GRQCAP4a: (MT touching QT) touching V5 f            0            0
( 2166)  GRQCAP4: FT within QT >= 1.200 um.                  0            0
( 2167)  GRQCAP4b: FT within HT >= 1.200 um.                 0            0
( 2168)  GRQCAP4c: FT to HT space >= 1.000 um.               0            0
( 2169)  GRQCAP5: FT to adjacent QT >= 1.000 um.             0            0
( 2170)  GRQCAP5: FTBAR to adjacent QT >= 1.000 u            0            0
( 2171)  GRQCAP6: FTBAR touching QT found!                   0            0
( 2172)  GRQCAP8b: QT straddling BB(not touching             0            0
( 2173)  GRQCAP8b: QT straddling NW(not touching             0            0
( 2174)  GRQCAP8b: QT within BB(not touching (PC             0            0
( 2175)  GRQCAP8b: QT within NW(not touching (PC             0            0
( 2176)  GRQCAP10: (MT touching QT) to MT space >            0            0
( 2177)  GRQCAP12b: QT(covered by NW) within NW >            0            0
( 2178)  GRQCAP16: NS to adjacent QT(not touching            0            0
( 2179)  GRQCAP16b: NW to adjacent QT(not touchin            0            0
( 2180)  GRQCAP21: QT shapes must be covered by M            0            0
( 2181)  GRQCAP22: HT and MIM_HK cannot exist in             0            0
( 2182)  GRQCAP22a: (MIM_HK not touching QT) foun            0            0
( 2183)  GRQCAP23a: (Ratio of (FT over (QT touchi            0            0
( 2184)  GRQCAP23b: (Ratio of (FT over HT) area t            0            0
( 2185)  GRQCAP30: QT shapes must be covered by M            0            0
( 2186)  GRQCAP30: MIM_HD and HT can not exist in            0            0
( 2187)  GRQCAP30a: (MIM_HD not covering QT) foun            0            0
( 2188)  GRQCAP30a: (MIM_HD partly covering QT) f            0            0
( 2189)  GRQCAP33: MIM_HD touching MIM_HK found !            0            0
( 2190)  GRQCAP34: MIM_HD MIM_HK cannot exist in             0            0
( 2191)  GRIND10b: IND_FILT touching ( CHIPEDGE t            0            0
( 2192)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2193)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2194)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2195)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2196)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2197)  GRIND11: M1 straddling IND_FLT found!               0            0
( 2198)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2199)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2200)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2201)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2202)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2203)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2204)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2205)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2206)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2207)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2208)  GRIND11: RX straddling IND_FLT found!               0            0
( 2209)  GRIND11: Invalid layer under IND_FLT fou            0            0
( 2210)  GRIND12: NS to IND_FILT space >= 4.600 u            0            0
( 2211)  GRIND13: AM(over IND_FLT) not covered by            0            0
( 2212)  GRIND13: E1(over IND_FLT) not covered by            0            0
( 2213)  GRIND13: MA(over IND_FLT) not covered by            0            0
( 2214)  GRIND13: ML(over IND_FLT) not covered by            0            0
( 2215)  GRIND16: (BB touch IND_FLT) touching BP             0            0
( 2216)  GRIND16: (BB touch IND_FLT) touching (PC            0            0
( 2217)  GRIND16: (BB touch IND_FLT) touching (RX            0            0
( 2218)  GRIND23: SHORTED INDUCTOR COILS FOUND!              0            0
( 2219)  GRIND23a: E1 over IND_FILT must match ex            0            0
( 2220)  GRIND23b: M3 over IND_FILT must match ex            0            0
( 2221)  GRIND23b: M4 over IND_FILT must match ex            0            0
( 2222)  GRIND23b: M5 over IND_FILT must match ex            0            0
( 2223)  GRIND23b: MT over IND_FILT must match ex            0            0
( 2224)  GRTL1b: (AM over TLINE) width (max) <= 2            0            0
( 2225)  GRTL1b: (MA over TLINE) width (max) <= 2            0            0
( 2226)  GRTL1b: (ML over TLINE) width (max) <= 2            0            0
( 2227)  GRTL2a: TLINE overlap past AM >= 20.00 u            0            0
( 2228)  GRTL2a: TLINE overlap past MA >= 20.00 u            0            0
( 2229)  GRTL2a: TLINE overlap past ML >= 20.00 u            0            0
( 2230)  GRTL2b: AM overlap past TLINE >= 1.00 um            0            0
( 2231)  GRTL2b: MA overlap past TLINE >= 1.00 um            0            0
( 2232)  GRTL2b: ML overlap past TLINE >= 1.00 um            0            0
( 2233)  GRTL3b: (AM over TLINE) length (min) >=             0            0
( 2234)  GRTL3b: (MA over TLINE) length (min) >=             0            0
( 2235)  GRTL3b: (ML over TLINE) length (min) >=             0            0
( 2236)  GRTL3a: (AM over TLINE) area (min) >= 40            0            0
( 2237)  GRTL3a: (MA over TLINE) area (min) >= 40            0            0
( 2238)  GRTL3a: (ML over TLINE) area (min) >= 40            0            0
( 2239)  GRTL4b: (AM over TLINE) length (max) >=             0            0
( 2240)  GRTL4b: (MA over TLINE) length (max) >=             0            0
( 2241)  GRTL4b: (ML over TLINE) length (max) >=             0            0
( 2242)  GRTL4a: (AM over TLINE) area (max) >= 37            0            0
( 2243)  GRTL4a: (MA over TLINE) area (max) >= 37            0            0
( 2244)  GRTL4a: (ML over TLINE) area (max) >= 37            0            0
( 2245)  GRTL5: (AM over TLINE) not within BB fou            0            0
( 2246)  GRTL5: (MA over TLINE) not within BB fou            0            0
( 2247)  GRTL5: (ML over TLINE) not within BB fou            0            0
( 2248)  GRTL5: (AM over TLINE) must be within BB            0            0
( 2249)  GRTL5: (AM over TLINE) must be within BB            0            0
( 2250)  GRTL5: (AM over TLINE) must be within BB            0            0
( 2251)  GRTL6a: Invalid layer under TLINE found!            0            0
( 2252)  GRTL6a: Invalid layer under TLINE found!            0            0
( 2253)  GRTL6a: Invalid layer under TLINE found!            0            0
( 2254)  GRTL6a: Invalid layer under TLINE found!            0            0
( 2255)  GRTL6a: Invalid layer under TLINE found!            0            0
( 2256)  GRTL6a: Invalid layer under TLINE found!            0            0
( 2257)  GRTL6a: Invalid layer under TLINE found!            0            0
( 2258)  GRTL6a: Invalid layer under TLINE found!            0            0
( 2259)  GRTL6a: Invalid layer under TLINE found!            0            0
( 2260)  GRTL6a: Invalid layer under TLINE found!            0            0
( 2261)  GRTL6b: (AM over TLINE) space >= 40.00 u            0            0
( 2262)  GRTL6b: (MA over TLINE) space >= 40.00 u            0            0
( 2263)  GRTL6b: (ML over TLINE) space >= 40.00 u            0            0
( 2264)  GRTL9: Non-rectangular (AM over TLINE) f            0            0
( 2265)  GRTL9: Non-rectangular (MA over TLINE) f            0            0
( 2266)  GRTL9: Non-rectangular (ML over TLINE) f            0            0
( 2267)  GRTL10: (AM over TLINE) touching (LV,DV,            0            0
( 2268)  GRTL10: (MA over TLINE) touching (LV,DV,            0            0
( 2269)  GRTL10: (ML over TLINE) touching (LV,DV,            0            0
( 2270)  GRTL10: (AM over TLINE) to (LV,DV,TV) sp            0            0
( 2271)  GRTL10: (MA over TLINE) to (LV,DV,TV) sp            0            0
( 2272)  GRTL10: (ML over TLINE) to (LV,DV,TV) sp            0            0
( 2273)  GR780: PCING width == 0.160 um.(error >             0            0
( 2274)  GR780: PCING width == 0.160 um.(error <             0            0
( 2275)  GR781b: Cells named with 'IPCI' other th            0            0
( 2276)  GR782: PCING to BONDPAD space >= 0.420 u            0            0
( 2277)  GR782: PCING to IND_FILT space >= 0.420             0            0
( 2278)  GR782: PCING to PCING space >= 0.420 um.            0            0
( 2279)  GR782: PCING to PC    space >= 0.420 um.            0            0
( 2280)  GR782: PCING to RX    space >= 0.420 um.            0            0
( 2281)  GR782: PCING to CA    space >= 0.420 um.            0            0
( 2282)  GR782: PCING to CABAR space >= 0.420 um.            0            0
( 2283)  GR782: PCING touching (PC, RX, BONDPAD,             0            0
( 2284)  GR783: PCING arm length (from corner to             0            0
( 2285)  GR784: Union(CHIPEDGE,MPW_EDGE,CRACKSTOP            0            0
( 2286)  GR784: Union(CHIPEDGE,MPW_EDGE,CRACKSTOP            0            0
( 2287)  GRDM001: DS_MATCH minspace >= 0.100um.              0            0
( 2288)  GRDM002: BB touching CHIPEDGE found!                0            0
( 2289)  GRDM002: BFMOAT touching CHIPEDGE found!            0            0
( 2290)  GRDM002: IND_FILT touching CHIPEDGE foun            0            0
( 2291)  GRDM002: BONDPAD touching CHIPEDGE found            0            0
( 2292)  GRDM002: PCEXCLUD touching CHIPEDGE foun            0            0
( 2293)  GRDM002: RXEXCLUD touching CHIPEDGE foun            0            0
( 2294)  GRDM002: LOGOBND touching CHIPEDGE found            0            0
( 2295)  GRDM003: DS_MATCH area (max per shape) <            0            0
( 2296)  GRDMPN001: DS_MATCH straddling LOGOBND f            0            0
( 2297)  GREF01: PCFUSE width == 0.18 um.(error >            0            0
( 2298)  GREF01: PCFUSE width == 0.18 um.(error <            0            0
( 2299)  GREF02: PCFUSE length == 1.20 um.(error             0            0
( 2300)  GREF02: PCFUSE length == 1.20 um.(error             0            0
( 2301)  GREF03: Non-rectangular PCFUSE found!               0            0
( 2302)  GREF03a: Non-rectangular (PC touching PC            0            0
( 2303)  GREF03: 45 degree PCFUSE found                      0            0
( 2304)  GREF03a: 45 degree (PC touching PCFUSE)             0            0
( 2305)  GREF04: PCFUSE space >= 2.50 um.                    0            0
( 2306)  GREF05: PCFUSE over BB found!                       0            0
( 2307)  GREF05: PCFUSE over BFMOAT found!                   0            0
( 2308)  GREF05: PCFUSE over CA found!                       0            0
( 2309)  GREF05: PCFUSE over DG found!                       0            0
( 2310)  GREF05: PCFUSE over K1 found!                       0            0
( 2311)  GREF05: PCFUSE over M1 found!                       0            0
( 2312)  GREF05: PCFUSE over M2 found!                       0            0
( 2313)  GREF05: PCFUSE over MT found!                       0            0
( 2314)  GREF05: PCFUSE over NS found!                       0            0
( 2315)  GREF05: PCFUSE over NW found!                       0            0
( 2316)  GREF05: PCFUSE over OP found!                       0            0
( 2317)  GREF05: PCFUSE over PC found!                       0            0
( 2318)  GREF05: PCFUSE over PI found!                       0            0
( 2319)  GREF05: PCFUSE over QT found!                       0            0
( 2320)  GREF05: PCFUSE over RP found!                       0            0
( 2321)  GREF05: PCFUSE over RR found!                       0            0
( 2322)  GREF05: PCFUSE over RX found!                       0            0
( 2323)  GREF05: PCFUSE over VNCAP_M1 found!                 0            0
( 2324)  GREF05: PCFUSE over VNCAP_M2 found!                 0            0
( 2325)  GREF05: PCFUSE over VNCAP_M3 found!                 0            0
( 2326)  GREF05: PCFUSE over VNCAP_M4 found!                 0            0
( 2327)  GREF05: PCFUSE over VNCAP_M5 found!                 0            0
( 2328)  GREF05: PCFUSE over VNCAP_MT found!                 0            0
( 2329)  GREF05: PCFUSE over JD found!                       0            0
( 2330)  GREF06: PCFUSE to BB space >= 2.50 um.              0            0
( 2331)  GREF06: PCFUSE to BFMOAT space >= 2.50 u            0            0
( 2332)  GREF06: PCFUSE to DG space >= 2.50 um.              0            0
( 2333)  GREF06: PCFUSE to K1 space >= 2.50 um.              0            0
( 2334)  GREF06: PCFUSE to M2 space >= 2.50 um.              0            0
( 2335)  GREF06: PCFUSE to MT space >= 2.50 um.              0            0
( 2336)  GREF06: PCFUSE to NS space >= 2.50 um.              0            0
( 2337)  GREF06: PCFUSE to NW space >= 2.50 um.              0            0
( 2338)  GREF06: PCFUSE to OP space >= 2.50 um.              0            0
( 2339)  GREF06: PCFUSE to PI space >= 2.50 um.              0            0
( 2340)  GREF06: PCFUSE to QT space >= 2.50 um.              0            0
( 2341)  GREF06: PCFUSE to RP space >= 2.50 um.              0            0
( 2342)  GREF06: PCFUSE to RR space >= 2.50 um.              0            0
( 2343)  GREF06: PCFUSE to RX space >= 2.50 um.              0            0
( 2344)  GREF06: PCFUSE to V1 space >= 2.50 um.              0            0
( 2345)  GREF06: PCFUSE to VNCAP_M1 space >= 2.50            0            0
( 2346)  GREF06: PCFUSE to VNCAP_M2 space >= 2.50            0            0
( 2347)  GREF06: PCFUSE to VNCAP_M3 space >= 2.50            0            0
( 2348)  GREF06: PCFUSE to VNCAP_M4 space >= 2.50            0            0
( 2349)  GREF06: PCFUSE to VNCAP_M5 space >= 2.50            0            0
( 2350)  GREF06: PCFUSE to VNCAP_MT space >= 2.50            0            0
( 2351)  GREF06: PCFUSE to JD space >= 2.50 um.              0            0
( 2352)  GREF07a: PCFUSE not within BP found!                0            0
( 2353)  GREF07b: (PC touching PCFUSE) not within            0            0
( 2354)  GREF07a: PCFUSE must be within BP >= 0.3            0            0
( 2355)  GREF07b: (PC touching PCFUSE) must be wi            0            0
( 2356)  GREF08a: PCFUSE abutting more than 1 ano            0            0
( 2357)  GREF08a: PCFUSE abutting more than 1 cat            0            0
( 2358)  GREF08: PCFUSE (small end) not abutting             0            0
( 2359)  GREF08b: PCFUSE to (PC not touching PCFU            0            0
( 2360)  GREF09: PCFUSE to (M1 not touching (PC t            0            0
( 2361)  GREF10: (PC touching PCFUSE) not touchin            0            0
( 2362)  GREF10: (PC touching PCFUSE) touching le            0            0
( 2363)  GREF10: (PC touching PCFUSE) touching mo            0            0
( 2364)  GREF11a: (PC touching PCFUSE) (anode) wi            0            0
( 2365)  GREF11a: (PC touching PCFUSE) (anode) wi            0            0
( 2366)  GREF11b: (PC touching PCFUSE) (anode) le            0            0
( 2367)  GREF11b: (PC touching PCFUSE) (anode) le            0            0
( 2368)  GREF12b: (PC touching PCFUSE) (cathode)             0            0
( 2369)  GREF12a: (PC touching PCFUSE) (cathode)             0            0
( 2370)  GREF12a: (PC touching PCFUSE) (cathode)             0            0
( 2371)  GREF12b: (PC touching PCFUSE) (cathode)             0            0
( 2372)  GREF13: (M1 touching (PC touching PCFUSE            0            0
( 2373)  GREF14: (M1 touching (PC touching PCFUSE            0            0
( 2374)  GREF15: PCFUSE to (M1 touching (PC touch            0            0
( 2375)  GREF16: PCFUSE not centered on PC anode             0            0
( 2376)  GREF16: PCFUSE not centered on PC cathod            0            0
( 2377)  GREF18: (BP touching PCFUSE) width >= 0.            0            0
( 2378)  GREF19: (BP touching PCFUSE) touching BB            0            0
( 2379)  GREF19: (BP touching PCFUSE) touching DG            0            0
( 2380)  GREF19: (BP touching PCFUSE) touching MO            0            0
( 2381)  GREF19: (BP touching PCFUSE) touching NW            0            0
( 2382)  GREF19: (BP touching PCFUSE) touching (P            0            0
( 2383)  GREF19: (BP touching PCFUSE) touching (Z            0            0
( 2384)  GREF19: (BP touching PCFUSE) to BB space            0            0
( 2385)  GREF19: (BP touching PCFUSE) to DG space            0            0
( 2386)  GREF19: (BP touching PCFUSE) to MOSVAR s            0            0
( 2387)  GREF19: (BP touching PCFUSE) to NW space            0            0
( 2388)  GREF19: (BP touching PCFUSE) to (PC over            0            0
( 2389)  GREF19: (BP touching PCFUSE) to (ZEROVT             0            0
( 2390)  GREF19a: (BP touching PCFUSE) to TG, for            0            0
( 2391)  GREF20: (BP touching PCFUSE) touching (B            0            0
( 2392)  GREF20: (BP touch PCFUSE) touch (BP touc            0            0
( 2393)  GREF20: (BP touching PCFUSE) touching (B            0            0
( 2394)  GRVNCAP1: VNCAPM1 minimum width >= 1.00             0            0
( 2395)  GRVNCAP1: VNCAPM2 minimum width >= 1.00             0            0
( 2396)  GRVNCAP1: VNCAPM3 minimum width >= 1.00             0            0
( 2397)  GRVNCAP1: VNCAPM4 minimum width >= 1.00             0            0
( 2398)  GRVNCAP1: VNCAPM5 minimum width >= 1.00             0            0
( 2399)  GRVNCAP1: VNCAPMT minimum width >= 1.00             0            0
( 2400)  GRVNCAP2: VNCAP_M1 area must be < 100,00            0            0
( 2401)  GRVNCAP2: VNCAP_M2 area must be < 100,00            0            0
( 2402)  GRVNCAP2: VNCAP_M3 area must be < 100,00            0            0
( 2403)  GRVNCAP2: VNCAP_M4 area must be < 100,00            0            0
( 2404)  GRVNCAP2: VNCAP_M5 area must be < 100,00            0            0
( 2405)  GRVNCAP2: VNCAP_MT area must be < 100,00            0            0
( 2406)  GRVNCAP3: (M1 over VNCAP_M1) width == 0.            0            0
( 2407)  GRVNCAP3: (M2 over VNCAP_M2) width == 0.            0            0
( 2408)  GRVNCAP3: (M3 over VNCAP_M3) width == 0.            0            0
( 2409)  GRVNCAP3: (M4 over VNCAP_M4) width == 0.            0            0
( 2410)  GRVNCAP3: (M5 over VNCAP_M5) width == 0.            0            0
( 2411)  GRVNCAP3: (MT over VNCAP_MT) width == 0.            0            0
( 2412)  GRVNCAP3: (M1 over VNCAP_M1) width == 0.            0            0
( 2413)  GRVNCAP3: (M2 over VNCAP_M2) width == 0.            0            0
( 2414)  GRVNCAP3: (M3 over VNCAP_M3) width == 0.            0            0
( 2415)  GRVNCAP3: (M4 over VNCAP_M4) width == 0.            0            0
( 2416)  GRVNCAP3: (M5 over VNCAP_M5) width == 0.            0            0
( 2417)  GRVNCAP3: (MT over VNCAP_MT) width == 0.            0            0
( 2418)  GRVNCAP3a: (M1 over VNCAPM1) width == 1.            0            0
( 2419)  GRVNCAP3a: (M2 over VNCAPM2) width == 1.            0            0
( 2420)  GRVNCAP3a: (M3 over VNCAPM3) width == 1.            0            0
( 2421)  GRVNCAP3a: (M4 over VNCAPM4) width == 1.            0            0
( 2422)  GRVNCAP3a: (M5 over VNCAPM5) width == 1.            0            0
( 2423)  GRVNCAP3a: (MT over VNCAPMT) width == 1.            0            0
( 2424)  GRVNCAP3a: (M1 over VNCAP_M1) width == 1            0            0
( 2425)  GRVNCAP3a: (M2 over VNCAP_M2) width == 1            0            0
( 2426)  GRVNCAP3a: (M3 over VNCAP_M3) width == 1            0            0
( 2427)  GRVNCAP3a: (M4 over VNCAP_M4) width == 1            0            0
( 2428)  GRVNCAP3a: (M5 over VNCAP_M5) width == 1            0            0
( 2429)  GRVNCAP3a: (MT over VNCAP_MT) width == 1            0            0
( 2430)  GRVNCAP4a: M1 over VNCAPM1 space (for co            0            0
( 2431)  GRVNCAP4a: M2 over VNCAPM2 space (for co            0            0
( 2432)  GRVNCAP4a: M3 over VNCAPM3 space (for co            0            0
( 2433)  GRVNCAP4a: M4 over VNCAPM4 space (for co            0            0
( 2434)  GRVNCAP4a: M5 over VNCAPM5 space (for co            0            0
( 2435)  GRVNCAP4a: MT over VNCAPMT space (for co            0            0
( 2436)  GRVNCAP4b: M1 over VNCAPM1 space (for co            0            0
( 2437)  GRVNCAP4b: M2 over VNCAPM2 space (for co            0            0
( 2438)  GRVNCAP4b: M3 over VNCAPM3 space (for co            0            0
( 2439)  GRVNCAP4b: M4 over VNCAPM4 space (for co            0            0
( 2440)  GRVNCAP4b: M5 over VNCAPM5 space (for co            0            0
( 2441)  GRVNCAP4b: MT over VNCAPMT space (for co            0            0
( 2442)  GRVNCAP4a: M1 over VNCAPM1 space (for co            0            0
( 2443)  GRVNCAP4a: M2 over VNCAPM2 space (for co            0            0
( 2444)  GRVNCAP4a: M3 over VNCAPM3 space (for co            0            0
( 2445)  GRVNCAP4a: M4 over VNCAPM4 space (for co            0            0
( 2446)  GRVNCAP4a: M5 over VNCAPM5 space (for co            0            0
( 2447)  GRVNCAP4a: MT over VNCAPMT space (for co            0            0
( 2448)  GRVNCAP4b: M1 over VNCAPM1 space (for co            0            0
( 2449)  GRVNCAP4b: M2 over VNCAPM2 space (for co            0            0
( 2450)  GRVNCAP4b: M3 over VNCAPM3 space (for co            0            0
( 2451)  GRVNCAP4b: M4 over VNCAPM4 space (for co            0            0
( 2452)  GRVNCAP4b: M5 over VNCAPM5 space (for co            0            0
( 2453)  GRVNCAP4b: MT over VNCAPMT space (for co            0            0
( 2454)  GRVNCAP6a: (V1 intersect VNCAPM1) space             0            0
( 2455)  GRVNCAP6a: (V2 intersect VNCAPM2) space             0            0
( 2456)  GRVNCAP6a: (V3 intersect VNCAPM3) space             0            0
( 2457)  GRVNCAP6a: (V4 intersect VNCAPM4) space             0            0
( 2458)  GRVNCAP6a: (V5 intersect VNCAPM5) space             0            0
( 2459)  GRVNCAP6a: (FT intersect VNCAPMT) space             0            0
( 2460)  GRVNCAP8a: (M1 intersect VNCAPM1) touchi            0            0
( 2461)  GRVNCAP8b: ((M2 intersect VNCAPM2) not o            0            0
( 2462)  GRVNCAP8b: ((MT intersect VNCAPMT) not o            0            0
( 2463)  GRVNCAP8b: ((M3 intersect VNCAPM3) not o            0            0
( 2464)  GRVNCAP8b: ((MT intersect VNCAPMT) not o            0            0
( 2465)  GRVNCAP8b: ((M4 intersect VNCAPM4) not o            0            0
( 2466)  GRVNCAP8b: ((MT intersect VNCAPMT) not o            0            0
( 2467)  GRVNCAP8b: ((M5 intersect VNCAPM5) not o            0            0
( 2468)  GRVNCAP8b: ((MT intersect VNCAPMT) not o            0            0
( 2469)  GRVNCAP8b: ((MT intersect VNCAPMT) not o            0            0
( 2470)  GRVNCAP9a: ((M1 intersect VNCAPM1) not o            0            0
( 2471)  GRVNCAP9a: ((M1 intersect VNCAPM1) not o            0            0
( 2472)  GRVNCAP9a: ((M2 intersect VNCAPM2) not o            0            0
( 2473)  GRVNCAP9a: ((M2 intersect VNCAPM2) not o            0            0
( 2474)  GRVNCAP9a: ((M3 intersect VNCAPM3) not o            0            0
( 2475)  GRVNCAP9a: ((M3 intersect VNCAPM3) not o            0            0
( 2476)  GRVNCAP9a: ((M4 intersect VNCAPM4) not o            0            0
( 2477)  GRVNCAP9a: ((M4 intersect VNCAPM4) not o            0            0
( 2478)  GRVNCAP9a: ((M5 intersect VNCAPM5) not o            0            0
( 2479)  GRVNCAP9a: VNCAPMT touching FT not allow            0            0
( 2480)  GRVNCAP9a: VNCAPMT touching FTBAR not al            0            0
( 2481)  GRVNCAP9b: ((M2 intersect VNCAPM2) touch            0            0
( 2482)  GRVNCAP9b: ((M3 intersect VNCAPM3) touch            0            0
( 2483)  GRVNCAP9b: ((M4 intersect VNCAPM4) touch            0            0
( 2484)  GRVNCAP9b: ((M5 intersect VNCAPM5) touch            0            0
( 2485)  GRVNCAP9b: ((MT intersect VNCAPMT) touch            0            0
( 2486)  GRVNCAP10: VNCAPM1 touching PCFUSE found            0            0
( 2487)  GRVNCAP10: VNCAPM2 touching PCFUSE found            0            0
( 2488)  GRVNCAP10: VNCAPM3 touching PCFUSE found            0            0
( 2489)  GRVNCAP10: VNCAPM4 touching PCFUSE found            0            0
( 2490)  GRVNCAP10: VNCAPM5 touching PCFUSE found            0            0
( 2491)  GRVNCAP10: VNCAPMT touching PCFUSE found            0            0
( 2492)  GRVNCAP10: VNCAPM1 touching K1 found !              0            0
( 2493)  GRVNCAP10: VNCAPM2 touching K1 found !              0            0
( 2494)  GRVNCAP10: VNCAPM3 touching K1 found !              0            0
( 2495)  GRVNCAP10: VNCAPM4 touching K1 found !              0            0
( 2496)  GRVNCAP10: VNCAPM5 touching K1 found !              0            0
( 2497)  GRVNCAP10: VNCAPMT touching K1 found !              0            0
( 2498)  GRVNCAP10: VNCAPM1 touching TLINE found             0            0
( 2499)  GRVNCAP10: VNCAPM2 touching TLINE found             0            0
( 2500)  GRVNCAP10: VNCAPM3 touching TLINE found             0            0
( 2501)  GRVNCAP10: VNCAPM4 touching TLINE found             0            0
( 2502)  GRVNCAP10: VNCAPM5 touching TLINE found             0            0
( 2503)  GRVNCAP10: VNCAPMT touching TLINE found             0            0
( 2504)  GRVNCAP10: VNCAPM1 touching BONDPAD foun            0            0
( 2505)  GRVNCAP10: VNCAPM2 touching BONDPAD foun            0            0
( 2506)  GRVNCAP10: VNCAPM3 touching BONDPAD foun            0            0
( 2507)  GRVNCAP10: VNCAPM4 touching BONDPAD foun            0            0
( 2508)  GRVNCAP10: VNCAPM5 touching BONDPAD foun            0            0
( 2509)  GRVNCAP10: VNCAPMT touching BONDPAD foun            0            0
( 2510)  GRVNCAP10: VNCAPM1 touching LOGOBND foun            0            0
( 2511)  GRVNCAP10: VNCAPM2 touching LOGOBND foun            0            0
( 2512)  GRVNCAP10: VNCAPM3 touching LOGOBND foun            0            0
( 2513)  GRVNCAP10: VNCAPM4 touching LOGOBND foun            0            0
( 2514)  GRVNCAP10: VNCAPM5 touching LOGOBND foun            0            0
( 2515)  GRVNCAP10: VNCAPMT touching LOGOBND foun            0            0
( 2516)  GRVNCAP10: VNCAPM1 touching IND_FILT fou            0            0
( 2517)  GRVNCAP10: VNCAPM2 touching IND_FILT fou            0            0
( 2518)  GRVNCAP10: VNCAPM3 touching IND_FILT fou            0            0
( 2519)  GRVNCAP10: VNCAPM4 touching IND_FILT fou            0            0
( 2520)  GRVNCAP10: VNCAPM5 touching IND_FILT fou            0            0
( 2521)  GRVNCAP10: VNCAPMT touching IND_FILT fou            0            0
( 2522)  GRVNCAP10: VNCAPM1 to adj. PCFUSE space             0            0
( 2523)  GRVNCAP10: VNCAPM2 to adj. PCFUSE space             0            0
( 2524)  GRVNCAP10: VNCAPM3 to adj. PCFUSE space             0            0
( 2525)  GRVNCAP10: VNCAPM4 to adj. PCFUSE space             0            0
( 2526)  GRVNCAP10: VNCAPM5 to adj. PCFUSE space             0            0
( 2527)  GRVNCAP10: VNCAPMT to adj. PCFUSE space             0            0
( 2528)  GRVNCAP10: VNCAPM1 to adj. K1 space >= 5            0            0
( 2529)  GRVNCAP10: VNCAPM2 to adj. K1 space >= 5            0            0
( 2530)  GRVNCAP10: VNCAPM3 to adj. K1 space >= 5            0            0
( 2531)  GRVNCAP10: VNCAPM4 to adj. K1 space >= 5            0            0
( 2532)  GRVNCAP10: VNCAPM5 to adj. K1 space >= 5            0            0
( 2533)  GRVNCAP10: VNCAPMT to adj. K1 space >= 5            0            0
( 2534)  GRVNCAP10: VNCAPM1 to adj. TLINE space >            0            0
( 2535)  GRVNCAP10: VNCAPM2 to adj. TLINE space >            0            0
( 2536)  GRVNCAP10: VNCAPM3 to adj. TLINE space >            0            0
( 2537)  GRVNCAP10: VNCAPM4 to adj. TLINE space >            0            0
( 2538)  GRVNCAP10: VNCAPM5 to adj. TLINE space >            0            0
( 2539)  GRVNCAP10: VNCAPMT to adj. TLINE space >            0            0
( 2540)  GRVNCAP10: VNCAPM1 to adj. BONDPAD space            0            0
( 2541)  GRVNCAP10: VNCAPM2 to adj. BONDPAD space            0            0
( 2542)  GRVNCAP10: VNCAPM3 to adj. BONDPAD space            0            0
( 2543)  GRVNCAP10: VNCAPM4 to adj. BONDPAD space            0            0
( 2544)  GRVNCAP10: VNCAPM5 to adj. BONDPAD space            0            0
( 2545)  GRVNCAP10: VNCAPMT to adj. BONDPAD space            0            0
( 2546)  GRVNCAP10: VNCAPM1 to adj. LOGOBND space            0            0
( 2547)  GRVNCAP10: VNCAPM2 to adj. LOGOBND space            0            0
( 2548)  GRVNCAP10: VNCAPM3 to adj. LOGOBND space            0            0
( 2549)  GRVNCAP10: VNCAPM4 to adj. LOGOBND space            0            0
( 2550)  GRVNCAP10: VNCAPM5 to adj. LOGOBND space            0            0
( 2551)  GRVNCAP10: VNCAPMT to adj. LOGOBND space            0            0
( 2552)  GRVNCAP10: VNCAPM1 to adj. IND_FILT spac            0            0
( 2553)  GRVNCAP10: VNCAPM2 to adj. IND_FILT spac            0            0
( 2554)  GRVNCAP10: VNCAPM3 to adj. IND_FILT spac            0            0
( 2555)  GRVNCAP10: VNCAPM4 to adj. IND_FILT spac            0            0
( 2556)  GRVNCAP10: VNCAPM4 to adj. IND_FILT spac            0            0
( 2557)  GRVNCAP10: VNCAPMT to adj. IND_FILT spac            0            0
( 2558)  GRVNCAP11b: (V2 over VNCAPM2) must be co            0            0
( 2559)  GRVNCAP11b: (V3 over VNCAPM3) must be co            0            0
( 2560)  GRVNCAP11b: (V4 over VNCAPM4) must be co            0            0
( 2561)  GRVNCAP11b: (V5 over VNCAPM5) must be co            0            0
( 2562)  GRVNCAP12: (M2 over VNCAPM2) must be coi            0            0
( 2563)  GRVNCAP12: (M3 over VNCAPM3) must be coi            0            0
( 2564)  GRVNCAP12: (M4 over VNCAPM4) must be coi            0            0
( 2565)  GRVNCAP12: (M5 over VNCAPM5) must be coi            0            0
( 2566)  GRVNCAP12: (MT over VNCAPMT) must be coi            0            0
( 2567)  GRVNCAP13: ((NW or BB) not touching (PC             0            0
( 2568)  GRVNCAP13: ((NW or BB) not touching (PC             0            0
( 2569)  GRVNCAP13: ((NW or BB) not touching (PC             0            0
( 2570)  GRVNCAP13: ((NW or BB) not touching (PC             0            0
( 2571)  GRVNCAP13: ((NW or BB) not touching (PC             0            0
( 2572)  GRVNCAP13: ((NW or BB) not touching (PC             0            0
( 2573)  GRVNCAP15: (M1 intersect VNCAPM1) must b            0            0
( 2574)  GRVNCAP15: (M2 intersect VNCAPM2) must b            0            0
( 2575)  GRVNCAP15: (M3 intersect VNCAPM3) must b            0            0
( 2576)  GRVNCAP15: (M4 intersect VNCAPM4) must b            0            0
( 2577)  GRVNCAP15: (M5 intersect VNCAPM5) must b            0            0
( 2578)  GRVNCAP15: (MT intersect VNCAPMT) must b            0            0
( 2579)  GRVNCPM1: Union (VNCAP_Mx (x=1,2,3,4,5,T            0            0
( 2580)  GRVNCPM2: VNCAP_M1 must enclose one VNCA            0            0
( 2581)  GRVNCPM2: VNCAP_M2 must enclose one VNCA            0            0
( 2582)  GRVNCPM2: VNCAP_M3 must enclose one VNCA            0            0
( 2583)  GRVNCPM2: VNCAP_M4 must enclose one VNCA            0            0
( 2584)  GRVNCPM2: VNCAP_M5 must enclose one VNCA            0            0
( 2585)  GRVNCPM2: VNCAP_MT must enclose one VNCA            0            0
( 2586)  GR900a: LV(for C4's) must be within C4LV            0            0
( 2587)  GR900a: LV outside of C4LV found! (when             0            0
( 2588)  GR900b: C4LV must touch LV !                        0            0
( 2589)  GR900: LV(terminal via) diameter == 47.0            0            0
( 2590)  GR900: LV(terminal via) diameter == 47.0            0            0
( 2591)  GR900c: LV touching C4 must be octogonal            0            0
( 2592)  GR906: LV(C4 pad) not within {GUARDEDGE,            0            0
( 2593)  GR907: LV(C4 pad) touching Chip Logo & P            0            0
( 2594)  GR901: LV(C4 pad) to LV(C4 pad) space >=            0            0
( 2595)  GR902b: LV within AM >= 14.500 um.                  0            0
( 2596)  GR902b: LV within MA >= 14.500 um.                  0            0
( 2597)  GR902b: LV within ML >= 14.500 um.                  0            0
( 2598)  GR902b: LV within MZ >= 14.500 um.                  0            0
( 2599)  GR906: LV(C4 pad) within {GUARDEDGE,(CHI            0            0
( 2600)  GR907: LV(C4 pad) to Chip Logo & PN (LOG            0            0
( 2601)  GRC4MX: Minimum C4's per chip should be             0            0
( 2602)  GRC4MN: Maximum C4's per chip should be             0            0
( 2603)  GR911a: LVDUMMY must not touch LV !                 0            0
( 2604)  GR927: ({GUARDEDGE,(CHIPEDGE not touchin            0            0
( 2605)  GRBONDPAD1: BONDPAD overlap past LASTMET            0            0
( 2606)  GRBONDPAD3: LASTMETAL(over BONDPAD) not             0            0
( 2607)  GRBONDPAD3: LASTMETAL(over BONDPAD) must            0            0
( 2608)  GRBONDPAD3: LASTMETAL(over BONDPAD) must            0            0
( 2609)  GRBONDPAD4: LASTMETAL(over BONDPAD) touc            0            0
( 2610)  GRBONDPAD4: LASTMETAL(over BONDPAD) touc            0            0
( 2611)  GRBONDPAD4: LASTMETAL(over BONDPAD) touc            0            0
( 2612)  GRBONDPAD4: LASTMETAL(over BONDPAD) touc            0            0
( 2613)  GRBONDPAD4: LASTMETAL(over BONDPAD) touc            0            0
( 2614)  GRBONDPAD4: LASTMETAL(over BONDPAD) touc            0            0
( 2615)  GRBONDPAD4: LASTMETAL(over BONDPAD) touc            0            0
( 2616)  GRBONDPAD4: LASTMETAL(over BONDPAD) touc            0            0
( 2617)  GRBONDPAD4: LASTMETAL(over BONDPAD) touc            0            0
( 2618)  GRBONDPAD4: LASTMETAL(over BONDPAD) touc            0            0
( 2619)  GRBONDPAD4: LASTMETAL(over BONDPAD) touc            0            0
( 2620)  GRBONDPAD4: LASTMETAL(over BONDPAD) touc            0            0
( 2621)  GRBONDPAD4: LASTMETAL(over BONDPAD) to B            0            0
( 2622)  GRBONDPAD4: LASTMETAL(over BONDPAD) to E            0            0
( 2623)  GRBONDPAD4: LASTMETAL(over BONDPAD) to K            0            0
( 2624)  GRBONDPAD4: LASTMETAL(over BONDPAD) to M            0            0
( 2625)  GRBONDPAD4: LASTMETAL(over BONDPAD) to M            0            0
( 2626)  GRBONDPAD4: LASTMETAL(over BONDPAD) to M            0            0
( 2627)  GRBONDPAD4: LASTMETAL(over BONDPAD) to M            0            0
( 2628)  GRBONDPAD4: LASTMETAL(over BONDPAD) to M            0            0
( 2629)  GRBONDPAD4: LASTMETAL(over BONDPAD) to M            0            0
( 2630)  GRBONDPAD4: LASTMETAL(over BONDPAD) to N            0            0
( 2631)  GRBONDPAD4: LASTMETAL(over BONDPAD) to P            0            0
( 2632)  GRBONDPAD4: LASTMETAL(over BONDPAD) to R            0            0
( 2633)  GRBONDPAD4: LASTMETAL(over BONDPAD) to N            0            0
( 2634)  WARNING: YOU HAVE BOTH C4 AND WIREBOND P            0            0
( 2635)  GRLEG_NOCS01: UNQUALIFIED_FEATURE: NOIBM            0            0
( 2636)  GRPILLAR00: UNQUALIFIED_FEATURE: CUPILLA            0            0
( 2637)  GRLEG_NOCS02: If NOIBMCRACKSTOP exists,             0            0
( 2638)  GRPILLAR01: If CUPILLAR exists, CUPILLAR            0            0
( 2639)  NOTE: YOU HAVE BOTH C4 AND CUPILLAR PADS            0            0
( 2640)  GRF20: M2FILL area <= 144.00 sq. um.                0            0
( 2641)  GRF20: M3FILL area <= 144.00 sq. um.                0            0
( 2642)  GRF20: M4FILL area <= 144.00 sq. um.                0            0
( 2643)  GRF20: M5FILL area <= 144.00 sq. um.                0            0
( 2644)  GRF20: MTFILL area <= 144.00 sq. um.                0            0
( 2645)  GRF20: E1FILL area <= 144.00 sq. um.                0            0
( 2646)  GR5VONLY01: If 5VONLY shape exists in th            0            0
( 2647)  GR5VONLY02: 5VONLY cannot exist in the s            0            0
( 2648)  GRPLYONCRK1: (PLYONCRK,5VONLY) wthin CHI            0            0
( 2649)  GRPLYONCRK2: (CHIPEDGE touching PLYONCRK            0            0
( 2650)  GRJS01: JS space >=0.64.                            0            0
( 2651)  GRJS02: JS width  >=0.52.                           0            0
( 2652)  GRJS02a: JS min area  >=2.60                        0            0
( 2653)  GRJS04: JS to adjacent RX >=0.14.                   0            0
( 2654)  GRJS05: JS overlap past JRX >= 0.14 um.             0            0
( 2655)  GRJS06: JS must be within JC.                       0            0
( 2656)  GRJS11: JS cannot overlpa BP.                       0            0
( 2657)  GRJSPN001: JS straddling LOGOBND not all            0            0
( 2658)  GRAS11: AS minimum width >= 1.44 um !               0            0
( 2659)  GRAS12: AS minimum space >= 0.50 um.                0            0
( 2660)  GRAS12: AS minimum notch >= 0.50 um.                0            0
( 2661)  GRAS14: AS enclosed area >= 0.387 sq.um.            0            0
( 2662)  GRAS15: Non-orthogonal AS shapes found!             0            0
( 2663)  GRAS16: [(PC over RX) over AS] must be r            0            0
( 2664)  GRAS17: AS must touch [(PC over RX) not             0            0
( 2665)  GRAS18a: AS touching (PC not touching RX            0            0
( 2666)  GRAS18b: AS touching ({RX,PC} touching O            0            0
( 2667)  GRAS18c: AS touching (BP touching {OP,PC            0            0
( 2668)  GRAS18d: AS touching {BB,DG,TG,MOSVAR,(Z            0            0
( 2669)  GRAS18e: AS touching {PR,NR,JD,RN,RR,RP,            0            0
( 2670)  GRAS18f: AS touching {BFMOAT,BONDPAD,BPE            0            0
( 2671)  GRAS19a: AS over NW not allowed.                    0            0
( 2672)  GRAS19b: AS over BP not allowed.                    0            0
( 2673)  GRAS20a: AS to NW space >= 0.44 um.                 0            0
( 2674)  GRAS20b: AS must abut NW (point touching            0            0
( 2675)  GRAS20_or: Either {AS to NW space must b            0            0
( 2676)  GRAS21a: AS to BP space >= 0.34 um.                 0            0
( 2677)  GRAS21b: AS must abut BP (point touching            0            0
( 2678)  GRAS21_or: Either {AS to BP space must b            0            0
( 2679)  GRAS22a: AS to TG     space >= 0.44 um.             0            0
( 2680)  GRAS22a: AS to DG     space >= 0.44 um.             0            0
( 2681)  GRAS22a: AS to MOSVAR space >= 0.44 um.             0            0
( 2682)  GRAS22b: AS to (BP touching PCFUSE) spac            0            0
( 2683)  GRAS22c: AS to BB space >= 0.44 um.                 0            0
( 2684)  GRAS22d: AS to ZEROVT space >= 1.16 um.             0            0
( 2685)  GRAS22e: AS to RN space >= 0.34 um.                 0            0
( 2686)  GRAS22f: AS to BH3 space >= 0.44 um.                0            0
( 2687)  GRAS104: [(PC to PC) over AS] space >= 0            0            0
( 2688)  GRAS104: [(PC to PC) over AS] notch >= 0            0            0
( 2689)  GRAS353: RX straddling AS found!                    0            0
( 2690)  GRAS353: RX within AS >= 0.72 um.                   0            0
( 2691)  GRAS355: AS to RX space >= 0.72 um.                 0            0
( 2692)  GRAS357: BH to AS space >= 0.44 um.                 0            0
( 2693)  GRAS370: (PC over RX) to AS space >= 0.8            0            0
( 2694)  GRAS371: (PC over RX) straddling AS foun            0            0
( 2695)  GRAS371: (PC over RX) within AS >= 0.90             0            0
( 2696)  GRAS942: DV terminal WB pad to AS >= 3.0            0            0
( 2697)  GRAS942: TV terminal WB pad to AS >= 3.0            0            0
( 2698)  GRAS951: DV terminal WB pad touching AS             0            0
( 2699)  GRAS951: TV terminal WB pad touching AS             0            0
( 2700)  GRAS990: BP in the chip guardring touchi            0            0
( 2701)  GRASPN001: AS shape straddling LOGOBND n            0            0
( 2702)  qtHt_err_chipedge: GRQCAP1c: (QT+HT) are            0            0
( 2703)  GRNW5:  (PI not over NW) space (differen            0            0
( 2704)  GRDG13: DG touching NW, BB or BH                    0            0
( 2705)  GRDG13: DG to NW space >= 0.440 um.                 0            0
( 2706)  GRDG13: DG to BB space >= 0.440 um.                 0            0
( 2707)  GRDG13: DG to BH space >= 0.440 um.                 0            0
( 2708)  GRDG13: Layout will cause: DG to BH spac            0            0
( 2709)  # INFO: CMRF-7sf ASSURA DRC DECK (REV DA            1            1
--------------------------------------------------------------------------------
Total  errors:                                               2            2
--------------------------------------------------------------------------------

   Finished creating Error Database ...

   Writing Report into /home/DREXEL/jvk27/ECEC472/IBM/SRA_DRC/SRA_DRC.err ...
   Rule 2 done.
   Rule 2709 done.

avrpt cpu sec:    1.03  elapsed:     3  virtual:    93M

Finished /opt/cadence/ASSURA41//tools/assura/bin/avrpt

Starting /opt/cadence/ASSURA41//tools/assura/bin/avcallproc /home/DREXEL/jvk27/ECEC472/IBM/SRA_DRC/SRA_DRC.rsf -restart -cdslib /home/DREXEL/jvk27/ECEC472/IBM/cds.lib -libdefs /home/DREXEL/jvk27/ECEC472/IBM/lib.defs

Finished /opt/cadence/ASSURA41//tools/assura/bin/avcallproc


Run ended: Sat Mar 15 12:56:35 2014

*****  Assura terminated normally  *****

